
﻿/*
 * Создано в SharpDevelop.
 * Пользователь: Травин
 * Дата: 23.09.2017
 * Время: 10:25
 */
 
using System;
using System.Drawing;
using System.Windows.Forms;
using System.Data; 
 /*
    Показывать атрибуты - собственные 
    Показывать атрибуты - унаследованные
    Показывать атрибуты - поля
    Показывать атрибуты - ссылки
    Показывать атрибуты - универсальные ссылки
    Показывать атрибуты - массивы связанных объектов
    Показывать атрибуты - из базы данных
    Показывать атрибуты - системные
    Показывать атрибуты - вычисляемые на MSQL
    Показывать атрибуты - неисторичные
    Показывать атрибуты - историчные
    Показывать атрибуты - входящие в наименование объекта
    Показывать атрибуты - ключевые
    Показывать атрибуты - обязательные
    Показывать атрибуты - запрещенные к выводу в гибких таблицах
    Системная                                   = 1 бит 1
    Объект учета                                = 2 бит 2
    Древовидная                                 = 3 бит 4
    Разделена по филиалам                       = 4 бит 8
    Использовать счетчик универсальных ссылок   = 5 бит 32
    Содержит протокольную информацию            = 6 бит 64
 
    Attr_Type = 1 - (Поле)        Поле
    Attr_Type = 2 - (Ссылка)      Ссылка
    Attr_Type = 3 - (УниСсылка)   Универсальная ссылка
    Attr_Type = 4 - (Массив)      Массив
    
    Attr_Kind = 1 - (Простой)     Атрибут из базы данных
    Attr_Kind = 2 - (Системный)   Системный
    Attr_Kind = 3 - (Вычисляемый) Вычисляемый
*/  
namespace FBA
{        
    public partial class FormModel : FormObj
    {
        #region Region. Переменные и конструктор.
                 
        public FormModel()
        {            
            InitializeComponent();
            this.MdiParent = sys.FormMainObj;
            this.Icon = this.MdiParent.Icon;            
            CompEntityTreeFBA1.LoadEntityTree(); 
            CompEntityTreeFBA1.SelectInOneClick = true;
            CompEntityTreeFBA1.Editable = true;
        } 
        
        #endregion Region. Переменные и конструктор.
                               
        private void CompEntityTreeFBA1_SelectedEntity(object sender, SelectEntityEventArgs e)
        {
            LoadAttrList(CompEntityTreeFBA1.EntityID);
            LoadTableList(CompEntityTreeFBA1.EntityID);
        }        
        
        ///Контекстное меню.
        private void AddClick(object sender, EventArgs e)
        {
        	string SenderName = sys.GetSenderName(sender);  
        	
            //Компонент на котором повешено контекстное меню.
            string ComponentStrip = sys.GetControlNameByMenuStripItem(sender);                                                                         
            string ObjID;                                                       
            string AttrinbuteEntityID = CompEntityTreeFBA1.EntityID;
            //Атрибут.
            if (ComponentStrip == "dgvAttr")
            {
                ObjID = sys.DGSelected(dgvAttr, "ID");
                string AttrBrief = sys.DGSelected(dgvAttr, "Brief");
                string AttrName  = sys.DGSelected(dgvAttr, "Name");
                string Operation = "";               
                if (SenderName == "cmModel_N1") Operation = "Add";                
                if (SenderName == "cmModel_N2") Operation = "Edit";                                 
                if (SenderName == "cmModel_N3") Operation = "Del";
                if (SenderName == "cmModel_N4") LoadAttrList(AttrinbuteEntityID);            
                if (Operation == "") return;
                var F1 = new FormAttr(Operation, AttrinbuteEntityID, ObjID, AttrBrief, AttrName);
                F1.Icon = this.Icon;
                if (F1.ShowDialog() ==  DialogResult.OK) LoadAttrList(AttrinbuteEntityID);
            }
            
            //Таблица.
            if (ComponentStrip == "dgvTable")
            {                                
                ObjID = sys.DGSelected(dgvTable, "ID");      
                string ObjName  = sys.DGSelected(dgvTable, "Name");
                string Operation = "";            
                if (SenderName == "cmModel_N1") Operation = "Add";                                                                                                         
                if (SenderName == "cmModel_N2") Operation = "Edit";
                if (SenderName == "cmModel_N3") Operation = "Del"; 
                if (SenderName == "cmModel_N4") LoadTableList(AttrinbuteEntityID);                                   
                if (Operation == "") return;              
                var F1 = new FormTable(Operation, ObjID, "", ObjName, AttrinbuteEntityID);
                F1.Icon = this.Icon; 
                if (F1.ShowDialog() ==  DialogResult.OK) LoadTableList(AttrinbuteEntityID);
            }
        }
        
        ///Получение фильтра для отображения атрибутов.
        private string GetAttrWHERE()
        {
            /*
            Показывать атрибуты - собственные                (EnChildID = EnID)
            Показывать атрибуты - унаследованные             (EnChildID != EnID)
            
            Показывать атрибуты - поля                       (Attr_Type = 1)
            Показывать атрибуты - ссылки                     (Attr_Type = 2)
            Показывать атрибуты - универсальные ссылки       (Attr_Type = 3)
            Показывать атрибуты - массивы связанных объектов (Attr_Type = 4)
            
            Показывать атрибуты - из базы данных             (Attr_Kind = 1)
            Показывать атрибуты - системные                  (Attr_Kind = 2)
            Показывать атрибуты - вычисляемые на MSQL        (Attr_Kind = 3)
            
            Показывать атрибуты - неисторичные               (Table_Type = 1)
            Показывать атрибуты - историчные                 (Table_Type = 2)
            
            Показывать атрибуты - входящие в наименование объекта (Attr_NameOrder <> '')
            Показывать атрибуты - ключевые
            Показывать атрибуты - обязательные
            Показывать атрибуты - запрещенные к выводу в гибких таблицах
            */
            string WHERE = "1=1 ";          
            if (!tsAttr_N1.Checked)  WHERE = WHERE + "AND NOT (EnChildID = EnID) ";
            if (!tsAttr_N2.Checked)  WHERE = WHERE + "AND NOT (EnChildID <> EnID) ";
            if (!tsAttr_N3.Checked)  WHERE = WHERE + "AND NOT (t2.Type = 1) ";                   
            if (!tsAttr_N4.Checked)  WHERE = WHERE + "AND NOT (t2.Type = 2) ";          
            if (!tsAttr_N5.Checked)  WHERE = WHERE + "AND NOT (t2.Type = 3) ";           
            if (!tsAttr_N6.Checked)  WHERE = WHERE + "AND NOT (t2.Type = 4) ";          
            if (!tsAttr_N7.Checked)  WHERE = WHERE + "AND NOT (t2.Kind = 1) ";           
            if (!tsAttr_N8.Checked)  WHERE = WHERE + "AND NOT (t2.Kind = 2) "; 
            if (!tsAttr_N9.Checked)  WHERE = WHERE + "AND NOT (t2.Kind = 3) ";           
            if (!tsAttr_N10.Checked) WHERE = WHERE + "AND NOT (t3.Type = 1) ";           
            if (!tsAttr_N11.Checked) WHERE = WHERE + "AND NOT (t3.Type = 2) "; 
            if (!tsAttr_N12.Checked) WHERE = WHERE + "AND NOT (t2.ObjectNameOrder <> '') ";
            return WHERE;
        }
        
        ///Получение фильтра для отображения таблиц.
        private string GetTableWHERE()
        {
            /*
            Показывать собственные таблицы (EnChildID = EnID)
            Показывать унаследованные таблицы (EnChildID != EnID)
            Показывать обычные таблицы (Table_Type = 1)
            Показывать историчные таблицы (Table_Type = 2) 
            */
            string WHERE = "1=1 ";            
            if (!tsTable_N1.Checked)  WHERE = WHERE + "AND NOT (EnChildID = EnID) ";
            if (!tsTable_N2.Checked)  WHERE = WHERE + "AND NOT (EnChildID <> EnID) ";
            if (!tsTable_N3.Checked)  WHERE = WHERE + "AND NOT (t2.Type = 1) ";                   
            if (!tsTable_N4.Checked)  WHERE = WHERE + "AND NOT (t2.Type = 2) ";   
            return WHERE;
        }
        
        ///Загрузить список атрибутов.
        private void LoadAttrList(string EntityRefID)
        {                        
            if (EntityRefID == "")
            {
                sys.SM("Ошибка. Не указан ИД сущности!");
                return;
            }
            
            var DT = new System.Data.DataTable();                       
            string QueryTextStr = string.Join(sys.CR, this.QueryText);
            string SQL = sys.GetSection(QueryTextStr, "Attr");
            SQL = SQL.Replace("1694", EntityRefID);
            SQL = SQL.Replace("1=1", GetAttrWHERE());
            sys.SelectDT("Remote", SQL, out DT);
            dgvAttr.DataSource = DT;
        }
        
        ///Загрузить список таблиц.
        private void LoadTableList(string EntityRefID)
        {
            var DT = new System.Data.DataTable();               
            string QueryTextStr = string.Join(sys.CR, this.QueryText);
            string SQL = sys.GetSection(QueryTextStr, "Table");
            SQL = SQL.Replace("1694", EntityRefID);
            SQL = SQL.Replace("1=1", GetTableWHERE());
            sys.SelectDT("Remote", SQL, out DT);
            dgvTable.DataSource = DT;
        }             
        
        ///При выборе кнопки фильтра в таблице атрибутов.
        private void tsAttr_N1_Click(object sender, EventArgs e)
        {
            LoadAttrList(CompEntityTreeFBA1.EntityID);
        }
        
        ///При выборе кнопки фильтра в таблице таблиц сущности.
        private void tsTable_N1_Click(object sender, EventArgs e)
        {
            LoadTableList(CompEntityTreeFBA1.EntityID); 
        }                 
         
        //Хм... благодаря этому коду форма при измениии размеров перерисовывается значительно быстрее. Взято отсюда: 
        //https://social.msdn.microsoft.com/Forums/windows/en-US/c27693d2-9b4e-4395-9e90-402a6af96307/splitcontainer-flickering-issue-while-resizing-it?forum=winforms
        protected override CreateParams CreateParams       
        {       
            get           
            {       
                CreateParams cp = base.CreateParams;           
                cp.ExStyle |= 0x02000000;           
                return cp;       
            }       
        }        
    }              
}
