
﻿/*
 * Создано в SharpDevelop.
 * Пользователь: Травин
 * Дата: 29.09.2017
 * Время: 14:45
 */
 
using System;
using System.Drawing;
using System.Windows.Forms;
namespace FBA
{
    ///Форма по управлению ролями пользователей, а также правами на формы и произвольными правами. 
    public partial class FormGrant : Form
    {
        public FormGrant()
        {           
            InitializeComponent();
            this.MdiParent = sys.FormMainObj; 
            this.Icon = this.MdiParent.Icon;                      
        }
        
        #region Region.  Вкладка Users.
              
        ///Показ списка пользователей.
        private void UserListRefresh()
        {   
            const string SQL = "SELECT ID, Login, Name, Pass, RoleID, Block, DateCreate, DateChange FROM arhUser ORDER BY ID " ;
            sys.RefreshGrid("Remote", SQL, dgvUser);          
        }                     
                                     
        ///Удаление пользователя.
        public bool UserDelete(string UserID)       
        {
            if (sys.SM("Вы хотите действительно удалить пользователя?", "Question", "Удаление пользователя") == false) return false;
            try                            
            {
                sys.Exec("Remote", "DELETE FROM arhUser WHERE ID = " + UserID);
                return true;
            }
           catch (Exception e)
           {                
                 sys.SM(e.Message);
                 return false;
           }
        }
        
        ///Блокирование пользователя.
        public bool UserBlock(string UserID, string Block)
        {   
            if (sys.SM("Вы хотите действительно блокировать пользователя?", "Question", "Блокирование пользователя") == false) return false;                
            sys.Exec("Remote", "UPDATE arhUser SET Block = " + Block + " WHERE ID = " + UserID);
            UserListRefresh();  
            return true;
        }        
        
        ///Добавление/Удаление/Изменение пользователя.
        private void UserEdit(string Operation, string UserID, string Login, string UserName, string Pass, string Block)
        {
            if ((Operation == "Add") || (Operation == "Edit"))
            {      
                var F1 = new FormUser(Operation, UserID, Login, UserName, Pass, Block);
                F1.Owner = this;
                F1.ShowDialog();
                int StatusClose = F1.StatusClose;                   
                if (StatusClose == 2) return;
                UserListRefresh();                     
            }           
            if (Operation == "Del") 
                if (UserDelete(UserID)) UserListRefresh();
                 
        }
        
        ///Событие. Кнопки добавления/удаления/изменения пользователя: Add, Del, Edit, Block, UnBlock, Refresh
        private void TbUser1Click(object sender, EventArgs e)
        { 
            string UserID     = ""; 
            string UserLogin  = "";             
            string UserName   = "";
            string UserPass   = "";         
            string RoleID     = "";  
            string Block      = ""; 
            string SenderName = sys.GetSenderName(sender);            
            if (dgvUser.RowCount > 0) 
            {
                UserID    = dgvUser.SelectedRows[0].Cells["ID"].Value.ToString();
                UserName  = dgvUser.SelectedRows[0].Cells["Name"].Value.ToString();
                UserLogin = dgvUser.SelectedRows[0].Cells["Login"].Value.ToString();
                UserPass  = dgvUser.SelectedRows[0].Cells["Pass"].Value.ToString();                
                RoleID    = dgvUser.SelectedRows[0].Cells["RoleID"].Value.ToString();
                Block     = dgvUser.SelectedRows[0].Cells["Block"].Value.ToString();
            }
             
            if (SenderName == "tbUser1") {UserEdit("Add",  UserID, UserLogin, UserName, UserPass, Block);};                        
            if (SenderName == "tbUser2") {UserEdit("Del",  UserID, UserLogin, UserName, UserPass, Block);};
            if (SenderName == "tbUser3") {UserEdit("Edit", UserID, UserLogin, UserName, UserPass, Block);};             
            if (SenderName == "tbUser4") {UserListRefresh();};
            if (SenderName == "tbUser5") {UserBlock(UserID, "1");};
            if (SenderName == "tbUser6") {UserBlock(UserID, "0");};
        }                   
        
        #endregion Region.  Вкладка Users.
       
        #region Region.  Вкладка Роли.
         
        ///Показ списка ролей
        private void RoleListRefresh()
        {
           const string SQL = "SELECT ID, Name, Brief, DateCreate, DateChange FROM arhRole ORDER BY ID " ;
           sys.RefreshGrid("Remote", SQL, dgvRole); 
        }               
        
        ///Добавление/Удаление/Изменение роли
        private void RoleEdit(string Operation, string RoleID, string RoleName, string Brief)
        {
            if ((Operation == "Add") || (Operation == "Edit"))
            {      
                var F1 = new FormRole(Operation, RoleID, RoleName, Brief);
                F1.Owner = this;
                F1.ShowDialog();
                int StatusClose = F1.StatusClose;                   
                if (StatusClose == 2) return;
                RoleListRefresh();
            }           
            if (Operation == "Del") 
                if (RoleDelete(RoleID)) RoleListRefresh();                                  
        }
        
        ///Удаление роли.
        private bool RoleDelete(string RoleID)
        {
            if (sys.SM("Вы хотите действительно удалить роль?", "Question", "Удаление роли") == false) return false;                
            return sys.Exec("Remote", "DELETE FROM arhRole WHERE ID = " + RoleID);            
        }
        
        ///Событие. Кнопки редактирования ролей: Add, Del, Edit, Refresh
        private void TbRole1Click(object sender, EventArgs e)
        {   
            string RoleID     = ""; 
            string RoleName   = "";             
            string RoleBrief  = ""; 
            string SenderName = sys.GetSenderName(sender);
            if (dgvRole.RowCount > 0) 
            {
                RoleID = dgvRole.SelectedRows[0].Cells["ID"].Value.ToString();
                RoleName   = dgvRole.SelectedRows[0].Cells["Name"].Value.ToString();
                RoleBrief  = dgvRole.SelectedRows[0].Cells["Brief"].Value.ToString();                
            }
               
            if (SenderName == "tbRole1") {RoleEdit("Add",  RoleID, RoleName, RoleBrief);};
            if (SenderName == "tbRole2") {RoleEdit("Del",  RoleID, RoleName, RoleBrief);};
            if (SenderName == "tbRole3") {RoleEdit("Edit", RoleID, RoleName, RoleBrief);};
            if (SenderName == "tbRole4") {RoleListRefresh();};            
        }
        
        ///Событие. Показываем список пользователей и ролей.
        private void FormGrantLoad(object sender, EventArgs e)
        {
            UserListRefresh();
            RoleListRefresh();
            RightListRefresh();
            HistRefresh();
        }
        
        #endregion Region. Вкладка Роли.
       
        #region Region. Вкладка Права.                     
        
        ///Показ списка прав.
        private void RightListRefresh()
        {
           const string SQL = "SELECT ID, Name, Brief, DateCreate, DateChange FROM arhRight ORDER BY ID " ;
           sys.RefreshGrid("Remote", SQL, dgvRight); 
        }
        
        ///Добавление/Удаление/Изменение права.
        private void RightEdit(string Operation, string RightID, string RightName, string RightBrief)
        {
            if ((Operation == "Add") || (Operation == "Edit"))
            {      
                var F1 = new FormRight(Operation, RightID, RightName, RightBrief);                
                F1.Icon = this.Icon; 
                F1.ShowDialog();               
                int StatusClose = F1.StatusClose;                   
                if (StatusClose == 2) return;
                RightListRefresh();
            }           
            if (Operation == "Del") 
                if (RightDelete(RightID)) RightListRefresh();                                  
        }
        
        ///Удаление права.
        private bool RightDelete(string RightID)
        {
            if (sys.SM("Вы хотите действительно удалить право?", "Question", "Удаление права") == false) return false;                
            return sys.Exec("Remote", "DELETE FROM arhRight WHERE ID = " + RightID);            
        } 
        
        private void TbRight1Click(object sender, EventArgs e)
        {
            string RightID    = ""; 
            string RightName   = "";             
            string RightBrief  = ""; 
            string SenderName = sys.GetSenderName(sender);
            if (dgvRight.RowCount > 0) 
            {
                RightID     = dgvRight.SelectedRows[0].Cells["ID"].Value.ToString();
                RightName   = dgvRight.SelectedRows[0].Cells["Name"].Value.ToString();
                RightBrief  = dgvRight.SelectedRows[0].Cells["Brief"].Value.ToString();                
            }
               
            if (SenderName == "tbRight1") {RightEdit("Add",  RightID, RightName, RightBrief);};
            if (SenderName == "tbRight2") {RightEdit("Del",  RightID, RightName, RightBrief);};
            if (SenderName == "tbRight3") {RightEdit("Edit", RightID, RightName, RightBrief);};
            if (SenderName == "tbRight4") {RightListRefresh();};
        }
                 
        #endregion Region. Вкладка Права.
        
        #region Region. Вкладка История входов пользователя в систему.
        
        ///Обновить историю входов пользователя в систему.
        private void HistRefresh()
        {
            string UserID = dgvUser.SelectedRows[0].Cells["ID"].Value.ToString();
            string SQL = "SELECT ID, EntityID, ConnectionName, MachineName, " +
                         "       MachineUserName, UserForm, UserID, SystemName, EnterDate " + 
                         "FROM arhEnterHist WHERE UserID = " + UserID;
            sys.RefreshGrid2("Remote", SQL, sgHist); 
        }
        
        ///Обновить историю входов пользователя в систему.
        private void TbHist1Click(object sender, EventArgs e)
        {
            HistRefresh();
        }
        
        //При переключении вкладки на 
        private void TabControlMainSelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabControlMain.SelectedIndex == 3) HistRefresh();
        }
        
        #endregion Region. Вкладка История входов пользователя в систему.
       
    }
}
