<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sys</name>
    </assembly>
    <members>
        <member name="T:FBA.FormValue">
            <summary>
            Description of FormValue.
            </summary>
        </member>
        <member name="T:FBA.FormFBA">
            <summary>
            Это класс-потомок для всех форм - и главной MDI Parent и всех дочерних.   
            </summary>
            <remarks>
            Часть функционала здесь для родительской формы, а часть для дочерних.
            Часть функционала должна работать когда форма является дочерней формой MDI, 
            Часть - когда форма является формой SDI.
            Часть - когда форма является главной формой MDIContainer.
            При этом функционал общий и для родительской формы. 
            Все сделано в одном классе.    
            </remarks>   
        </member>
        <member name="F:FBA.FormFBA.WM_MDINEXT">
            <summary>
            Сообщение Windows активации формы.
            </summary>
        </member>
        <member name="M:FBA.FormFBA.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Послать сообщение форме.
            </summary>
            <param name="hWnd">Хендл окна</param>
            <param name="msg">Сообщение</param>
            <param name="wParam">Параметр w</param>
            <param name="lParam">Параметр l</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormFBA.GetMDIClient">
            <summary>
            Поиск дочерней формы. Для активации.
            </summary>
            <returns>Контейнер для дочерних форм многодокументного интерфейса (MDI).</returns>
        </member>
        <member name="M:FBA.FormFBA.ActivateMdiChild(FBA.FormFBA)">
            <summary>
            Активация дочерней формы, чтобы избежать мерцания. 
            Без этого кода форма при активации мерцает и активируется медленнее.
            </summary>
            <param name="childToActivate">Форма, которую нужно активировать.</param>
        </member>
        <member name="M:FBA.FormFBA.#ctor">
            <summary>
            Конструктор. 
            </summary>
        </member>
        <member name="M:FBA.FormFBA.FormListObjFind(System.String,FBA.FormFBA@)">
            <summary>
            Поиск формы по FormGUID.
            </summary>
            <param name="formGUID">GUID формы создается при создании формы</param>
            <param name="form">Ссылка на форму</param>
            <returns>Если форма найдена, то true</returns>
        </member>
        <member name="M:FBA.FormFBA.TabControlFormClick(System.Object,System.EventArgs)">
            При клике на кнопке TabControl делаем видимой форму.
        </member>
        <member name="M:FBA.FormFBA.TabControlFormMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            Вызов контекстного меню на шапке TabControl.
        </member>
        <member name="M:FBA.FormFBA.TabSetAction(System.String,System.String,FBA.FormFBA.ActionName)">
            Действия с вкладками по FormGUID: Active, Add, Del. 
        </member>
        <member name="M:FBA.FormFBA.cmMenuCloseForm(System.Object,System.EventArgs)">
            Событие контекстного меню на шапке TabControl. Закрыть выбранную вкладку.
        </member>
        <member name="M:FBA.FormFBA.cmMenuCloseAllForm(System.Object,System.EventArgs)">
            Событие контекстного меню на шапке TabControl. Закрыть все формы и вкладки.
        </member>
        <member name="M:FBA.FormFBA.FormSetAction(System.String,FBA.FormFBA.ActionName)">
            Действие с формой по FormGUID: Active, Close, Hide.
        </member>
        <member name="M:FBA.FormFBA.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Перехват события сворачивания формы.
            </summary>
            <param name="m">Message windows</param>
        </member>
        <member name="M:FBA.FormFBA.FormFBALoad(System.Object,System.EventArgs)">
            Событие. При показе любой формы проверяем наличие подключения, и если его нет, то устанавливаем.
        </member>
        <member name="M:FBA.FormFBA.FormFBAActivated(System.Object,System.EventArgs)">
            Событие. Когда форма становится активной, выделить кнопку на tabControlForm.
        </member>
        <member name="M:FBA.FormFBA.FormFBAClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            Событие. При закрыти любой формы MDIChild.
        </member>
        <member name="M:FBA.FormFBA.FormFBAMove(System.Object,System.EventArgs)">
            Событие. Когда форма задвигается за пределы родительской, то она становится самостоятельной (SDI).
        </member>
        <member name="M:FBA.FormFBA.FormFBAShown(System.Object,System.EventArgs)">
            Событие. Когда форма показывается.
        </member>
        <member name="M:FBA.FormFBA.OnHandleCreated(System.EventArgs)">
            <summary>
            При добавлении пунктов меню править в WndProc(ref Message m) строка WParam меньше 10. Т.е. нужно дробавить 11 и т.д.
            При создании формы.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFBA.ShowFormProperties">
            <summary>
            Показ свойств формы.
            </summary>
        </member>
        <member name="M:FBA.FormFBA.FormSetMDI">
            Сделать форму MDI (внутри главной формы FormMainObj)
        </member>
        <member name="M:FBA.FormFBA.FormSetSDI">
            <summary>
            Сделать форму свободно плавающей (снаружи главной формы FormMainObj).
            </summary>
        </member>
        <member name="M:FBA.FormFBA.FormMDILayout(System.Windows.Forms.MdiLayout)">
            <summary>
            Упорядочить окна MDI внутри главной формы.
            </summary>
            <param name="layout">Способ упорядочивания открытых окон</param>
        </member>
        <member name="M:FBA.FormFBA.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            Перехват нажатий кнопок, когда форма в фокусе.
        </member>
        <member name="M:FBA.FormFBA.SavePosition">
            Сохраняем размеры и положение формы, для того чтобы при повторном открытии восстановить их.
        </member>
        <member name="M:FBA.FormFBA.LoadPosition">
            Восстанавлииваем состояние формы. 
        </member>
        <member name="M:FBA.FormFBA.SetShowOnly(System.String)">
            <summary>
            Метод формы - устанавливает в Enabled = false все компоненты выбора на форме.
            Используется для того чтобы открыть форму только на просмотр.
            </summary>
            <param name="exceptControlsName">Список имен компонентов через запятую, которые не должнеы становиться Enabled = false</param>
        </member>
        <member name="M:FBA.FormFBA.FormSetShowOnly(System.Windows.Forms.Control.ControlCollection,System.String)">
            <summary>
            Метод формы - устанавливает в Enabled = false все компоненты выбора на форме.
            Используется для того чтобы открыть форму только на просмотр.
            Сделать форму только для чтения. Все компоненты выбора на форме 
            установить в Enabled = false.
            ExceptControlsName: ;btnOK;btnCancel;btnSomething; 
            </summary>
            <param name="controls">Список имен компонентов через запятую, которые не должнеы становиться Enabled = false</param>
            <param name="exceptControlsName">Список имен компонентов через запятую, которые не должнеы становиться Enabled = false</param>       
        </member>
        <member name="M:FBA.FormFBA.SetTextButtonOk(FBA.Operation,System.Windows.Forms.Control)">
            Присвоить текст кнопке Ok в зависимости от действия.
        </member>
        <member name="M:FBA.FormFBA.ErrorIfNull(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable@)">
            <summary>
            Проверка комронентов (у которых признак ErrorIfNull != "") 
            на то что значение Text этих заполнено. Если Text пустое, то возвращается значение ERRORIFNULL.  
            </summary>
            <param name="controls">Список контролов</param>
            <param name="dtArray"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormFBA.ErrorIfNullExists">
            <summary>
            Показать ошибки если есть. Если есть ошибки результат true.
            </summary>
            <returns>Если есть компоненты (у которых установлено свойство EditFBA, TextBoxFBA, ComboBoxFBA, FastColoredTextBoxFBA с незаполненным свойством Text то возникает ошибка.</returns>
        </member>
        <member name="M:FBA.FormFBA.ErrorIfNullCollect(System.Windows.Forms.Control.ControlCollection,System.Data.DataTable@,System.String@)">
            Сборка текста ошибок, если значение компонентов пустое. Метод только для ErrorIfNull. 
        </member>
        <member name="M:FBA.FormFBA.ReadArrayHist">
            <summary>
            Чтение из локальной БД истории всех введенных значений (только для TextBoxFBA и ComboBoxFBA)
            и запись истории в свойство ValueArray. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormFBA.ReadArrayHist(System.Windows.Forms.Form)">
            Чтение из локальной БД истории всех введенных значений (только для TextBoxFBA и ComboBoxFBA)
            и запись истории в свойство ValueArray.
        </member>
        <member name="M:FBA.FormFBA.ReadArrayHistData(System.Windows.Forms.Form,System.String,System.String[])">
            Присваиваем значение массива компоненту. Если это ComboBox, то и свойству Items.
            Метод только для ReadArrayHist.
        </member>
        <member name="M:FBA.FormFBA.WriteArrayHist">
            <summary>
            Запись текущих значений компонентов TextBox и ComboBox в локальную БД.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormFBA.WriteArrayHist(System.Windows.Forms.Form)">
            <summary>
            Запись текущих значений компонентов TextBox и ComboBox в локальную БД.
            </summary>
            <param name="form">Ссылка на форму System.Windows.Form</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormFBA.GetHistoryValue(System.String)">
            <summary>
            Получить выбранное пользователем значение из истории ввода значений в компонент.
            </summary>
            <param name="compName">Имя компонента на форме</param>
        </member>
        <member name="M:FBA.FormFBA.GetHistoryValue(System.Object)">
            <summary>
            Получить выбранное пользователем значение из истории ввода значений в компонент.  
            </summary>
            <param name="control"></param>
            <returns>Значение своства Text</returns>
        </member>
        <member name="P:FBA.FormFBA.FormGUID">
            <summary>
            Для определения экземпляра формы.   
            </summary>
        </member>
        <member name="P:FBA.FormFBA.QueryText">
            <summary>
            Просто текст. Можно хранить произвольный текст, например текст запросов.
            </summary>
        </member>
        <member name="P:FBA.FormFBA.FormMDIParent">
            <summary>
            Это свойство содержит имя формы-родителя MDIParent.
            </summary>
        </member>
        <member name="P:FBA.FormFBA.FormNumber">
            <summary>
            Если в прикладном коде будет создаваться несколько одинаковых форм, то здесь можно задавать номер или другой текст, 
            чтобы отличить один экземпляр формы от другого.
            </summary>
        </member>
        <member name="P:FBA.FormFBA.FormUsual">
            <summary>
            Включает/отключает дополнительные возможности формы: вкладки.
            </summary>
        </member>
        <member name="P:FBA.FormFBA.FormSavePosition">
            <summary>
            Включает/отключает дополнительные возможности формы: вкладки.
            </summary>
        </member>
        <member name="T:FBA.FormFBA.ActionName">
            <summary>
            Действия с вкладкой.
            </summary>        
        </member>
        <member name="F:FBA.FormValue.countTextBox">
            <summary>
            Количество создаваемых компонентов.
            </summary>
        </member>
        <member name="F:FBA.FormValue.textBoxArray">
            <summary>
            Массив компонентов TextBox на форме FormValue. Для доступа извне.
            </summary>
        </member>
        <member name="F:FBA.FormValue.comboBoxArray">
            <summary>
            Массив компонентов ComboBox на форме FormValue. Для доступа извне.
            </summary>
        </member>
        <member name="M:FBA.FormValue.#ctor(System.String,FBA.ValueParam[])">
            <summary>
            Если нужно несколько разных компонентов
            Вызывать так:
            ValueParam[] arrvp = new ValueParam[2];
            arrvp[0].type = FBA.TextBoxFBA; 
            arrvp[0].value = "Номер договора"; 	
            arrvp[1].type = FBA.TextBoxFBA; 
            arrvp[1].value = "Серия договора"; 
            var frm = new FormValue("Введите номер и серию договора", arrvp);
            if (frm.ShowDialog() != DialogResult.OK) return false;
            valueText1 = frm.GetValue(0);
            valueText2 = frm.GetValue(1);
            </summary>
            <param name="captionForm">Шапка формы</param>
            <param name="arrvp">Массив описателей параметра</param>
        </member>
        <member name="M:FBA.FormValue.GetValue(System.Int32)">
            <summary>
            Получение значения с формы.
            </summary>
            <param name="NumberText"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormValue.CreateOneText(System.Int32)">
            <summary>
            Создание метки Label и текстового поля TextBox или ComboBox.
            </summary>
        </member>
        <member name="M:FBA.FormValue.CreateLabel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Создание одного Label над текствоым полем.
            </summary>
            <param name="indexParam">Номер Label</param>
            <param name="xLabel">Координата X для Label</param>
            <param name="yLabel">Координата Y для Label</param>
            <param name="widthLabel">Ширина Label</param>
            <param name="heightLabel">Высота Label</param>		
        </member>
        <member name="M:FBA.FormValue.CreateTextBox(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Создание одного текстового поля TextBox.
            </summary>	
            <param name="indexParam">Номер TextBox</param> 
            <param name="xTextBox">Координата X</param>
            <param name="yTextBox">Координата Y</param>
            <param name="widthTextBox">Ширина создаваемого компонента</param>
            <param name="heightTextBox">Выстота создаваемого компонента</param>	
        </member>
        <member name="M:FBA.FormValue.CreateComboBox(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Создание одного текстового поля ComboBox.
            </summary>
            <param name="indexParam">Номер ComboBox</param>  
            <param name="xComboBox">Координата X</param>
            <param name="yComboBox">Координата Y</param>
            <param name="widthComboBox">Ширина создаваемого компонента</param>
            <param name="heightComboBox">Выстота создаваемого компонента</param>
        </member>
        <member name="M:FBA.FormValue.SetWordWrap(System.Windows.Forms.Control.ControlCollection,System.Boolean)">
            <summary>
            Установка WordWrap
            </summary>
            <param name="controls">form.Controls</param>
            <param name="wordWrap">true или false</param>
        </member>
        <member name="M:FBA.FormValue.CbWordWrapCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Установка WordWrap
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:FBA.FormValue.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:FBA.FormValue.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.FormValue.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:FBA.ValueParam">
            <summary>
            Класс для описания параметра формы FormValue.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.isComboBox">
            <summary>
            Если компонент должен быть ComboBox-ом, то true.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.valueType">
             <summary>
            Тип значения
             </summary>
        </member>
        <member name="F:FBA.ValueParam.value">
            <summary>
            Значение ComboBox.Text или textBox.Text
            </summary>
        </member>
        <member name="F:FBA.ValueParam.captionValue">
            <summary>
            Подпись над компонентом ввода
            </summary>
        </member>
        <member name="F:FBA.ValueParam.values">
            <summary>
            Список текстовых значений. Только для ComboBox.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.height">
            <summary>
            Высота поля компонента. Только для TextBox.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.width">
            <summary>
            Ширина поля компонента. Только для TextBox.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.scrolls">
            <summary>
            Полосы прокрутки. Только для TextBox.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.wordwrap">
            <summary>
            Перенос текста.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.msql">
            <summary>
            Текст запроса MSQL, для показа результатов в ComboBox.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.sql">
            <summary>
            Текст запроса SQL, для показа результатов в ComboBox.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.defaultTextGray">
            <summary>
            Текст, который будет выводиться в TextBox светло-серым цветом (подсказка пользователю), когда в компоненте пусто. Например текст "Введите номер договора"
            </summary>
        </member>
        <member name="F:FBA.ValueParam.defaultTextGrayColor">
            <summary>
            Цвет текст, который будет выводиться в TextBox светло-серым цветом, когда в компоненте пусто. Например текст "Введите номер договора"
            По умолчанию он Color.Gray. Но здесь его можно изменить.
            </summary>
        </member>
        <member name="F:FBA.ValueParam.readOnly">
            <summary>
            Свойство Read only для TextBox и ComboBox.
            </summary>
        </member>
        <member name="M:FBA.ValueParam.CopyTo(FBA.ValueParam)">
            <summary>
            Скопировать один параметр в другой. Копирование по значению, а не по ссылке.
            </summary>
            <param name="vp">Параметр кода копируем значения из данного.</param>
        </member>
        <member name="T:FBA.Arr">
            <summary>
            Статический класс. Здесь собраны все методы для обращения к данным. Для компонентов работы с даными.
            </summary>
        </member>
        <member name="M:FBA.Arr.SortTwoDimensionalArray(System.String[0:,0:],System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Сортировка двумерного массива. На выходе отсортированный массив.
            </summary>
            <param name="arr">Входной массив</param>
            <param name="columnsCaption">Названия колонок, по которым нужно устанавливать фильтр и сортировку
            Если columnsCaption="", то по умолчанию колонкам выставляются имена: Column1, Column2 и т.д.</param>
            <param name="maxColumns">Количество столбцов, которые нужно поместить в выходной отсортированный массив. 0-все столбцы.</param>
            <param name="MaxRows">Количество строк, которые нужно поместить в выходной отсортированный массив. 0-все столбцы.  </param>
            <param name="filter">Пример фильтра WHERE (как в SQL): Column1 = 100 AND (Column16 = 'FF' OR Column17 не равно Column10) </param>
            <param name="sort">Пример сортировки (как в SQL): Column1 ASC, Column16 DESC, Column17 ASC </param>
            <returns>Возвращается отсортированный массив</returns>
        </member>
        <member name="M:FBA.Arr.GetDistinctValues(System.String[0:,0:],System.String)">
            <summary>
            Получить из двумерного массива список уникальных значений в колонке с номером columnIndex, не меняя сортировки.
            columnsNames = "Column1", "Column2" ...
            </summary>
            <param name="arr">Входной массив</param>
            <param name="columnsNames">Названия колонок</param>
            <returns>Другой массив, в котром будут только колоки, указанные в columnsNames</returns>
        </member>
        <member name="M:FBA.Arr.DataTableToArray(System.Data.DataTable,System.String[0:,0:]@)">
            <summary>
            Сохранение DataTable в двумерный массив строк.
            </summary>
            <param name="dt">Исходная DataTable</param>
            <param name="ar">Выходной двумерный массив</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Arr.DataTableToArray(System.Data.DataTable,System.String[]@)">
            <summary>
            Сохранение DataTable в одномерный массив строк.
            </summary>
            <param name="dt">Исходная DataTable</param>
            <param name="ar">Выходной одномерный массив</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Arr.ArrayToDataTable(System.String[0:,0:],System.String,System.Data.DataTable@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            ДВУМЕРНЫЙ массив. Массив преобразовать в DataTable. ColumnCaption - через точку с запятой. 
            </summary>
            <param name="ar">Исходный массив</param>
            <param name="columnsCaption"></param>
            <param name="dt">Выходная DataTable</param>
            <param name="countColumns">Количество первых колонок, 0 - значит все.</param>
            <param name="countRows">Количество первых строк, 0 - значит все.</param>
            <param name="showNum">Добавить порядковый номер строки первой колонкой</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Arr.ArrayToDataTable(System.String[0:,0:],System.String,System.Data.DataTable@,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
             ДВУМЕРНЫЙ массив. Массив преобразовать в DataTable. ColumnCaption - через точку с запятой.
            </summary>
            <param name="ar"></param>
            <param name="columnsName">Названия колонок через точку с запятой. Если их нет, названия будут Column1, Column2 и т.д.</param>
            <param name="dt">Выходная DataTable</param>
            <param name="beginColumnIndex">Начиная с какой колонки копировать в DataTable.</param>
            <param name="beginRowIndex">Начиная с какой строки копировать в DataTable.</param>
            <param name="countColumns">Количество колонок, которые нужно взять из входного массива. 0, значит все.</param>
            <param name="countRows">Количество строк, которые нужно взять из входного массива. 0, значит все.         </param>
            <param name="showNum">добавить первой колонкой порядковый номер строки.</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Arr.ArrayToDataTable(System.String[],System.String,System.Data.DataTable@,System.Int32,System.Boolean)">
            <summary>
            ОДНОМЕРНЫЙ массив. Массив преобразовать в DataTable. 
            Max = 0, значит все. ShowNum - показывать порядковый номер строки.
            </summary>
            <param name="ar"></param>
            <param name="columnsCaption">Колонки через точку с запятой. </param>
            <param name="dt">Выходная DataTable</param>    
            <param name="countRows">Кодичество строк для показа</param>
            <param name="showNum"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Arr.DataGridViewToArray(FBA.DataGridViewFBA,System.String[0:,0:]@)">
            <summary>
            Сохранение DataTable в двумерный массив строк.
            </summary>
            <param name="dg">FBA.DataGridViewFB</param>
            <param name="ar">Выходной массив</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Arr.ArrayFindValue(System.String[0:,0:],System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            Поиск значения в двумерном массиве, по примеру Dictionary. Массив: arr[rows, cols].
            Поиск производится по колонке с индексом indexSearch. Значение возвращается из колонки с индексом indexReturnValue.
            </summary>
            <param name="arr">Массив, в котором производится поиск.</param>
            <param name="searchString">Строка, которую ищем</param>
            <param name="indexSearch">Индекс колонки, в котрой ищем.</param>
            <param name="indexReturnValue">Индекс колонки, из которой возвращаем значение</param>
            <param name="returnValue">Возвращаемое значение</param>
            <returns>true, если поиск успешен.</returns>
        </member>
        <member name="M:FBA.Arr.ArrayView(System.String,System.String,System.String[0:,0:])">
            <summary>
            Показ на форме значений массива двумерного Arr. Пример: sys.ViewArray("0. Num;1. Lex; 2. Brace;", MySquareStringArray);
            </summary>
            <param name="capForm">Заголовок формы, на котрой будет показан массив</param>
            <param name="сapArray">Название массива</param>
            <param name="arr">Массив, который показываем</param>
            <returns>Возврат массива, выбранных строк в массиве.</returns>
        </member>
        <member name="M:FBA.Arr.ArrayView(System.String,System.String,System.String[])">
            <summary>
            Показ на форме значений массива одномерного Arr. Пример: sys.ViewArray("History of entered values", "Value", Arr);
            </summary>
            <param name="capForm">Заголовок формы, на котрой будет показан массив</param>
            <param name="capArray">Название массива</param>
            <param name="arr">Массив, который показываем</param>
            <returns>Возвращает массив выбранных значений после показа на форме массива Arr.</returns>
        </member>
        <member name="M:FBA.Arr.ArrayClear(System.String[0:,0:])">
            <summary>
            Очистка двумерного массива.
            </summary>
            <param name="arr">Массив, который очищаем</param>
        </member>
        <member name="M:FBA.Arr.GetNextEmptyRow(System.String[0:,0:])">
            <summary>
            Получить номер последней строки (нумерация от нуля), в которой заполен первый столбец двумерного массива.
            </summary>
            <param name="arr"></param>
            <returns>Номер последней строки, в которой заполен первый столбец двумерного массива</returns>
        </member>
        <member name="M:FBA.Arr.ArrayConcat(System.String[0:,0:],System.String[0:,0:],System.String[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            Добавление двумерного массива arrSource2[Y, X] к двумерному массиву arrSource1[Y, X], результат в новом массиве arrResult. Оба массива должны иметь один размер по X.
            arrSource1_MaxRows и arrSource2_MaxRows сколько строк брать из каждого массива для объединения. 
            arrSource1_MaxRows = -1 значит все. 0 (по умолчанию) значит автоматически определить сколько строк заполенно по первому столбцу.
            Тоже самое для arrSource2_MaxRows.     
            </summary>
            <param name="arrSource1">Первый массив</param>
            <param name="arrSource2">Первый массив</param>
            <param name="arrResult">Результирующий массив</param>
            <param name="arrSource1_MaxRows">Сколько строк брать из каждого массива для объединения из массива arrSource1</param>
            <param name="arrSource2_MaxRows">Сколько строк брать из каждого массива для объединения из массива arrSource2</param>
            <returns></returns>
        </member>
        <member name="M:FBA.Arr.ArrayAdd(System.String[0:,0:],System.String[0:,0:],System.Int32)">
            <summary>
            Добавление двумерного массива arrSource[Y, X] к двумерному массиву arr[Y, X], результат в массиве arr. Оба массива должны иметь один размер по X.
            arrSource_MaxRows = -1 значит все. 0 (по умолчанию) значит автоматически определить сколько строк заполенно по первому столбцу. 
            Добавление будет происходить с первой незаполннеой строки массива, в который добавяем.
            </summary>
            <param name="arrSource">Массив, который добавляем</param>
            <param name="arr">Массив, в который добавляем</param>
            <param name="arrSource_MaxRows"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Arr.ArrayRowOffset(System.String[0:,0:],System.Int32,System.Int32,System.Int32@,System.String@)">
            <summary>
            Сдвиг содержимого двумерного массива, по вертикали, начиная со строки OffsetFirst, 
            и количество строк сколько нужно сдвинуть. Можно таким образом удалять строки, если указать OffsetRowCount меньше 0.
            Пример вызова: sys.ArrayRowOffset(Words, 3, -2, ref WordCount, out ErrorMes);     
            </summary>
            <param name="arr">Массив, в котором сдвигаем строки</param>
            <param name="offsetFirstRow">Индекс первой строки, с которой происходит сдвиг.</param>
            <param name="offsetRowCount">На сколько строк нужно сдвинуть</param>
            <param name="arrRowCount">Количество сдвигаемых строк</param>
            <param name="errorMes">Сообщение об ошибке</param>
            <returns>Если сдвиг произошёл успешно, то true</returns>
        </member>
        <member name="M:FBA.Arr.SetUniqValue(System.String[])">
            <summary>
            Найти все совпадающие строки в массиве arr и добавить к ним строку "_1", "_2" и т.д.
            Для того чтобы получились уникальные значения.
            </summary>
            <param name="arr">Массив, в котором меняем значения</param>
            <returns>Количество изменений элементов массива</returns>
        </member>
        <member name="M:FBA.Arr.CountValueInArray(System.String[],System.String,System.Int32)">
            <summary>
            Поиск количества одинаковых значений в одномерном строковом массиве, без учета регистра.
            </summary>
            <param name="arr">Массив, в котором ищем</param>
            <param name="value">Значение, которое ищем</param>
            <param name="startIndex">Начиная с какого индекса ищем.</param>
            <returns>Количество найденных значений</returns>
        </member>
        <member name="T:FBA.FormError">
            <summary>
            Форма для просмотра текста и скриншота ошибок, котоые возникают у пользователей:
            Если установлен параметр - сохранять ошибку на сервере, то при возникновении ошибки на коиенте у пользователя, на сервр отправляется текст ошибки и скриншот экрана.
            Хранится все это в табличке fbaError. Данная форма предназначена для полсмотра содержимого этой таблички.
            Здесь же есть статическая процедура SendErrorToServer, котоая и посылает текст и скриншот на сервер при возникновении ошибки у пользователя. 
            </summary>
        </member>
        <member name="M:FBA.FormError.#ctor">
            <summary>
            Конструктор. Установка MdiParent, Icon, обновление таблицы ошибок. 
            </summary>
        </member>
        <member name="M:FBA.FormError.ErrorRefresh">
            <summary>
            Обновление таблицы изображений.
            </summary>
        </member>
        <member name="M:FBA.FormError.ErrorDel">
            <summary>
            Удалить изображение. 
            </summary>
        </member>
        <member name="M:FBA.FormError.tbErrorRefresh_Click(System.Object,System.EventArgs)">
            <summary>
            Меню, все команды.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormError.ImageSave">
            <summary>
            Сохранить изображение   
            </summary>
        </member>
        <member name="M:FBA.FormError.SelectError">
            <summary>
            Показ изображения.
            </summary>
        </member>
        <member name="M:FBA.FormError.ShowError">
            <summary>
            Переключение вида просмотра изображения. 
            Либо всю картинку в окно вмещаем, либо с прокруткой
            </summary>
        </member>
        <member name="M:FBA.FormError.dgvError_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            При выборе изображения в таблице показываем его в pictureBox1.
            </summary>
        </member>
        <member name="M:FBA.FormError.cbSize_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Переключаем вид изображения. Либо всю картинку в окно вмещаем, либо с прокруткой
            </summary>
        </member>
        <member name="F:FBA.FormError.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FBA.FormError.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.FormError.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FBA.WebP">
            <summary>
            Класс для работы с изображениями в формате WEBP. Формат WEBP лучше сжимает чем JPG, поэтому используется он.
            </summary>
        </member>
        <member name="M:FBA.WebP.Save(System.Drawing.Bitmap,System.Int32,System.String)">
            <summary>Save bitmap to file in WebP format</summary>
            <param name="bmp">Bitmap with the WebP image</param>
            <param name="quality">Quality. 0 = minumin ... 100 = maximimun quality</param>
            <param name="pathFileName">The file to write</param>
            <returns>True if success; False otherwise</returns>
        </member>
        <member name="M:FBA.WebP.Load(System.String,System.Drawing.Bitmap@)">
            <summary>Read a WebP file</summary>
            <param name="pathFileName">WebP file to load</param>
            <param name="bmp">Bitmap with the WebP image</param>
            <returns>True if success; False otherwise</returns>
        </member>
        <member name="M:FBA.WebP.Decode(System.Byte[],System.Drawing.Bitmap@)">
            <summary>Decode a WebP image</summary>
            <param name="webpData">the data to uncompress</param>
            <param name="bmp">Bitmap whit the image</param>
            <returns>True if success; False otherwise</returns>
        </member>
        <member name="M:FBA.WebP.Encode(System.Drawing.Bitmap,System.Int32,System.Byte[]@)">
            <summary>Write a WebP file in minimun size</summary>
            <param name="webpData">Bitmap to encode</param>
            <param name="quality">Quality. 0 = minumin ... 100 = maximimun quality</param>
            <param name="bmp">Bitmap with the image</param>
            <returns>True if success; False otherwise</returns>
        </member>
        <member name="M:FBA.WebP.EncodeLossly(System.Drawing.Bitmap,System.Int32,System.Byte[]@)">
            <summary>Lossly encoding image in bitmap</summary>
            <param name="bmp">Bitmap with the image</param>
            <param name="quality">Quality. 0 = minumin ... 100 = maximimun quality</param>
            <param name="webpData">Compress data</param>
            <returns>True if success; False otherwise</returns>
        </member>
        <member name="M:FBA.WebP.EncodeLossless(System.Drawing.Bitmap,System.Byte[]@)">
            <summary>Lossless encoding image in bitmap</summary>
            <param name="bmp">Bitmap with the image</param>
            <param name="webpData">Compress data</param>
            <returns>True if success; False otherwise</returns>
        </member>
        <member name="M:FBA.WebP.WebPGetInfo(System.IntPtr,System.UInt32,System.Int32@,System.Int32@)">
            <summary>Validate the WebP image header and retrieve the image height and width. Pointers *width and *height can be passed NULL if deemed irrelevant</summary>
            <param name="data">Pointer to WebP image data</param>
            <param name="data_size">This is the size of the memory block pointed to by data containing the image data</param>
            <param name="width">The range is limited currently from 1 to 16383</param>
            <param name="height">The range is limited currently from 1 to 16383</param>
            <returns>1 if success, otherwise error code returned in the case of (a) formatting error(s).</returns>
        </member>
        <member name="M:FBA.WebP.WebPDecodeBGR(System.IntPtr,System.UInt32,System.Int32@,System.Int32@)">
            <summary>Decode a WebP image pointed to by data</summary>
            <param name="data">Pointer to WebP image data</param>
            <param name="data_size">This is the size of the memory block pointed to by data containing the image data</param>
            <param name="width">The range is limited currently from 1 to 16383</param>
            <param name="height">The range is limited currently from 1 to 16383</param>
            <returns>output_buffer if function succeeds; NULL otherwise</returns>
        </member>
        <member name="M:FBA.WebP.WebPDecodeBGRInto(System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>Decode WEBP image pointed to by *data and returns BGR samples into a pre-allocated buffer</summary>
            <param name="data">Pointer to WebP image data</param>
            <param name="data_size">This is the size of the memory block pointed to by data containing the image data</param>
            <param name="output_buffer">Pointer to decoded WebP image</param>
            <param name="output_buffer_size">Size of allocated buffer</param>
            <param name="output_stride">Specifies the distance between scanlines</param>
            <returns>output_buffer if function succeeds; NULL otherwise</returns>
        </member>
        <member name="M:FBA.WebP.WebPEncodeBGR(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Single,System.IntPtr@)">
            <summary>Lossless encoding images pointed to by *data in WebP format</summary>
            <param name="rgb">Pointer to RGB image data</param>
            <param name="width">The range is limited currently from 1 to 16383</param>
            <param name="height">The range is limited currently from 1 to 16383</param>
            <param name="stride">Specifies the distance between scanlines</param>
            <param name="quality_factor">Ranges from 0 (lower quality) to 100 (highest quality). Controls the loss and quality during compression</param>
            <param name="output">output_buffer with WebP image</param>
            <returns>Size of WebP Image</returns>
        </member>
        <member name="M:FBA.WebP.WebPEncodeLosslessBGR(System.IntPtr,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
            <summary>Lossless encoding images pointed to by *data in WebP format</summary>
            <param name="rgb">Pointer to RGB image data</param>
            <param name="width">The range is limited currently from 1 to 16383</param>
            <param name="height">The range is limited currently from 1 to 16383</param>
            <param name="stride">Specifies the distance between scanlines</param>       
            <param name="output">output_buffer with WebP image</param>
            <returns>Size of WebP Image</returns>
        </member>
        <member name="T:FBA.FormImport">
            Класс для импорта всех бордеро - файлов Excel, CSV. Это универсальный загрузчик.
        </member>
        <member name="M:FBA.FormImport.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.FormImport.Log(System.String)">
            Добавление в лог.
        </member>
        <member name="M:FBA.FormImport.ImportFile">
            <summary>
            Загрузка файла.
            </summary>
            <returns>Возвращает успешность или нет загрузки файла.</returns>
        </member>
        <member name="M:FBA.FormImport.BeginOfLoad">
            <summary>
            Действия, которые нужно совершить перед загрузкой CSV или Excel.
            </summary>
        </member>
        <member name="M:FBA.FormImport.EndOfLoad(System.DateTime)">
            <summary>
            Действия, которые нужно совершить после загрузкой CSV или Excel.
            </summary>
            <param name="DateTime1"></param>
        </member>
        <member name="M:FBA.FormImport.LoadCSV(System.String)">
            <summary>
            Загрузка из CSV.
            </summary>
            <param name="FileName">Имя файла с полным путем к CSV файлу</param>
        </member>
        <member name="M:FBA.FormImport.LoadXLSX(System.String)">
            <summary>
            Загрузка из XSLX.  
            </summary>
            <param name="FileName">Имя файла с полным путем к XLSX файлу</param>
        </member>
        <member name="M:FBA.FormImport.CheckImport(System.Data.DataTable,System.String)">
            <summary>
            Проверка по всем условиям входящей загруженной DataTable - DT.
            </summary>
            <param name="dt"></param>
            <param name="importType"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormImport.CheckColumns(System.String@)">
            <summary>
            Проверка наличия колонок.
            </summary>
            <param name="errorMes">Список найденных ошибки</param>
            <returns>Если ошибок нет, то результат true</returns>
        </member>
        <member name="M:FBA.FormImport.GetParam(System.String,System.String@)">
            <summary>
            Получаем параметр. Он может быть в любой строке настроечной таблицы fbaImport, поэтому поиск повсем строкам.
            </summary>
            <param name="columnName">Имя колонки в настроечной таблице, в которой ищем значение</param>
            <param name="param">Значение параметра. Если не найдено, то пустая строка.</param>
            <returns>Если что-то найдено, то true</returns>
        </member>
        <member name="M:FBA.FormImport.CheckRows(System.String@)">
            <summary>
            Проверка на количество строк в загружаемом файле, максимальное и минимальное.
            </summary>
            <param name="errorMes">Список найденных ошибки</param>
            <returns>Если ошибок нет, то результат true</returns>
        </member>
        <member name="M:FBA.FormImport.CheckFormatColumns(System.String@)">
            <summary>
            Проверка формата колонок.
            </summary>
            <param name="errorMes">Список найденных ошибки</param>
            <returns>Если ошибок нет, то результат true</returns>
        </member>
        <member name="M:FBA.FormImport.CheckFormatValue(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.TimeSpan,System.TimeSpan,System.String,System.String,System.String,System.String@)">
            <summary>
            Проверка формата значения в ячейке таблицы.
            </summary>
            <param name="сolumnType">Тип колонки</param>
            <param name="columnFormat">Детальная информация по формату колонки</param>
            <param name="defaultValue"></param>
            <param name="tryParse"></param>
            <param name="setValue"></param>
            <param name="setCharCase"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="minValueDate"></param>
            <param name="maxValueDate"></param>
            <param name="minValueTime"></param>
            <param name="maxValueTime"></param>
            <param name="deleteChars"></param>
            <param name="leaveChars"></param>
            <param name="value">Проверяемое значение</param>
            <param name="newvalue"></param>
            <returns>Если ошибок нет, то возвращается пустая строка</returns>
        </member>
        <member name="F:FBA.FormImport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FBA.FormImport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.FormImport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FBA.FormMethod">
            <summary>
            Description of FormMethod.
            </summary>
        </member>
        <member name="M:FBA.FormMethod.#ctor">
            <summary>
            Конструктор. Установка MdiParent, Icon, обновление таблицы методов.
            </summary>
        </member>
        <member name="M:FBA.FormMethod.MethodRefresh">
            Показ методов.
        </member>
        <member name="M:FBA.FormMethod.MethodAddOrEdit(FBA.Operation,System.String)">
            Добавить метод.
        </member>
        <member name="M:FBA.FormMethod.MethodDel(System.String)">
            Удалить метод.
        </member>
        <member name="M:FBA.FormMethod.DgvMethodDoubleClick(System.Object,System.EventArgs)">
            При выборе текста в таблице показываем его. 
        </member>
        <member name="F:FBA.FormMethod.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:FBA.FormMethod.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.FormMethod.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:FBA.FormReport">
            Запись и чтение шаблонов отчетов в/из БД.    
        </member>
        <member name="M:FBA.FormReport.#ctor">
            <summary>
            Конструктор. Установка MdiParent, Icon, обновление таблицы отчётов.
            </summary>
        </member>
        <member name="M:FBA.FormReport.ReportRefresh">
            Обновление таблицы шаблонов отчетов.
        </member>
        <member name="M:FBA.FormReport.ReportAdd">
            Добавить шаблон отчета.  
        </member>
        <member name="M:FBA.FormReport.ReportEdit">
            Добавить шаблон отчета.  
        </member>
        <member name="M:FBA.FormReport.ReportDel">
            Удалить шаблон отчета.  
        </member>
        <member name="M:FBA.FormReport.SelectReport">
            Показ шаблона отчета.
        </member>
        <member name="M:FBA.FormReport.tbRefresh_Click_1(System.Object,System.EventArgs)">
            Меню, все команды.
        </member>
        <member name="F:FBA.FormReport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FBA.FormReport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.FormReport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FBA.FormAbout">
            <summary>
            Форма о программе.
            </summary>
        </member>
        <member name="T:FBA.FormSim">
            <summary>
            Упрощенный вариант формы.
            </summary>
        </member>
        <member name="M:FBA.FormSim.#ctor">
            Конструктор.
        </member>
        <member name="M:FBA.FormAbout.#ctor">
            <summary>
            Форма о программе.
            </summary>
        </member>
        <member name="M:FBA.FormAbout.BtnOkClick(System.Object,System.EventArgs)">
            <summary>
            Событие. Закрытие формы.	
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormAbout.BtnDeleteDLLClick(System.Object,System.EventArgs)">
            <summary>
            Событие. Удаление файлов кэша.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:FBA.FormAbout.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:FBA.FormAbout.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FBA.FormAbout.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:FBA.FormAttr">
            Форма добавления и редактирования атрибута сущности.
        </member>
        <member name="F:FBA.FormAttr.StatusClose">
            <summary>
            Результат закрытия формы
            </summary>
        </member>
        <member name="F:FBA.FormAttr.operation">
            <summary>
            Операция Operation: NotAssigned, Refresh, Add, AddChild, Edit, Del 
            </summary>	    
        </member>
        <member name="F:FBA.FormAttr.EntityID">
            <summary>
            ИД сущности
            </summary>
        </member>
        <member name="F:FBA.FormAttr.ObjID">
            <summary>
            ИД объекта
            </summary>
        </member>
        <member name="F:FBA.FormAttr.ObjBrief">
            <summary>
            Сокращение объекта
            </summary>
        </member>
        <member name="F:FBA.FormAttr.ObjName">
            <summary>
            Имя объекта
            </summary>
        </member>
        <member name="F:FBA.FormAttr.Obj">
            <summary>
            FBA.ObjectRef
            </summary>
        </member>
        <member name="M:FBA.FormAttr.#ctor(FBA.Operation,System.String,System.String,System.String,System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="operation">Операция Operation: NotAssigned, Refresh, Add, AddChild, Edit, Del</param>
            <param name="EntityID">ИД сущности</param>
            <param name="ObjID"></param>
            <param name="ObjBrief"></param>
            <param name="ObjName"></param>
        </member>
        <member name="M:FBA.FormAttr.GetListAvalibleTables">
            Присвоить tbTable список таблиц для выбора из БД.
        </member>
        <member name="M:FBA.FormAttr.GetListAvalibleFields(System.String)">
            Присвоить tbField1 список полей таблицы TableName.
        </member>
        <member name="M:FBA.FormAttr.GetListLinkTo">
            Присвоить tbLinkToStr список сущностей для выбора.
        </member>
        <member name="M:FBA.FormAttr.GetListtbAttrLink(System.String)">
            Присвоить tbAttrLinkStr список атрибутов для выбора.
        </member>
        <member name="M:FBA.FormAttr.FillData">
            Заполнение свойств компонентов значениями.
        </member>
        <member name="M:FBA.FormAttr.SetValuesBeforeWrite">
            Перед записью в базу очищаем значения компонентов, чтобы не записать в базу лишнее.
        </member>
        <member name="M:FBA.FormAttr.ObjectWrite">
            Запись в базу изменений.
        </member>
        <member name="M:FBA.FormAttr.BtnCancel_Click(System.Object,System.EventArgs)">
            Кнопка Cancel.
        </member>
        <member name="M:FBA.FormAttr.AttrObjectWrite">
            Запись объекта.
        </member>
        <member name="M:FBA.FormAttr.BtnOkClick(System.Object,System.EventArgs)">
            Кнопка Ok.
        </member>
        <member name="M:FBA.FormAttr.CheckDeleteAttr">
            Проверка возможности удаления атрибута.
        </member>
        <member name="M:FBA.FormAttr.OperationDelete">
            Удаление атрибута.
        </member>
        <member name="M:FBA.FormAttr.TbLinkToStr_SelectedIndexChanged(System.Object,System.EventArgs)">
            Событие выбора ссылки на сущность. 
        </member>
        <member name="M:FBA.FormAttr.TbTable_SelectedIndexChanged(System.Object,System.EventArgs)">
            Событие выбора таблицы.
        </member>
        <member name="M:FBA.FormAttr.TbTypeStr_SelectedIndexChanged(System.Object,System.EventArgs)">
            Поле tbField2 доступно только в том случае, если у нас Массив связанных объектов.      
        </member>
        <member name="M:FBA.FormAttr.FormAttr_Shown(System.Object,System.EventArgs)">
            Интересно, если повесить FillData на конструктор, то текст (свойство текст) в 
            комбобоксах переписывается почему-то.. а на Shown нет.
        </member>
        <member name="M:FBA.FormAttr.CmMenuItem_Click(System.Object,System.EventArgs)">
            Контекстное меню с пунктом Clear.
        </member>
        <member name="M:FBA.FormAttr.EnableDisable">
            Доступность компонентов.        
        </member>
        <member name="M:FBA.FormAttr.ForeignKey(System.String@)">
            Создание внешнего ключа.
        </member>
        <member name="M:FBA.FormAttr.TbBrief_Enter(System.Object,System.EventArgs)">
            Если поле пустое, а наименование заполнено, то создаем сокращение.
        </member>
        <member name="M:FBA.FormAttr.TbField1DropDown(System.Object,System.EventArgs)">
            раскрываем список доступных полей при ыраскрытии выпадающего списка.
        </member>
        <member name="F:FBA.FormAttr.tbCode">
            <summary>
            tbCode
            </summary>
        </member>
        <member name="M:FBA.FormAttr.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormConList">
            <summary>
            Форма для создания подключения к БД или серверу приложений.
            </summary>
        </member>
        <member name="F:FBA.FormConList.SelectConnectionName">
            <summary>
            Имя выбранного подключения
            </summary>
        </member>
        <member name="M:FBA.FormConList.#ctor">
            <summary>
            Список подключений к базе данных и серверам приложений
            </summary>
        </member>
        <member name="M:FBA.FormConList.BtnOkClick(System.Object,System.EventArgs)">
            Закрытие формы.
        </member>
        <member name="M:FBA.FormConList.ConnectionListRefresh">
            Обновление списка подключений в гриде.		
        </member>
        <member name="M:FBA.FormConList.BtnAddClick(System.Object,System.EventArgs)">
            Событие. Кнопка добавления подключения.
        </member>
        <member name="M:FBA.FormConList.ConnectionAdd">
            Добавление подключения.
        </member>
        <member name="M:FBA.FormConList.BtnConnectionTestClick(System.Object,System.EventArgs)">
            Тест подключения.
        </member>
        <member name="M:FBA.FormConList.BtnDelClick(System.Object,System.EventArgs)">
            <summary>
            Удаление подключения.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormConList.BtnExampleClick(System.Object,System.EventArgs)">
            Пример значений полей ввода для подключения.
        </member>
        <member name="M:FBA.FormConList.UpdateFormText">
            При навигации по таблице списку подключений показываем значения параметров.
        </member>
        <member name="M:FBA.FormConList.DgvConnectionListSelectionChanged(System.Object,System.EventArgs)">
            При навигации по таблице списку подключений показываем значения параметров.
        </member>
        <member name="M:FBA.FormConList.BtnSaveClick(System.Object,System.EventArgs)">
            Сохранение текущего подключения.
        </member>
        <member name="M:FBA.FormConList.CbTypeSelectedIndexChanged(System.Object,System.EventArgs)">
            Выбор типа подключения из выпадающего списка.
        </member>
        <member name="M:FBA.FormConList.EnableOrDisable">
            Доступные или недоступны компоненты.
        </member>
        <member name="M:FBA.FormConList.CbWindowsLogin_CheckedChanged(System.Object,System.EventArgs)">
            Галка - Windows авторизация.
        </member>
        <member name="M:FBA.FormConList.dgvConnectionList_DoubleClick(System.Object,System.EventArgs)">
            Закрытие формы по двойному клику на таблице подключений.
        </member>
        <member name="M:FBA.FormConList.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormDDL">
            <summary>
            Форма операция со скриптами создания таблиц
            </summary>
        </member>
        <member name="M:FBA.FormDDL.#ctor">
            <summary>
            Форма операция со скриптами создания таблиц
            </summary>
        </member>
        <member name="M:FBA.FormDDL.LoadAll">
            Загрузить все.
        </member>
        <member name="M:FBA.FormDDL.SaveAll">
            Сохранить все.
        </member>
        <member name="M:FBA.FormDDL.ConvertToPostgre">
            Конвертация скрипта SQL создания базы данных из кода SQLite в код Postgre.
        </member>
        <member name="M:FBA.FormDDL.ConvertToMSSQL">
            Конвертация скрипта SQL создания базы данных из кода SQLite в код Postgre.
        </member>
        <member name="M:FBA.FormDDL.ExecuteScript(FastColoredTextBoxNS.FastColoredTextBox,FBA.Connection)">
            Выполнить скрипт SQLite или Postgres.
        </member>
        <member name="M:FBA.FormDDL.CreateTables">
            Создание необходимых таблиц для работы Дизайнера и клиента в базе данных.
        </member>
        <member name="M:FBA.FormDDL.CopyTableToLocal(System.Data.DataTable,System.String,System.String@,System.Int32@)">
            Скопировать таблицу из локальной базы на сервер.
        </member>
        <member name="M:FBA.FormDDL.CopyTableToRemoteServer(System.Boolean)">
            Копирование таблиц на удаленный сервер.
        </member>
        <member name="M:FBA.FormDDL.cmMenuN_1_Click(System.Object,System.EventArgs)">
            Создание таблиц для парсера.
        </member>
        <member name="M:FBA.FormDDL.cmMenuN_2_Click(System.Object,System.EventArgs)">
            Копирование таблиц парсера из локальной БД на на удаленную БД.
        </member>
        <member name="M:FBA.FormDDL.cmMenuN_3_Click(System.Object,System.EventArgs)">
            Копирование ВСЕХ таблиц с локальной БД на на удаленную БД.
        </member>
        <member name="M:FBA.FormDDL.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:FBA.FormDDL.tbTextMSSQL">
            <summary>
            tbTextMSSQL
            </summary>
        </member>
        <member name="F:FBA.FormDDL.tbTextPostgre">
            <summary>
            tbTextPostgre
            </summary>
        </member>
        <member name="F:FBA.FormDDL.tbTextSQLite">
            <summary>
            tbTextSQLite
            </summary>
        </member>
        <member name="T:FBA.FormDirectory">
            <summary>
            Форма справочника. Не привязана к какой-то определённой сущности.
            </summary>
        </member>
        <member name="F:FBA.FormDirectory.Filter">
            <summary>
            Фильтр. Внутри этого объекта все даные фильтра.
            </summary>
        </member>
        <member name="F:FBA.FormDirectory.FSearch">
            <summary>
            Форма поиска.
            </summary>
        </member>
        <member name="F:FBA.FormDirectory.ListParams">
            <summary>
            Параметры открытия формы справочника. Описаны в DirectoryParams.
            </summary>
        </member>
        <member name="F:FBA.FormDirectory.FilterSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:FBA.FormDirectory.WasSetHistorySearch">
            <summary>
            Переменная, чтобы определить что при получени фокуса ввода компонентом cbFastSearch
            больше не нужно читать историю поиска, она уже была прочитана ранее.
            </summary>
        </member>
        <member name="M:FBA.FormDirectory.#ctor">
            <summary>
            Конструктор. Установка MdiParent. 
            </summary>      
        </member>
        <member name="M:FBA.FormDirectory.#ctor(System.String,FBA.DirectoryParams@)">
            <summary>
            Конструктор. 
            </summary>
            <param name="caption">Заголовок формы справочника</param>
            <param name="dirparams">Параметры открытия справочника. Тип DirectoryParams.</param>
        </member>
        <member name="M:FBA.FormDirectory.FillArraySelected(System.Int32)">
            Заполнение массива ArraySelectedID ИДОбъектам выбранных записей.
        </member>
        <member name="M:FBA.FormDirectory.RefreshGridForm(FBA.DirectionQuery,FBA.GridFBA,FBA.FilterObj)">
            Показ таблицы.
        </member>
        <member name="M:FBA.FormDirectory.SetSelectionMode(SourceGrid.GridSelectionMode)">
            Установка SetSelectionMode
        </member>
        <member name="M:FBA.FormDirectory.Action(FBA.FormDirectory.CommandType)">
            Вместо button1.PerformClick();
        </member>
        <member name="M:FBA.FormDirectory.SourceGridSelectAll(FBA.GridFBA)">
            <summary>
            Расширить выделенный диапазон на все столбцы. Выделяет все столбцы выбранного диапазона строк.
            т.е. если выбрана одна колонка из строки, то выделяет все колонки строк. 
            </summary>
            <param name="sg">FBA.GridFBA</param>
        </member>
        <member name="M:FBA.FormDirectory.SourceGridSelectRows(FBA.GridFBA)">
            <summary>
            Расширить выделенный диапазон на все столбцы.
            </summary>
            <param name="sg">FBA.GridFBA</param>
        </member>
        <member name="M:FBA.FormDirectory.SourceGridSelectColumns(FBA.GridFBA)">
            <summary>
            Расширить выделенный диапазон на все столбцы.
            </summary>
            <param name="sg">FBA.GridFBA</param>
        </member>
        <member name="M:FBA.FormDirectory.Tb_N1_Click(System.Object,System.EventArgs)">
            <summary>
            Все кнопки.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormDirectory.FormDirectory_Load(System.Object,System.EventArgs)">
            <summary>
            При загрузке формы.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormDirectory.EditObject(System.String)">
            <summary>
            Если форма свойств объекта не указана, то по двойному клику закрываем форму справочника.
            Закрываем форму - это когда нужен выбор объекта из справочника.
            Иначе показываем форму свойств выбранного объекта.
            </summary>
            <param name="id">ИД Объекта, форму свойств которого показываем</param>
        </member>
        <member name="M:FBA.FormDirectory.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Перехват нажатий кнопок, когда форма в фокусе.
            </summary>
            <param name="msg">Сообщение операционной системы о нажатых клавишах</param>
            <param name="keyData">Нажатые клавиши</param>
            <returns>return false; означает разрешение дальнейшей обработки нажатой клавиши.</returns>
        </member>
        <member name="M:FBA.FormDirectory.FastSearch">
            <summary>
            Метод. Быстрый поиск. 
            </summary>
        </member>
        <member name="M:FBA.FormDirectory.btnFastSearch_Click(System.Object,System.EventArgs)">
            <summary>
            Кнопка. Быстрый поиск.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormDirectory.cbFastSearch_Enter(System.Object,System.EventArgs)">
            <summary>
            Получение фокуса ввода 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormDirectory.deleteHistoryToolStripMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            Удалить историю поиска
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormDirectory.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormDirectory.CommandType">
            <summary>
            Все возможные команды.
            </summary>
        </member>
        <member name="T:FBA.FormDirectory.CellClickEvent">
            <summary>
            Перехват двойного клика на гриде.
            </summary>
        </member>
        <member name="T:FBA.ShowMode">
            <summary>    
            Если NotAssigned - форма поднимается, но все пусто и фильтр нужно нажимать самостоятельно. (Не рекомендуется для использования)
            Если Filter      - форма поднимается, но сразу показывается фильтр. (Рекомендуется) 
            Если ExecMSQL    - форма поднимается, фильтр не показывается, но сразу применяется и выполняется запрос MSQL. (Рекомендуется для небольших справочников)
            Если ExecSQL     - форма поднимается, фильтр не показывается, но сразу применяется и выполняется запрос SQL. (Рекомендуется для небольших справочников)	
            </summary>
        </member>
        <member name="F:FBA.ShowMode.Filter">
            <summary>
            Показаьт фильтр
            </summary>
        </member>
        <member name="F:FBA.ShowMode.ExecMSQL">
            <summary>
            Выполнить код MSQL без показа фильтра
            </summary>
        </member>
        <member name="F:FBA.ShowMode.ExecSQL">
            <summary>
            Выполнить код SQL без показа фильтра
            </summary>
        </member>
        <member name="T:FBA.DirectoryParams">
            Класс для передачи всего фильтра в вызывающую форму.
        </member>
        <member name="F:FBA.DirectoryParams.EntityBrief">
            <summary>
            Сокращение сущности, которую показываем.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ObjectID">
            <summary>
            ИДОбъекта на который нужно спозиционировать курсор, если объект есть в таблице.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.Multiselect">
            <summary>
            Множественный выбор строк.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ButtonFilter">
            <summary>
            Кнопка фильтра.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ButtonRefresh">
            <summary>
            Кнопка Refresh.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ButtonAdd">
            <summary>
            Кнопка Add.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ButtonEdit">
            <summary>
            Кнопка Edit.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ButtonDelete">
            <summary>
            Кнопка Delete.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ButtonSearch">
            <summary>
            Кнопка Search.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.FormName">
            <summary>
            Форма свойств выбранного объекта
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.FormProject">
            <summary>
            Проекта в котором находится форма свойств объекта.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.showMode">
            <summary>
            Способ показа формы (см. выше)
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.OuterWHERE">
            <summary>
            Внешний фильтр на MSQL
            </summary>                
        </member>
        <member name="F:FBA.DirectoryParams.СustomMSQLQuery">
            <summary>
            Произвольный запрос на MSQL.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.СustomSQLQuery">
            <summary>
            Произвольный запрос на SQL
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ReturnAttrBrief">
            <summary>
            Сокращение Атрибута,значение которого нужно вернуть, если форма справочника поднимается для выбора объекта
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.DoubleClickReturn">
            <summary>
            Если true, то при двойном клике форма закрывается  и происходит выбор объекта 
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ReturnArraySelectedID">
            <summary>
            Воззврат списка выбранных объектов
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ReturnSelectedRowsCount">
            <summary>
            Количество выбранных объектов
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ReturnObjectID">
            <summary>
            ИД первого выбранного объекта
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ReturnAttrValue">
            <summary>
            Атрибут, который нужно вернуть из таблицы
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ListObjectID">
            <summary>
            Список ИДОбъектов которые должны попасть в выборку.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.ColumnWidth">
            <summary>
            Массив всех размеров по ширине колонок. Далее этот массив применяется к гриду.
            </summary>
        </member>
        <member name="F:FBA.DirectoryParams.CloseAfterSelect">
            <summary>
            Закрывать форму после выбора объекта
            </summary>
        </member>
        <member name="T:FBA.FormEnter">
            <summary>
            /Форма входа в систему. Также возможна авторизация через командную строку.
            </summary>
        </member>
        <member name="F:FBA.FormEnter.StatusClose">
            <summary>
            Статус закрытия формы входа.
            </summary>
        </member>
        <member name="F:FBA.FormEnter.CloseDefault">
            <summary>
            Если стоит true, то при закрыти формы входа закрываем ВСЮ ПРОГРАММУ, если не авторизовались.	
            </summary>
        </member>
        <member name="M:FBA.FormEnter.#ctor(System.Boolean)">
            <summary>
            Конструктор	
            </summary>
            <param name="CloseDefault"></param>
        </member>
        <member name="M:FBA.FormEnter.ConnectionListRefresh">
            <summary>
            Из локальной базы загружаем список настроек соединения.	 
            </summary>
        </member>
        <member name="M:FBA.FormEnter.BtnOkClick(System.Object,System.EventArgs)">
            <summary>
            Кнопки Ok и Cancel.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEnter.EnterSystem">
            <summary>
            Вход в систему.
            </summary>
            <returns>Если вход успешный, то true</returns>
        </member>
        <member name="M:FBA.FormEnter.CbConnectionListCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Показ формы редактирования списка подключений. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEnter.CbConnectionSelectedIndexChanged(System.Object,System.EventArgs)">
            Выбор подключения из выпадающего CompboBox.
        </member>
        <member name="M:FBA.FormEnter.FormEnterFormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Если пользователь нажал крестик на форме входа, то закрываем всю программу.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEnter.Timer1Tick(System.Object,System.EventArgs)">
            Подсвечиваем CapsLock.
        </member>
        <member name="M:FBA.FormEnter.FormEnter_Shown(System.Object,System.EventArgs)">
            <summary>
            Используется при разработке.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEnter.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormEntity">
            <summary>
            Форма для просмотра и изменений свойств сущности.
            </summary>
        </member>
        <member name="F:FBA.FormEntity.StatusClose">
            <summary>
            Статус закрытия формы входа.
            </summary>
        </member>
        <member name="M:FBA.FormEntity.#ctor(FBA.Operation,System.String,System.String)">
            <summary>
            Конструктор формы.
            </summary>
            <param name="operation">Операция с сущностью. NotAssigned, Refresh, Add, AddChild, Edit, Del</param>
            <param name="id">ИД сущности</param>
            <param name="parentId">ИД родителя сущности</param>
        </member>
        <member name="M:FBA.FormEntity.FillData">
            <summary>
            Заполнение свойств компонентов значениями.
            </summary>
        </member>
        <member name="M:FBA.FormEntity.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Кнопка Cancel.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEntity.BtnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Кнопка Ok.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEntity.OperationDelete">
            <summary>
            Удаление сущности
            </summary>
            <returns>Если true, то сущность удалена успешно.</returns>
        </member>
        <member name="M:FBA.FormEntity.cbSystem_CheckedChanged(System.Object,System.EventArgs)">
             <summary>
            Изменение галок Feature. 
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:FBA.FormEntity.SetFeature">
            <summary>
            Установка свойств атрибута.
            </summary>
        </member>
        <member name="M:FBA.FormEntity.TbBrief_Enter(System.Object,System.EventArgs)">
            <summary>
            Установка фокуса на компонент tbBrief. Если не заполнено, то заполяем из наименования.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormEntity.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormFilter">
            <summary>
            Форма фильтра универсальная. Для всех сущностей.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.FilterCustomCount">
            <summary>
            Количество полосок Custom фильтров которые были добавлены, без учета их удаления.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.FilterCustomCountPnl">
            <summary>
            Реальное количество полосок Custom фильтров.
            </summary>        
        </member>
        <member name="F:FBA.FormFilter.ResultClose">
            <summary>
            Результат закрытия формы.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.ProcessCompAdd">
            <summary>
            Для ускорения работы, чтобы не срабатывали события в процессе создания компонентов полоски фильтра.    
            </summary>
        </member>
        <member name="F:FBA.FormFilter.PanelStatic">
            <summary>
            Панель Static фильтра на которой содержатся все компоненты.
            </summary>      
        </member>
        <member name="F:FBA.FormFilter.FormRef">
            <summary>
            Сcылка на форму, которая вызвала этот фильтр.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.FormStaticFilter">
            <summary>
            Ссылка на форму со статическим фильтром.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.MethodFilterStatic">
            <summary>
            Ссылка на метод, собирающий Static фильтр.   
            </summary>
        </member>
        <member name="F:FBA.FormFilter.filter">
            <summary>
            Объект аккумулирует все значения фильтра.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.DoEnableDisable">
            <summary>
            Переменная чтобы отличить программный вызов метода на CheckBoxClick, от клика пользователя.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.FilterStaticSet">
            <summary>
            Признак загрузки Static фильтра на форму.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.FilterCustomSet">
            <summary>
            Признак загрузки Custom  фильтра на форму.
            </summary>
        </member>
        <member name="F:FBA.FormFilter.FilterUniversalSet">
            <summary>
            Признак загрузки Universal  фильтра на форму.               
            </summary>
        </member>
        <member name="F:FBA.FormFilter.AttrWasSet">
            <summary>
            /Признак что таблица Attr была загружена из filter и её нужно пересобрать.
            </summary>
        </member>
        <member name="M:FBA.FormFilter.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:FBA.FormFilter.Filter(System.Object,System.String,System.Int32,System.Int32,FBA.FilterObj@,System.String)">
            <summary>
            Показ фильтра: 
            FilterObj filter = new FilterObj();
            FormFilter.Filter(this, "ДогСтрах", "FormFilt", ref filter);        
            Это главный метод (СТАТИЧЕСКИЙ!), который показывает фильтр.  
            </summary>
            <param name="formRef">Ссылка на вызывающую этот фильтр форму. Обычно это форма справочника</param>
            <param name="entityBrief">Сокращение сущности</param>
            <param name="gridLeft">Чтобы высчитать координаты появления формы фильтра на экране относительно грида.</param>
            <param name="gridTop">Чтобы высчитать координаты появления формы фильтра на экране относительно грида.</param>
            <param name="filter">Объект фильтра. Все настройки фильтра в нём</param>
            <param name="outerWHERE">Дополнительное условие WHERE, которые передается вызывающим кодом</param>
            <returns>Если фильтр применяется, то true</returns>
        </member>
        <member name="M:FBA.FormFilter.AddObjectIDColumn">
            <summary>
            По умолчанию добавляем сразу один первый столбец - ИДОбъекта.
            </summary>
        </member>
        <member name="M:FBA.FormFilter.FilterLoad">
            <summary>
            Восстановление всего фильтра из БД.
            </summary>
            <returns>Если фильтр успешно загружен,то true</returns>
        </member>
        <member name="M:FBA.FormFilter.DgvList_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Показать форму выбранного фильтра.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.EnableOrDisableFilter">
            <summary>
            Включить-выключить фильтр.
            </summary>
        </member>
        <member name="M:FBA.FormFilter.ImageTabSet">
            <summary>
            Это значек, отмечает выбранный фильтра (не выбранную вкладку, а выбранный фильтр)
            </summary>
        </member>
        <member name="M:FBA.FormFilter.TabSet(System.Int32)">
            <summary>
            Установка соотвтетсвующей вкладки. Это не установка фильтра, а лишь переключение вкладки для просмотра.  
            </summary>
            <param name="indexTab">Индекс вкладки</param>
        </member>
        <member name="M:FBA.FormFilter.FilterSet(System.Int32)">
            <summary>
            Заполнение компонентов фильтром.
            </summary>
            <param name="indexTab">Индекс вкладки</param>
        </member>
        <member name="M:FBA.FormFilter.GetExample(System.Int32)">
            <summary>
            Шаблоны выражений WHERE.
            </summary>
            <param name="indexExample">Номер запроса для спрвки</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormFilter.CbExampleSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Выбор шаблона выражения WHERE.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.CbUniversalWordWrap_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Галка WordWrap для универсального фильтра.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.CbCustomCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Общее событие для CheckBox включения/отключения фильтров: Static, Custom, Universal.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.BtnStaticSet_Click(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Все кнопки.
            Используем MouseDown чтобы чуть быстрее чем Click для пользователя срабатывало событие.
            Общее событие для кнопок переключения вкладок. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.CmFilterListN1_Click(System.Object,System.EventArgs)">
            <summary>
            Все кнопки.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.BtnOkClick(System.Object,System.EventArgs)">
            <summary>
            Все кнопки.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.FilterStaticClear(System.Windows.Forms.Control.ControlCollection)">
            Очистка статического фильтра.
        </member>
        <member name="M:FBA.FormFilter.FilterStaticGetWHERE">
            <summary>
            Вызываем метод, собирающий Static фильтр.
            </summary>
            <returns>Строка WHERe Static фильтра</returns>
        </member>
        <member name="M:FBA.FormFilter.FilterCustomEnabledLine(System.String,System.Boolean)">
            <summary>
            Включить-выключить полоску фильтра.
            </summary>
            <param name="numLine">Номер строки фильтра Custom. </param>
            <param name="check">Включить или отключить полоску Custom фильтра</param>
        </member>
        <member name="M:FBA.FormFilter.FilterCustomEnabled(System.Object,System.EventArgs)">
            <summary>
            Событие для CheckBox на полоске фильтра. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormFilter.FilterCustomInputAttr(System.Object,System.Windows.Forms.MouseEventArgs)">
            Вставка атрибута в полоску Custom фильтра.
        </member>
        <member name="M:FBA.FormFilter.FilterCustomDelete(System.Object,System.EventArgs)">
            Удаление полоски фильтра.
        </member>
        <member name="M:FBA.FormFilter.FilterCustomGetWHERE">
            Собрать Custom фильтр, в MSQL WHERE.
        </member>
        <member name="M:FBA.FormFilter.FilterCustomAdd(System.String,System.String,System.String,System.String,System.String)">
            Добавление нового фильтра.
        </member>
        <member name="M:FBA.FormFilter.FilterCustomToString">
            Собрать Custom фильтр в строку.
        </member>
        <member name="M:FBA.FormFilter.FilterCustomRestore(System.String)">
            Восстановить Custom фильтр из строки.
        </member>
        <member name="M:FBA.FormFilter.CbFilterCustomConditionTextChanged(System.Object,System.EventArgs)">
            Если NULL или NOT NULL, то компонент для ввода значения недоступен.        
        </member>
        <member name="M:FBA.FormFilter.PanelFilterCustomResize(System.Object,System.EventArgs)">
            Изменение размеров панели на которой лежат все полоски Custom фильтра.
        </member>
        <member name="M:FBA.FormFilter.Timer1_Tick(System.Object,System.EventArgs)">
            Изменение размеров панели на которой лежат все полоски Custom фильтра.
        </member>
        <member name="M:FBA.FormFilter.GetAttrName(System.String,System.String)">
            Сформировать имя атрибута для запроса. Например, если уже есть в списке имен имя 'Номер договора'
            то тогда этот метод вернёт "Номер договора_1".
        </member>
        <member name="M:FBA.FormFilter.AttrAdd(System.Int32)">
            Добавление атрибута в гибкую таблицу.
        </member>
        <member name="M:FBA.FormFilter.AttrProperties(System.Int32)">
            Свойста атрибута.
        </member>
        <member name="M:FBA.FormFilter.AttrGetString">
            Список выбранных атрибутов преобразовать в строку для сохранения в таблицу в БД.  
        </member>
        <member name="M:FBA.FormFilter.AttrSetString(System.String)">
            Из строки восстановить строки и столбцы dgvAttr.
        </member>
        <member name="M:FBA.FormFilter.AttrGetSelect">
            Получить список выбранных атрибутов в виде SELECT...
        </member>
        <member name="M:FBA.FormFilter.AttrGetOrder">
            Получить список выбранных атрибутов в виде SELECT...
        </member>
        <member name="M:FBA.FormFilter.DgvAttr_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            Перемещение выбранных атрибутов таблице Вверх-Вниз клавишами курсора и стралками Вверх-Вниз.
        </member>
        <member name="M:FBA.FormFilter.DgvAttr_DoubleClick(System.Object,System.EventArgs)">
            Двойной клик - свойства атрибута.
        </member>
        <member name="M:FBA.FormFilter.BtnAttrAdd_Click(System.Object,System.EventArgs)">
            Все кнопки таблицы выбранных атрибутов.
        </member>
        <member name="M:FBA.FormFilter.AttrAddColumns">
            Если произошла ошибка при чтении атрибутов, то столбы удаляются. Поэтому нужно их добавить снова.
        </member>
        <member name="M:FBA.FormFilter.GetFullQueryMSQL">
            Собрать весь фильтр в один запрос. Сборка MSQL.
        </member>
        <member name="M:FBA.FormFilter.GetColumnWidth">
            Получить массив ширины колонок.
        </member>
        <member name="M:FBA.FormFilter.FilterGetString">
            Сохранение всего фильтра в БД.
        </member>
        <member name="M:FBA.FormFilter.CheckFilterBeforeSaveFilter">
            Проверка перед записью фильтра.
        </member>
        <member name="M:FBA.FormFilter.FilterSave(FBA.FilterObj@,System.Boolean)">
            Это СТАТИЧЕСКИЙ! метод для cохранения фильтра. 
            Статический он потому, чтобы можно было его вызвать 
            не создавая объект-форму фильтра из справочника при закрытии формы справочника.
        </member>
        <member name="M:FBA.FormFilter.FilterRead(FBA.FilterObj@,System.Boolean)">
            Это СТАТИЧЕСКИЙ! метод. Статический он потому, чтобы можно было его вызвать не создавая объект-форму фильтра.
            Для чтения из БД фильтра.
        </member>
        <member name="M:FBA.FormFilter.FilterNew">
            Создать новый фильтр.
        </member>
        <member name="M:FBA.FormFilter.FilterListRefresh(System.String)">
            Загрузка списка фильтров.
        </member>
        <member name="M:FBA.FormFilter.FilterGlobalSet(System.String,System.Boolean)">
            Установить для фильтра признак Global.
        </member>
        <member name="M:FBA.FormFilter.FilterDelete(System.String,System.Int32)">
            Удалить фильтр.
        </member>
        <member name="M:FBA.FormFilter.FilterCopy(System.String,System.String,System.Int32)">
            Копировать фильтр другим пользователям.
        </member>
        <member name="M:FBA.FormFilter.FilterCopyToUser(System.String,System.String,System.String,System.String)">
            Копировать фильтр другому пользователю.
        </member>
        <member name="M:FBA.FormFilter.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FilterObj">
            <summary>
            Класс для передачи всего фильтра в вызывающую форму.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FilterID">
            <summary>
            ИД фильтра. Каждый фильтр храниться в базе данных. Это ИД записи в таблице fbaFilter.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.EntityBrief">
            <summary>
            Сокращение сущности, к которой применяется фильтр
            </summary>
        </member>
        <member name="F:FBA.FilterObj.EntityID">
            <summary>
            ИД сущности, к которой применяется фильтр
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FilterGlobal">
            <summary>
            Глобальный или пользовательский фильтр
            </summary>
        </member>
        <member name="F:FBA.FilterObj.Name">
            <summary>
            Имя фильтра
            </summary>      
        </member>
        <member name="F:FBA.FilterObj.FilterStatic">
            <summary>
            Собранная строка статического фильтра
            </summary>         
        </member>
        <member name="F:FBA.FilterObj.FilterStaticWHERE">
            <summary>
            Строка WHERE статического фильтра
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FilterCustom">
            <summary>
            Собранная строка Custom фильтра
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FilterCustomWHERE">
            <summary>
            Строка WHERE Custom фильтра
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FilterUniversal">
            <summary>
            Строка Universal фильтра. Where тут нет, так как весь фильтр  Universal - это и есть WHERE.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.Attr">
            <summary>
            Собранная строка всех атрибутов для показа.
            </summary>        
        </member>
        <member name="F:FBA.FilterObj.CheckedStatic">
            <summary>
            Галка отмечающая, что фильтр Static используется по умолчанию.
            </summary>         
        </member>
        <member name="F:FBA.FilterObj.CheckedCustom">
            <summary>
             Галка отмечающая, что фильтр Custom используется по умолчанию.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.CheckedUniversal">
            <summary>
             Галка отмечающая, что фильтр Universal  используется по умолчанию.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.AttrSelect">
            <summary>
            Это собранный select из выбранных атрибутов.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.AttrOrder">
            <summary>
            Это собранная сортировка из атрибутов.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FullQueryMSQL">
            <summary>
            Весь собраный фильтр MSQL.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FullQuerySQL">
            <summary>
            Весь собраный фильтр SQL.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.ColumnWidth">
            <summary>
            Массив всех размеров по ширине колонок. Далее этот массив применяется к гриду.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.MaxRecords">
            <summary>
            Максимальное количество строк для отбора запросом. для SQL Server это TOP, напрмиер: SELECT TOP 100 * from...
            </summary>
        </member>
        <member name="F:FBA.FilterObj.OuterWHERE">
            <summary>
            Внешний фильтр WHERE
            </summary>
        </member>
        <member name="F:FBA.FilterObj.AssemblyName">
            <summary>
            Это Assembly в которой находистся Static фильтр.
            </summary>
        </member>
        <member name="F:FBA.FilterObj.FormStaticName">
            <summary>
            Название формы статического фильтра в AssemblyName 
            </summary>
        </member>
        <member name="F:FBA.FilterObj.MethodStaticName">
            <summary>
            Метод статического фильтра в форме FormStaticName
            </summary>
        </member>
        <member name="F:FBA.FilterObj.PanelStaticName">
            <summary>
            Панель, на котрой лежат компоненты статического фильтра. При данного показе фильтра эти компоненты будут размещены на вкладке Static. 
            </summary>
        </member>
        <member name="F:FBA.FilterObj.ListObjectID">
            <summary>
            Список объектов для показа. Только для запросов на MSQL
            </summary>
        </member>
        <member name="T:FBA.FormFilterAttr">
            <summary>
            Свойства колонки настройки атрибута.
            </summary>
        </member>
        <member name="M:FBA.FormFilterAttr.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="attrName">Имя атрибута</param>
            <param name="attrBrief">Сокращение атрибута</param>
            <param name="attrWidth">Ширина колонки в которой будет отображаться атрибут</param>
            <param name="attrMask">Маска отображения значения атрибута</param>
            <param name="attrSort">Способ сортировки</param>
        </member>
        <member name="F:FBA.FormFilterAttr.udWidth">
            <summary>
            Ширина колонки в гриде при показе значений атрибута
            </summary>
        </member>
        <member name="F:FBA.FormFilterAttr.tbName">
            <summary>
            Имя атрибута
            </summary>
        </member>
        <member name="F:FBA.FormFilterAttr.cbMask">
            <summary>
            Маска атрибута
            </summary>
        </member>
        <member name="F:FBA.FormFilterAttr.tbBrief">
            <summary>
            Текст вычисляемого запроса
            </summary>
        </member>
        <member name="F:FBA.FormFilterAttr.cbSort">
            <summary>
            Признак сортировки по атрибуту
            </summary>
        </member>
        <member name="M:FBA.FormFilterAttr.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormGetAttr">
            <summary>
            Выбор атрибута.
            </summary>
        </member>
        <member name="F:FBA.FormGetAttr.EntityBrief">
            <summary>
            Сокращение сущности
            </summary>
        </member>
        <member name="F:FBA.FormGetAttr.EntityID">
            <summary>
            ИД сущности
            </summary>
        </member>
        <member name="F:FBA.FormGetAttr.AttrBrief">
            <summary>
            Сокращение атрибута
            </summary>
        </member>
        <member name="M:FBA.FormGetAttr.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="entityID">ИД сущности</param>
        </member>
        <member name="M:FBA.FormGetAttr.FormGetAttrFormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Закрытие формы выбора атрибута.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGetAttr.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormGetEntity">
            <summary>
            Форма выбора сущности
            </summary>
        </member>
        <member name="F:FBA.FormGetEntity.EntityBrief">
            <summary>
            Сокращение сущности
            </summary>
        </member>
        <member name="F:FBA.FormGetEntity.EntityID">
            <summary>
            ИД сущности
            </summary>
        </member>
        <member name="F:FBA.FormGetEntity.EntityName">
            <summary>
            Наименование сущности
            </summary>
        </member>
        <member name="M:FBA.FormGetEntity.#ctor(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Конструктор
            </summary>		
            <param name="selectInOneClick">Если true, то выбор в один клик, иначе двойной клик.</param>
            <param name="entityIDIN">ИД сущности</param>
            <param name="entityBriefIN">Сокращение сущности</param>
            <param name="entityNameIN">Наименование сущности</param>
        </member>
        <member name="M:FBA.FormGetEntity.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormGrant">
            Форма по управлению ролями пользователей, а также правами на формы и произвольными правами. 
        </member>
        <member name="M:FBA.FormGrant.#ctor">
            <summary>
            Конструктор. Установка MdiParent, Icon.
            </summary>
        </member>
        <member name="M:FBA.FormGrant.UserListRefresh">
            <summary>
            Показ списка пользователей.
            </summary>
        </member>
        <member name="M:FBA.FormGrant.UserDelete(System.String)">
            <summary>
            Удаление пользователя.
            </summary>
            <param name="userID">ИД пользователя</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormGrant.SetUserBlock(System.String,System.Boolean)">
            <summary>
            Блокирование пользователя.
            </summary>
            <param name="userID">ИД пользвоателя</param>
            <param name="block">Если true, то блокируем пользователя</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormGrant.UserEdit(FBA.Operation,System.String,System.String,System.String,System.String,System.String,System.String)">
            Добавление/Удаление/Изменение пользователя.
        </member>
        <member name="M:FBA.FormGrant.TbUser1Click(System.Object,System.EventArgs)">
            Событие. Кнопки добавления/удаления/изменения пользователя: Add, Del, Edit, Block, UnBlock, Refresh
        </member>
        <member name="M:FBA.FormGrant.RoleListRefresh">
            <summary>
            Показ списка ролей
            </summary>
        </member>
        <member name="M:FBA.FormGrant.RoleEdit(FBA.Operation,System.String,System.String,System.String)">
            <summary>
            Добавление/Удаление/Изменение роли
            </summary>
            <param name="operation">Операция: Add, Del, Edit</param>
            <param name="roleID">ИД роли</param>
            <param name="roleName">Имя роли</param>
            <param name="roleBrief">Сокращение роли</param>
        </member>
        <member name="M:FBA.FormGrant.RoleDelete(System.String)">
            <summary>
            Удаление роли.
            </summary>
            <param name="roleID">ИД роли</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormGrant.TbRole1Click(System.Object,System.EventArgs)">
            Событие. Кнопки редактирования ролей: Add, Del, Edit, Refresh
        </member>
        <member name="M:FBA.FormGrant.FormGrantLoad(System.Object,System.EventArgs)">
            <summary>
            Событие. Показываем список пользователей и ролей.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGrant.RightListRefresh">
            <summary>
            Показ списка прав.
            </summary>
        </member>
        <member name="M:FBA.FormGrant.RightEdit(FBA.Operation,System.String,System.String,System.String)">
            <summary>
            Добавление/Удаление/Изменение права.
            </summary>
            <param name="operation"></param>
            <param name="rightID"></param>
            <param name="rightName"></param>
            <param name="rightBrief"></param>
        </member>
        <member name="M:FBA.FormGrant.RightDelete(System.String)">
            <summary>
            Удаление права.
            </summary>
            <param name="rightID">ИД права</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormGrant.HistRefresh">
            <summary>
            Обновить историю входов пользователя в систему.
            </summary>
        </member>
        <member name="M:FBA.FormGrant.TbHist1Click(System.Object,System.EventArgs)">
            <summary>
            Обновить историю входов пользователя в систему.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGrant.TabControlMainSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            При переключении вкладки на другую вкладку.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGrant.DgvUserDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Двойной клик на таблице пользоватлей.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGrant.DgvRoleDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Двойной клик на таблице ролей.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGrant.DgvRightDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Двойной клик на таблице прав.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormGrant.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>       
        </member>
        <member name="T:FBA.FormImage">
            Запись и чтение изображенгий в/из БД.    
        </member>
        <member name="M:FBA.FormImage.#ctor">
            <summary>
            Конструктор. Установка MdiParent, Icon, обновление таблицы изображений.
            </summary>
        </member>
        <member name="M:FBA.FormImage.ImageRefresh">
            Обновление таблицы изображений.
        </member>
        <member name="M:FBA.FormImage.ImageAdd">
            Добавить одно изображение. 
        </member>
        <member name="M:FBA.FormImage.DirAdd">
            Добавить все изображения из папки.
        </member>
        <member name="M:FBA.FormImage.ImageAdd(System.String)">
            Загрузить картинку в БД.
        </member>
        <member name="M:FBA.FormImage.ImageDel">
            Удалить изображение.  
        </member>
        <member name="M:FBA.FormImage.tbImageRefresh_Click(System.Object,System.EventArgs)">
            Меню, все команды.
        </member>
        <member name="M:FBA.FormImage.SelectImage">
            Показ изображения.
        </member>
        <member name="M:FBA.FormImage.dgvImage_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            При выборе изображения в таблице показываем его в pictureBox1.          
        </member>
        <member name="M:FBA.FormImage.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormModel">
            <summary>
            Форма в которой можно менять модель данных
            </summary>
        </member>
        <member name="M:FBA.FormModel.#ctor">
            <summary>
            Конструктор. Установка MdiParent, Icon, обновление дерева сущностей.
            </summary>
        </member>
        <member name="M:FBA.FormModel.TabControlAttrSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            При выборе вкладки, чтобы не загружать все данные. Для ускорения показа данных.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormModel.CompEntityTreeFBA1_SelectedEntity(System.Object,FBA.SelectEntityEventArgs)">
            <summary>
            При выборе сущности в дереве сущностей.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormModel.ShowData">
            <summary>
            Показ даных в зависимости от выбранной вкладки.
            </summary>
        </member>
        <member name="M:FBA.FormModel.AddClick(System.Object,System.EventArgs)">
            <summary>
            Контекстное меню.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormModel.GetAttrWHERE">
            <summary>
            Получение фильтра для отображения атрибутов.
            </summary>
            <returns>Фильтр для отображения атрибутов</returns>
        </member>
        <member name="M:FBA.FormModel.GetTableWHERE">
            <summary>
            Получение фильтра для отображения таблиц.
            </summary>
            <returns>Фильтра для отображения таблиц</returns>
        </member>
        <member name="M:FBA.FormModel.LoadAttrList(System.String)">
            Загрузить список атрибутов.
        </member>
        <member name="M:FBA.FormModel.LoadTableList(System.String)">
            <summary>
            Загрузить список таблиц.
            </summary>
            <param name="EntityRefID"></param>
        </member>
        <member name="M:FBA.FormModel.LoadMethodList(System.String)">
            <summary>
            Показ методов.
            </summary>
            <param name="entityRefID"></param>
        </member>
        <member name="M:FBA.FormModel.TsAttr_N1_Click(System.Object,System.EventArgs)">
            При выборе кнопки фильтра в таблице атрибутов.
        </member>
        <member name="M:FBA.FormModel.TsTable_N1_Click(System.Object,System.EventArgs)">
            При выборе кнопки фильтра в таблице таблиц сущности.
        </member>
        <member name="M:FBA.FormModel.DgvMethodDoubleClick(System.Object,System.EventArgs)">
            При выборе текста в таблице показываем его. 
        </member>
        <member name="M:FBA.FormModel.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.ProjectNew">
            <summary>
            Новая прикладная форма.
            </summary>
        </member>
        <member name="F:FBA.ProjectNew.StatusClose">
            <summary>
            Статус закрытия формы
            </summary>
        </member>
        <member name="F:FBA.ProjectNew.projectName">
            <summary>
            Имя новой формы в решении
            </summary>
        </member>
        <member name="F:FBA.ProjectNew.ProjectTemplate">
            <summary>
            Выбранный тип формы
            </summary>
        </member>
        <member name="M:FBA.ProjectNew.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:FBA.ProjectNew.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormParam">
            Форма для работы с параметрами приложения.
        </member>
        <member name="M:FBA.FormParam.#ctor">
            Конструктор.
        </member>
        <member name="M:FBA.FormParam.RefreshUser">
            Обновить таблицу пользователей.
        </member>
        <member name="M:FBA.FormParam.RefreshParam(System.String)">
            Обновить таблицу параметров текущего пользователя.
        </member>
        <member name="M:FBA.FormParam.ParamAdd(System.String)">
            Добавить параметр пользователя.
        </member>
        <member name="M:FBA.FormParam.ParamEdit(System.String,System.String)">
            Редактировать параметр текущего пользователя.
        </member>
        <member name="M:FBA.FormParam.ParamDel(System.String,System.String)">
            Удалить параметр текущего пользователя.
        </member>
        <member name="M:FBA.FormParam.ParamFind(System.String)">
            Поиск параметра.
        </member>
        <member name="M:FBA.FormParam.tbParamN1_Click(System.Object,System.EventArgs)">
            <summary>
            Контекстное меню таблицы параметров
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormParam.cbParamFilter_CheckedChanged(System.Object,System.EventArgs)">
            Галка применить фильтр. 
        </member>
        <member name="M:FBA.FormParam.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormParamValue">
            Свойства параметра приложения.
        </member>
        <member name="F:FBA.FormParamValue.ParamID">
            <summary>
            ИД параметра
            </summary>
        </member>
        <member name="F:FBA.FormParamValue.ParamName">
            <summary>
            Имя параметра
            </summary>
        </member>
        <member name="F:FBA.FormParamValue.ParamComment">
            <summary>
            Комментарий параметра
            </summary>
        </member>
        <member name="F:FBA.FormParamValue.values">
            <summary>
            Значения параметра. Всего может быть 10 значений у параметра. Все текстовые.
            </summary>
        </member>
        <member name="M:FBA.FormParamValue.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Конструктор
            </summary>
            <param name="ParamID"></param>
            <param name="ParamName"></param>
            <param name="ParamComment"></param>
            <param name="values"></param>
        </member>
        <member name="M:FBA.FormParamValue.FormParamValueFormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            Закрытие формы.
        </member>
        <member name="M:FBA.FormParamValue.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FBA.FormProgress">
            <summary>
            Универсальная форма прогреса. 
            </summary>
        </member>
        <member name="F:FBA.FormProgress.PressCancel">
            <summary>
            Для остановки прогреса из другой формы.
            </summary>
        </member>
        <member name="M:FBA.FormProgress.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="FormCaption">Шапка формы</param>
            <param name="LabelProgress">Текст в окне</param>
            <param name="StepCount">Всего сколько шагов</param>
        </member>
        <member name="M:FBA.FormProgress.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.FormProgress.Inc">
            <summary>
            Добавление на 1.
            </summary>
        </member>
        <member name="M:FBA.FormProgress.Dec">
            <summary>
            уменьшение на 1.
            </summary>
        </member>
        <member name="M:FBA.FormProgress.Clear">
            <summary>
            Установка прогреса на 0.
            </summary>
        </member>
        <member name="M:FBA.FormProgress.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>		
        </member>
        <member name="M:FBA.FormProgress.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="P:FBA.FormProgress.Progress">
            <summary>
             Установка значения уровня прогреса.
            </summary>
        </member>
        <member name="P:FBA.FormProgress.ProgressText">
            <summary>
            Установка текста в окне прогреса.
            </summary>
        </member>
        <member name="T:FBA.FormReg">
            <summary>
            Форма для регулярных выражений.
            Памятка:
            (?i) - перед всем выражением - выключить чувствительность к регистру.
            (?=aaa) -не включать текст ааа в найденное выражение.
            </summary>
        </member>
        <member name="M:FBA.FormReg.#ctor">
            <summary>
            Консруктор. Установка MdiParent, Icon.
            </summary>
        </member>
        <member name="M:FBA.FormReg.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>		
        </member>
        <member name="T:FBA.FormReportProperty">
            <summary>
            Форма свойств отчета.
            </summary>
        </member>
        <member name="M:FBA.FormReportProperty.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="id">ИД отчета</param>
        </member>
        <member name="M:FBA.FormReportProperty.GetReportType(System.String)">
            <summary>
            Есть ещё колонка в которой указано Excel или Word.
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormReportProperty.ReportInsert">
            <summary>
            Загрузить шаблон отчета в БД.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormReportProperty.ReportUpdate">
            <summary>
            Загрузить шаблон отчета в БД.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormReportProperty.tbFileName_DeleteClick(System.Object,System.EventArgs)">
            <summary>
            Удалить текст имени файла
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormReportProperty.tbFileName_EditClick(System.Object,System.EventArgs)">
            <summary>
            Выбрать файл
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormReportProperty.tbName_Leave(System.Object,System.EventArgs)">
            <summary>
            Если сокращения нет, то выводим сокращение в поле сокращения.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:FBA.FormReportProperty.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FBA.FormReportProperty.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.FormReportProperty.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FBA.FormRight">
            <summary>
            Форма редактирвоания права пользовальвателя или роли.
            </summary>
        </member>
        <member name="F:FBA.FormRight.StatusClose">
            <summary>
            Результат закрытия формы.
            </summary>
        </member>
        <member name="M:FBA.FormRight.#ctor(FBA.Operation,System.String,System.String,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="operation">Операция</param>
            <param name="rightID">ИД права</param>
            <param name="rightName">Имя права</param>
            <param name="rightBrief">Сокращение права</param>
        </member>
        <member name="M:FBA.FormRight.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.FormRole">
            <summary>
            Форма редактирования роли пользоватлея.
            </summary>
        </member>
        <member name="F:FBA.FormRole.StatusClose">
            <summary>
            Результат закрытия формы.
            </summary>
        </member>
        <member name="M:FBA.FormRole.#ctor(FBA.Operation,System.String,System.String,System.String)">
            <summary>
            Rkycnhernjh
            </summary>
            <param name="operation">Операция. Add, Del, Edit</param>
            <param name="roleID">ИД роли</param>
            <param name="roleName">Имя роли</param>
            <param name="roleBrief">Сокращение роли</param>
        </member>
        <member name="M:FBA.FormRole.AddForm">
            <summary>
            Добавление одной формы
            </summary>
        </member>
        <member name="M:FBA.FormRole.BtnAddClick(System.Object,System.EventArgs)">
            <summary>
            Добавление/удаление форм.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormRole.AddRight">
            <summary>
            Добавление одного права.
            </summary>
        </member>
        <member name="M:FBA.FormRole.BtnRightAddClick(System.Object,System.EventArgs)">
            <summary>
            /Добавление/удаление прав.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormRole.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.FormSearch">
            <summary>
            Форма поиска
            </summary>
        </member>
        <member name="M:FBA.FormSearch.#ctor(System.String,FBA.DataGridViewFBA,FBA.GridFBA)">
            <summary>
            Конструктор.
            </summary>
            <param name="formName">Имя формы с котрой вызывается поиск</param>
            <param name="GridDG"></param>
            <param name="GridSG"></param>
        </member>
        <member name="M:FBA.FormSearch.GetHistorySearch(FBA.ComboBoxFBA)">
            <summary>
            Получить историю поисков и наполнить ей ComboBoxFBA. Статический метод.
            </summary>
            <param name="cb"></param>
        </member>
        <member name="M:FBA.FormSearch.SetHistorySearch(System.String)">
            <summary>
            Добавить строку в историю поисков. Статический метод.
            </summary>
            <param name="SearchText"></param>
        </member>
        <member name="M:FBA.FormSearch.DeleteSearchHistory(FBA.ComboBoxFBA)">
            <summary>
            Удаление истории поиска. Статический метод.
            </summary>
            <param name="cb"></param>
        </member>
        <member name="M:FBA.FormSearch.FormSearchShow(System.String,FBA.DataGridViewFBA,FBA.GridFBA)">
            <summary>
            Метод СТАТИЧЕСКИЙ для вызова данной формы.
            </summary>
            <param name="formName">Имя формы</param>
            <param name="gridDG">Можно искать по гриду FBA.DataGridViewFBA</param>
            <param name="gridSG">Можно искать по гриду FBA.GridFBA</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormSearch.btnOk_Click(System.Object,System.EventArgs)">
            <summary>
            Здесь собраны действия всех кнопок.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormSearch.GoSearsh(System.String,System.Boolean)">
            <summary>
            Запуск поиска.
            </summary>
            <param name="searchText">Текст для поиска</param>
            <param name="showResult">Показывать таблицу в форме поиска с найденными значениями</param>
        </member>
        <member name="M:FBA.FormSearch.FormSearch_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Для того чтобы повторно не открывать форму поиска, если она уже полнята.
            При закрытии формы поиска убирается информация из перенной FormSearchParam, что форма поиска поднята.
            FormSearchParam - текстовая переменная в которой через ; перечислены все поднятые в настоящий момент формы поиска.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormSearch.EditFBA1_DeleteClick(System.Object,System.EventArgs)">
            Удаление истории поиска.
        </member>
        <member name="M:FBA.FormSearch.SerchTextSourceGrid(FBA.GridFBA,System.Windows.Forms.DataGridView,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32@)">
            <summary>
            Поиск текста по гриду.
            </summary>
            <param name="DGSearch"></param>
            <param name="DGResult"></param>
            <param name="SearchText"></param>
            <param name="FirstRow"></param>
            <param name="CaseSensitivity"></param>
            <param name="OnlySelectedColumns"></param>
            <param name="OnlySelectedRows"></param>
            <param name="OnlySelectedArea"></param>
            <param name="SearchDirection"></param>
            <param name="SearchPart"></param>
            <param name="SelectedRows"></param>
            <param name="SelectedColumns"></param>
            <param name="FindCount"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormSearch.SerchTextDataGridView(FBA.DataGridViewFBA,FBA.DataGridViewFBA,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Поиск текста по гриду.
            </summary>
            <param name="DGSearch"></param>
            <param name="DGResult"></param>
            <param name="SearchText"></param>
            <param name="ShowResult"></param>
            <param name="CaseSensitivity"></param>
            <param name="SearchAll"></param>
            <param name="Highlight"></param>
            <param name="DirectionDown"></param>
            <param name="SelectedColumn"></param>
            <param name="SelectedRow"></param>
            <param name="SearchPart"></param>
            <param name="FindCount"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormSearch.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.ProjectService">
            <summary>
            Форма для работы с формами решения. Собраны Различные функции по управлению формами.
            </summary>
        </member>
        <member name="M:FBA.ProjectService.#ctor(System.String)">
            <summary>
            Форма для управления проектами
            Для загрузки проектов на сервер, на тестовую версию и копирование между тесом и рабочей версией.
            </summary>
            <param name="projectName">Имя проекта</param>
        </member>
        <member name="M:FBA.ProjectService.ProjectSaveDLL(System.String,System.String@,System.Boolean@)">
            <summary>
            Запись формы в БД в кодировке Base64. Всегда записываем как Test, поэтому параметра EnterMode здесь нет.
            Записываем перед записью файла в базу HashMD5 в конец файла, 
            для того чтобы после сравнивать два файла с одинаковыми именами.    
            </summary>
            <param name="fileName">Имя файла проекта EXE или DLL</param>
            <param name="projectID">ИД проекта в БД</param>
            <param name="newProject">Если проект новый и в БД не был ранее записан, то true</param>
            <returns>Если запись успешная, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectWriteToDataBase(System.String)">
            <summary>
            Копируем проект в БД.
            Архивируется папка проекта в ZIP и записывается в БД в виде Base64.
            </summary>
            <param name="projectName">Имя проекта - это имя папки с проектом, но без пути</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectGetFileName(System.String,FBA.EnterMode,System.Boolean,System.String@)">
            <summary>
            Чтение формы из БД из кодировки Base64. 
            Ситуация: Есть на диске EXE, Есть DLL, то DLL удаляем, а EXE перпеименовываем в DLL. 
            Ситуация: Есть на диске EXE, Нет  DLL, то переименовываем EXE в DLL.
            Cитуация: Нет  на диске EXE, Есть DLL, то ничего не делаем.           
            Ситуация: Нет  на диске EXE, Нет  DLL, то скачиваем проект из базы.      		
            Ситуация: Если принудительная загрузка (ForceLoad - true), то загружаем из БД, не обращая внимание ни на MD5, ни на наличие файла.  
            Ситуация: Если файл на диске есть, и его MD5 совпадает с тем, что в БД, то не загружаем.
            Ситуация: Если в режиме разработки (EnterMode == "Develop"), то если файл есть, то не проверяем версию и из БД не загружаем.
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="enterMode">Тип входа: Work, Test, Develop</param>
            <param name="forceLoad">Если принудительная загрузка (ForceLoad - true), то загружаем из БД, не обращая внимание ни на MD5, ни на наличие файла</param>
            <param name="fileName">Имя файла EXE или DLL проекта</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectReadFromDataBase(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Восстановить проект из БД. Файл читается из БД, далее преобразуется в нормальный вид из Base64 и записывается на диск.
            Далее папка с проектом удаляется и восстапнавливается из архива zip.        
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="projectNameNew">Новое имя проекта, под которым его восстановить. Это нужно иногда, чтобы сделать копию проекта</param>
            <param name="projectHistID">ИД записи в истории сохранения проектов, чтобы восстановить из истории</param>
            <param name="restoreFromHist">Если true то восстанавливаем из истории</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectLoad(System.String,FBA.EnterMode)">
            <summary>
            Загрузка DLL прикладного приложения (подсистемы).
            </summary>
            <param name="projectName">Имя проекта. Это имя файла DLL или EXE</param>
            <param name="enterMode">Word, Test, Develop</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.CheckProjectExistInDataBase(System.String,FBA.EnterMode,FBA.ProjectType@,System.String@,System.Boolean@)">
            <summary>
            Проверка наличия модуля в БД. Возвращаем параметры модуля ProjectType, GUIDBD, TextQuery.
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="enterMode">Тип входа: Work, Test, Develop</param>
            <param name="projectType">Тип проекта: Main, App, Dll</param>
            <param name="hashMD5">MD5</param>
            <param name="projectDel">Признак, что проект помечен на удаление</param>
            <returns>Если проект найден, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.FindAssembly(System.String,System.Reflection.Assembly@)">
            <summary>
            Поиск загруженной сборки.
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="asm">Сборка</param>
            <returns>Если сборка уже подключена к проекту, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.FindForm(System.String,System.Int32@,System.Object@)">
            <summary>
            Поиск формы по названию и по номеру. Номер указать можно 0, в этом случае номер при поиске не учытывается.   
            </summary>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы</param>
            <param name="obj">Форма</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.FormLoad(System.String,System.String,FBA.FormAction,System.Int32@,System.Object[])">
            <summary>
            Загрузка формы прикладного приложения (подсистемы). Tag экземпляр объекта формы. Нумерация с 1.   
            </summary>
            <param name="projectName">Имя проекта, а котором находится форма</param>
            <param name="formName">Имя формы</param>
            <param name="formAction">Действие с формой</param>
            <param name="formNumber">Порядковый номер формы, если их несколько одинаковых</param>
            <param name="paramArray">Параметры контруктора формы</param>
            <returns>Объект Form</returns>
        </member>
        <member name="M:FBA.ProjectService.FormGet(System.String,System.String,System.Int32@,System.Object[])">
            <summary>
            Получить форму. Только объект Form. Показ формы не происходит. 
            </summary>
            <param name="projectName">Имя проекта, а котором находится форма</param>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы, если их несколько одинаковых</param>
            <param name="paramArray">Параметры контруктора формы</param>
            <returns>Объект Form</returns>
        </member>
        <member name="M:FBA.ProjectService.FormShow(System.String,System.String,System.Int32@,System.Object[])">
            <summary>
            Запуск формы прикладного приложения (подсистемы).
            </summary>
            <param name="projectName">Имя проекта, а котором находится форма</param>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы, если их несколько одинаковых</param>
            <param name="paramArray">Параметры контруктора формы</param>
            <returns>Объект Form</returns>
        </member>
        <member name="M:FBA.ProjectService.FormDialog(System.String,System.String,System.Int32@,System.Object[])">
            <summary>
            Запуск формы прикладного приложения (подсистемы).
            </summary>
            <param name="projectName">Имя проекта, а котором находится форма</param>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы, если их несколько одинаковых</param>
            <param name="paramArray">Параметры контруктора формы</param>
            <returns>Объект Form</returns>
        </member>
        <member name="M:FBA.ProjectService.FormLoadDynamic(System.String,System.String,FBA.FormAction,System.Int32@,System.Object[])">
            <summary>
            Запуск формы прикладного приложения (подсистемы).
            </summary>
            <param name="projectName">Имя проекта, а котором находится форма</param>
            <param name="formName">Имя формы</param>
            <param name="formAction">Действие с формой</param>
            <param name="formNumber">Порядковый номер формы, если их несколько одинаковых</param>
            <param name="paramArray">Параметры контруктора формы</param>
            <returns>Объект Form</returns>
        </member>
        <member name="M:FBA.ProjectService.FormGetDynamic(System.String,System.String,System.Int32@,System.Object[])">
            <summary>
            Получить форму. Форма не показывается. 
            </summary>
            <param name="projectName">Имя проекта с формой</param>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы</param>
            <param name="paramArray">Массив параметров контсруктора формы</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.FormShowDynamic(System.String,System.String,System.Int32@,System.Object[])">
            <summary>
            Показ формы прикладного приложения как не модальной.
            </summary>
            <param name="projectName">Имя проекта с формой</param>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы</param>
            <param name="paramArray">Массив параметров контсруктора формы</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.FormDialogDynamic(System.String,System.String,System.Int32@,System.Object[])">
            <summary>
            Показ формы прикладного приложения как модальной.
            </summary>
            <param name="projectName">Имя проекта с формой</param>
            <param name="formName">Имя формы</param>
            <param name="formNumber">Порядковый номер формы</param>
            <param name="paramArray">Массив параметров контсруктора формы</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectExists(System.String,System.Boolean,System.String@)">
            <summary>
            Проверяем наличие пользовательского проекта в базе.
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="showMes">Показываьт сообщение об ошибках</param>
            <param name="projectID">ИД проекта в БД</param>
            <returns>Если проект найден, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.FormGetNumber(System.String)">
            <summary>
            Выясняем сколько открыто экземпляров формы с названием FormName.
            Поиск ведется в том числе среди свернутых и скрытых форм (Hide, Visible=false). 
            </summary>
            <param name="formName">Имя формы</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectSetDeleted(System.String,System.Boolean)">
            <summary>
            Пометить проект на удаление.
            </summary>
            <param name="projectID">ИД проекта</param>
            <param name="deleted">Флаг true - проект удален</param>
            <returns>Если флаг уставновлен успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectDelete(System.String)">
            <summary>
            Удаление формы из базы.
            </summary>
            <param name="projectID">ИД проекта</param>
            <returns>Если форма успешно удалена, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectHistDelete(System.String)">
            <summary>
            Удалить запись из истории проектов.
            </summary>
            <param name="projectHistID">ИД записи истории изменения проекта</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectNew">
            <summary>
            Создание нового проекта
            </summary>
        </member>
        <member name="M:FBA.ProjectService.CopyAsNew(System.String,System.String)">
            <summary>
            Копирование формы из fbaProject или fbaProjectHist как нового модуля.
            </summary>
            <param name="projectID">ИД проекта</param>
            <param name="projectHistID">ИД истории изменения проета</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectRename(System.String)">
            <summary>
            Переименование формы.
            </summary>
            <param name="projectPath">Путь к папке проекта на диске</param>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectSetType(System.String,FBA.ProjectType)">
            <summary>
            Установить тип проекта.
            </summary>
            <param name="projectID">ИД проекта в БД</param>
            <param name="projectType">Тип проекта</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.GetProjectName(System.String,System.String@)">
            <summary>
            Получить Имя формы по её ID.
            </summary>
            <param name="projectID">ИД проекта в БД</param>
            <param name="projectName">Имя проекта</param>
            <returns>Если проект найден, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.GetProjectID(System.String,System.String@)">
            <summary>
            Получить ID проекта по его имени.
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="projectID">ИД проекта</param>
            <returns>Если проект найден, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.GetProjectHistName(System.String,System.String@)">
            <summary>
            Получить Имя проекта по его HistID.
            </summary>
            <param name="projectHistID">ИД истории изменения проектов</param>
            <param name="projectName">Имя проекта</param>
            <returns>Если проект найден, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectHistToTest(System.String)">
            <summary>
            Скопировать из истории формы на тестовую версию.
            </summary>
            <param name="projectHistID">ИД проекта из истории изменения проектов</param>
            <returns>Если успешно перенесено, true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectCopyTestToWork(System.String)">
            <summary>
            Копирование формы из тестовой версии в рабочую.
            </summary>
            <param name="projectID">ИД проекта</param>
            <returns>Если успешно скопировано, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectExport(System.String)">
            <summary>
            Экспорт проекта в файл.
            </summary>
            <param name="projectID">ИД проекта для экспорта</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.ProjectImport(System.String)">
            <summary>
            Импорт проекта из файла.
            </summary>
            <param name="projectID">ИД проекта для экспорта</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ProjectService.CmFormN14Click(System.Object,System.EventArgs)">
            <summary>
            Событие. Контекстное меню для таблицы форм.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ProjectService.CmProjectHistN1Click(System.Object,System.EventArgs)">
            <summary>
            Событие. Контекстное меню для таблицы истории.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ProjectService.SaveProjectAndDLL(System.String)">
            <summary>
            Сохранить все. Это запись в БД всей папки проекта.
            </summary>
            <param name="projectName"></param>
        </member>
        <member name="M:FBA.ProjectService.LoadProjectAndDLL(System.String)">
            <summary>
            Загрузка проекта.   
            </summary>
            <param name="projectName">Имя проекта</param>
        </member>
        <member name="M:FBA.ProjectService.GetCurrentProjectID">
            <summary>
            Получить имя текущей выделенного проекта.
            </summary>
            <returns>Имя проекта</returns>
        </member>
        <member name="M:FBA.ProjectService.GetCurrentProjectHistID">
            <summary>
            Получить имя текущей выделенной формы из истории.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.ProjectService.TabControl1SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Показать код выделенной формы.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ProjectService.RefreshProjectList">
            <summary>
            Обновить список проектов
            </summary>
        </member>
        <member name="M:FBA.ProjectService.RefreshProjectHist">
            <summary>
            Обновить таблицу истории формы.
            </summary>
        </member>
        <member name="M:FBA.ProjectService.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="T:FBA.FormSM">
            <summary>
            Форма для показа сообщения.
            </summary>
        </member>
        <member name="F:FBA.FormSM.Result">
            <summary>
            Если нажата кнопка Ok, то true, Cancel = false
            </summary>
        </member>
        <member name="M:FBA.FormSM.SetErrorText(System.String)">
            <summary>
            Записать текст ошибки.
            </summary>
            <param name="ErrorMes"></param>
        </member>
        <member name="M:FBA.FormSM.ParseTextError(System.String,System.String@,System.String@)">
            <summary>
            Распарсить текст ошибки. Отделить пользовательское от системеного.
            </summary>
            <param name="ErrorMes"></param>
            <param name="UserError"></param>
            <param name="SystemError"></param>
        </member>
        <member name="M:FBA.FormSM.#ctor(System.String,FBA.MessageType,System.String)">
            <summary>
            Показ окна сообщения.
            </summary>
            <param name="Mes">Текст сообщения</param>
            <param name="typeMes">Тип сообщения. Один из Error, SystemError, ErrorQuestion, Stop, Information, Warning, Question</param>
            <param name="Caption">Заголовок формы сообщения</param>
        </member>
        <member name="M:FBA.FormSM.GetPositionWindowMessage(System.Int32@,System.Int32@)">
            <summary>
            Получить позицию в которую выводить окно сообщения.
            </summary>
            <param name="posTop">Позиция слева</param>
            <param name="posLeft">Позиция сверху</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormSM.ShowCodeFile">
            <summary>
            Показ вкладки c модулями, в которых произошли ошибки.
            </summary>
        </member>
        <member name="M:FBA.FormSM.TabControlPageAdd(System.Windows.Forms.TabControl,FastColoredTextBoxNS.FastColoredTextBox,System.String,System.String,System.String[0:,0:],System.Int32)">
            <summary>
            Добавление новой вкладки для редактора запросов.
            </summary>
            <param name="tabControlCode"></param>
            <param name="textSQLExample"></param>
            <param name="FileName"></param>
            <param name="Code"></param>
            <param name="Errors"></param>
            <param name="indexPage"></param>
        </member>
        <member name="M:FBA.FormSM.Button1Click(System.Object,System.EventArgs)">
            <summary>
            Кнопка Ok.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormSM.Button2Click(System.Object,System.EventArgs)">
            <summary>
            Кнопка Cancel. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormSM.CbWordWrapCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Галка WordWrap на форме.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormSM.cmMenu_N1_Click(System.Object,System.EventArgs)">
            <summary>
            Контекстное меню.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:FBA.FormSM.components">
            Designer variable used to keep track of non-visual components.   
        </member>
        <member name="M:FBA.FormSM.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            true if managed resources should be disposed; otherwise, false.
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="M:FBA.FormSM.InitializeComponent">
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.        
        </member>
        <member name="T:FBA.FormSQL">
            Форма для выполнения кода SQL при запросах к локальной или удаленной БД.	
        </member>
        <member name="M:FBA.FormSQL.#ctor">
            <summary>
            Форма для выполнения MSQL или SQL.
            </summary>
        </member>
        <member name="M:FBA.FormSQL.TabControlPageAdd(System.Windows.Forms.TabControl,System.Windows.Forms.SplitContainer,FastColoredTextBoxNS.FastColoredTextBox,System.Windows.Forms.Panel,System.Windows.Forms.TextBox,FBA.DataGridViewFBA,System.Windows.Forms.ContextMenuStrip,System.Int32@)">
             <summary>
             Добавление новой вкладки для редактора запросов.
             	
            tabControSQL
            splitContainerSQL
            панель 1
            	textSQL1
            панель 2
                tbSQLResult1
            pnlResultSQL1
            tabControlResult
            	tabPageData - Страница 1		
            		dgvSQL1
            	tabPageSQL - Страница 2
            		fastColoredTextBoxSQL	
             </summary>
             <param name="tabControSQL"></param>
             <param name="splitContainerExample"></param>
             <param name="textSQLExample"></param>
             <param name="pnlResultSQLExample"></param>
             <param name="tbSQLResultExample"></param>
             <param name="dgvSQLExample"></param>
             <param name="GridContextMenu"></param>
             <param name="TabIndexSQL"></param>
        </member>
        <member name="M:FBA.FormSQL.TbSQL1Click(System.Object,System.EventArgs)">
            Событие. Кнопки редактора запросов        
        </member>
        <member name="M:FBA.FormSQL.cmGrid_N1_Click(System.Object,System.EventArgs)">
            События контекстного меню на гриде.
        </member>
        <member name="M:FBA.FormSQL.GetColumnNames(System.String,System.Boolean)">
            Получить строку с названиями колонок Column1, Column2, Column3...
        </member>
        <member name="M:FBA.FormSQL.tbSQL5_TextChanged(System.Object,System.EventArgs)">
            При переключении базы.
        </member>
        <member name="M:FBA.FormSQL.GetListTable(FBA.DirectionQuery)">
            Получить список таблиц из бызы.
        </member>
        <member name="M:FBA.FormSQL.FormSQL_Shown(System.Object,System.EventArgs)">
            При показе формы.
        </member>
        <member name="M:FBA.FormSQL.TextSQL1KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            Выполнение кода по кнопке F5.
        </member>
        <member name="M:FBA.FormSQL.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            Перехват нажатий кнопок, когда форма в фокусе.
        </member>
        <member name="M:FBA.FormSQL.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>			
        </member>
        <member name="T:FBA.FormStatus">
            <summary>
            Форма на которой можно для каждой сущности (список Entity) 
            назначить список статусов, которые может иметь объект этой сущности (список Status),
            а также для каждого статуса сущности можно задать список статусов, 
            на которые пользователь может изменить выбранный статус (список Change).
            Привязок к ролям нет. 
            </summary>
        </member>
        <member name="M:FBA.FormStatus.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.FormStatus.LoadStatus">
            <summary>
            Загрузка статусов.
            </summary>
        </member>
        <member name="M:FBA.FormStatus.LoadStatusEntity">
            <summary>
            Загрузка статусов. Сущности.
            </summary>
        </member>
        <member name="M:FBA.FormStatus.LoadStatusParent">
            <summary>
            Загрузка статусов. Список возможных статусов.
            </summary>
        </member>
        <member name="M:FBA.FormStatus.LoadStatusChange">
            <summary>
            Загрузка статусов. Список возможных переходов, для каждого статуса сущности.
            </summary>
        </member>
        <member name="M:FBA.FormStatus.ts1_N1_Click(System.Object,System.EventArgs)">
            <summary>
            Все действия - события всех кнопок.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormStatus.EntityAdd">
            <summary>
            Добавление сущности.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormStatus.ParentAdd">
            <summary>
            Добавление статуса к сущности.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormStatus.ChangeAdd">
            <summary>
            Добавление статуса, на который может меняться выбранный статус сущности.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormStatus.EntityDel">
            <summary>
            Удаление всех статусов сущности.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormStatus.ParentDel">
            <summary>
            Удаление одного статуса сущности.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormStatus.ChangeDel">
            <summary>
            Удаление статуса на который может ссылаться выбранный статсус сущности.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormStatus.cmMenu1_N1_Click(System.Object,System.EventArgs)">
            <summary>
            Контекстное меню с пунктом Refresh.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormStatus.DgvEntityDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Событие изменения выделенной строки dgvEntity.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormStatus.DgvParentDoubleClick(System.Object,System.EventArgs)">
            <summary>
            Событие изменения выделенной строки dgvParent. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormStatus.DgvEntitySelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Событие изменения выделенной строки dgvEntity.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormStatus.DgvParentSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Событие изменения выделенной строки dgvParent. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormStatus.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="T:FBA.FormTable">
            <summary>
            Редактирование списка таблиц сущности.
            </summary>
        </member>
        <member name="F:FBA.FormTable.StatusClose">
            <summary>
            Статус закрытия формы
            </summary>
        </member>
        <member name="M:FBA.FormTable.#ctor(FBA.Operation,System.String,System.String,System.String)">
            <summary>
            Конструктор. Добавление таблицы к сущности
            </summary>
            <param name="operation">Add, Del, Edit</param>
            <param name="ObjID">ИД таблицы</param>
            <param name="ObjName">Наименование таблицы в БД</param>
            <param name="TableEntityID">ИД сущности, к которой относится таблица</param>
        </member>
        <member name="M:FBA.FormTable.FillData">
            <summary>
            Заполнение свойств компонентов значениями.
            </summary>
        </member>
        <member name="M:FBA.FormTable.CheckDeleteTable">
            <summary>
            Проверка возможности удаления таблицы из БД.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormTable.OperationDelete">
            <summary>
            Удаление таблицы.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormTable.GetTableList">
            <summary>
            Получить список таблиц для выбора.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormTable.FieldsForTable">
            <summary>
            Список полей таблицы.
            </summary>
        </member>
        <member name="M:FBA.FormTable.FormTable_Shown(System.Object,System.EventArgs)">
            <summary>
            Интересно, если повесить FillData на конструктор, то текст (свойство текст) в 
            комбобоксах переписывается почему-то.. а на Shown нет. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormTable.TbNameLeave(System.Object,System.EventArgs)">
            <summary>
            Список полей таблицы.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormTable.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="T:FBA.FormText">
            <summary>
            Форма для сохранения больших текстов на сервере
            </summary>
        </member>
        <member name="M:FBA.FormText.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.FormText.TextAdd">
            Добавить текст.
        </member>
        <member name="M:FBA.FormText.TextDel(System.String)">
            Удалить текст.
        </member>
        <member name="M:FBA.FormText.TextSave(System.String)">
            Сохранить текст.
        </member>
        <member name="M:FBA.FormText.TextRefresh">
            Показ текста.
        </member>
        <member name="M:FBA.FormText.SelectText">
            Показ текста.
        </member>
        <member name="M:FBA.FormText.DgvTextDoubleClick(System.Object,System.EventArgs)">
            При выборе текста в таблице показываем его. 
        </member>
        <member name="M:FBA.FormText.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="T:FBA.FormUniEdit">
            Класс формы универсального редактирования объектов.
        </member>
        <member name="M:FBA.FormUniEdit.#ctor(System.String,System.String,System.String,System.String)">
            Operation: INSERT, DELETE, UPDATE
        </member>
        <member name="M:FBA.FormUniEdit.FormUniEdit_Load(System.Object,System.EventArgs)">
            Действия, которые выполняются только один раз при старте формы.
        </member>
        <member name="M:FBA.FormUniEdit.btnOk_Click(System.Object,System.EventArgs)">
            Кнопка - OK. Применить изменения.
        </member>
        <member name="M:FBA.FormUniEdit.dgvStateDate_DoubleClick(System.Object,System.EventArgs)">
            Двойной клик на таблице StateDate. Перейти на другую дату состояния.
        </member>
        <member name="M:FBA.FormUniEdit.AttrValueChanged(System.Object,System.EventArgs)">
            Отмечаем ручное изменение. 
        </member>
        <member name="M:FBA.FormUniEdit.CollectChange">
            Собрать все ручные изменения. 
        </member>
        <member name="M:FBA.FormUniEdit.LoadUniForm">
            Действия, которые выполняются только один раз при старте формы.
        </member>
        <member name="M:FBA.FormUniEdit.GetSQL_AttrData(System.Data.DataTable@,System.String)">
            Собрать запрос SQLAttrData и DTAttr для получении информации по атрибутам.
        </member>
        <member name="M:FBA.FormUniEdit.GetSQL_HistData(System.Data.DataTable)">
            Собрать запрос SQLAttrHist, который вернёт таблицу со всеми историчными атрибутами и данными атрибутов.
        </member>
        <member name="M:FBA.FormUniEdit.GetSQL_StateDate(System.Data.DataTable)">
            Собрать запрос SQLStateData, который вернёт таблицу со всеми историчными атрибутами, только StateDate, без данных.
        </member>
        <member name="M:FBA.FormUniEdit.tabControl1_Selecting(System.Object,System.Windows.Forms.TabControlCancelEventArgs)">
            Выбор вкладки таблицы историчных значений.
        </member>
        <member name="M:FBA.FormUniEdit.AddAttrToForm">
            Заполнение формы атрибутами.
        </member>
        <member name="M:FBA.FormUniEdit.UniEditFieldAdd(System.Windows.Forms.FlowLayoutPanel,System.String,System.String,System.String,System.Int32)">
            Добавление нового атрибута.
            Type можкт быть: DateTime, Memo, TextBox.
        </member>
        <member name="M:FBA.FormUniEdit.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="P:FBA.FormUniEdit.CreateParams">
            Хм... благодаря этому коду форма при измениии размеров перерисовывается значительно быстрее. Взято отсюда:
            https://social.msdn.microsoft.com/Forums/windows/en-US/c27693d2-9b4e-4395-9e90-402a6af96307/splitcontainer-flickering-issue-while-resizing-it?forum=winforms
        </member>
        <member name="T:FBA.frmSample03">
            <summary>
            не сделано
            </summary>
        </member>
        <member name="F:FBA.frmSample03.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FBA.frmSample03.#ctor">
            <summary>
            не сделано
            </summary>
        </member>
        <member name="M:FBA.frmSample03.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FBA.frmSample03.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:FBA.frmSample03.OnLoad(System.EventArgs)">
            <summary>
            При загрузке формы
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FBA.frmSample03.RoundView">
            <summary>
            Customized View to draw a rounded background
            </summary>
        </member>
        <member name="M:FBA.frmSample03.RoundView.BackVisualElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:FBA.frmSample03.RoundView.BackVisualElement.#ctor(FBA.frmSample03.RoundView.BackVisualElement)">
            <summary>
            Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:FBA.frmSample03.RoundView.BackVisualElement.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:FBA.frmSample03.GDITextView">
            <summary>
            Customized View to directly use GDI+ StringFormat features.
            </summary>
        </member>
        <member name="T:FBA.FormUpdate">
            <summary>
            Форма для обновления программы
            </summary>
        </member>
        <member name="M:FBA.FormUpdate.#ctor">
            <summary>
            Контруктор
            </summary>
        </member>
        <member name="M:FBA.FormUpdate.TlbNewFilesClick(System.Object,System.EventArgs)">
            <summary>
            Показать в таблице все файлы.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormUpdate.UpdateListUpdates">
            <summary>
            Показывает список доступных обновлений.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormUpdate.UpdateListFiles">
            <summary>
            Показывает список файлов выбранного обновления.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormUpdate.DgvUpdateClick(System.Object,System.EventArgs)">
            <summary>
            Клик на гриде слева - выбор обновления.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.FormUpdate.GetLastUpdate">
            <summary>
            Получить номер последнего обновления
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormUpdate.GetNewFiles">
            <summary>
            Список новых файлов
            </summary>
        </member>
        <member name="M:FBA.FormUpdate.GetFilesFBA">
            <summary>
            Получить список файлов решения
            </summary>   
            <returns></returns>
        </member>
        <member name="M:FBA.FormUpdate.CheckFiles(System.Boolean)">
            <summary>
            Отметить файлы/снять отметку со всех файлов.
            </summary>
            <param name="check"></param>
        </member>
        <member name="M:FBA.FormUpdate.UpdateCheck">
            <summary>
            Проверить необходимость обновления.
            </summary>
        </member>
        <member name="M:FBA.FormUpdate.DeleteUpdate(System.String)">
            <summary>
            Удаление обновления.
            </summary>
            <param name="version">Версия программы</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormUpdate.DeleteUpdateFile(System.String,System.String)">
            <summary>
            Удаление обновления.
            </summary>
            <param name="version">Версия программы</param>
            <param name="fileName">Имя файла обновления</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FormUpdate.UploadNewUpdate">
            <summary>
            Загрузка обновления на сервер.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.FormUpdate.UpdateUpload(System.Boolean)">
            <summary>
            Сохранить все файлы программы на сервере. 
            </summary>
            <param name="uploadToServer"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormUpdate.UpdateDownload">
            Скачать обновление в папку Update.
             
        </member>
        <member name="M:FBA.FormUpdate.UpdateUploadFiles(System.Data.DataTable@,System.String[],System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="contentList"></param>
            <param name="doUserUpdate"></param>
            <param name="uploadToServer"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FormUpdate.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>		        
        </member>
        <member name="T:FBA.FormUser">
            <summary>
            Форма для управления пользователями.
            </summary>
        </member>
        <member name="F:FBA.FormUser.StatusClose">
            <summary>
            Статус закгрытия формы
            </summary>
        </member>
        <member name="M:FBA.FormUser.#ctor(FBA.Operation,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="operation">Операция: Add, Del, Edit</param>
            <param name="userID">ИД пользователя</param>
            <param name="userLogin">Логин</param>
            <param name="userName">Имя</param>
            <param name="userPass">Пароль</param>
            <param name="userRole">Роль пользователя</param>
            <param name="userBlock">Устанавливает галку - пользователь блокирован</param>
        </member>
        <member name="M:FBA.FormUser.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.FormValueList">
            Форма для выбора одного изи нескольких строк из таблицы, которая получается после выполенния запроса SQL.
            MultiSelect - Допускается выбор одной строки или нескольких.
        </member>
        <member name="F:FBA.FormValueList.SelectedValue">
            <summary>
            Список выбранных значений.
            </summary>
        </member>
        <member name="M:FBA.FormValueList.#ctor(System.String,System.Boolean)">
            Два перегруженных конструктора.
        </member>
        <member name="M:FBA.FormValueList.#ctor(System.Data.DataTable,System.Boolean)">
            <summary>
            Перегруженый конструктора
            </summary>
            <param name="dt"></param>
            <param name="multiSelect">Множественный выбор</param>
        </member>
        <member name="M:FBA.FormValueList.Constructor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.FormValueList.SetEmpty">
            Очистить всеь массив выбранных значений.
        </member>
        <member name="M:FBA.FormValueList.SelectValue">
            Заполнить массив выбранными значениями.
        </member>
        <member name="M:FBA.FormValueList.btnCancel_Click(System.Object,System.EventArgs)">
            Отмена выбора.
        </member>
        <member name="M:FBA.FormValueList.btnOk_Click(System.Object,System.EventArgs)">
            Выбор значений и закрытие формы по кнопке Ок.
        </member>
        <member name="M:FBA.FormValueList.dgvList_DoubleClick(System.Object,System.EventArgs)">
            Выбор значений и закрытие формы по двойному клику на гриде.
        </member>
        <member name="M:FBA.FormValueList.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.FormViewEntity">
            Форма для показа справочника.
        </member>
        <member name="F:FBA.FormViewEntity.EntityBrief">
            <summary>
            Сокращение сущности
            </summary>
        </member>
        <member name="F:FBA.FormViewEntity.filter">
            <summary>
            Фильтр.
            </summary>
        </member>
        <member name="F:FBA.FormViewEntity.dt">
            <summary>
            Таблица которая выводится на форму
            </summary>
        </member>
        <member name="F:FBA.FormViewEntity.fs">
            <summary>
            Форма поиска значений в таблице.
            </summary>
        </member>
        <member name="M:FBA.FormViewEntity.#ctor(System.String)">
            Конструктор.
        </member>
        <member name="M:FBA.FormViewEntity.FormViewClose(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            Закрытие формы. Уничтожаем фильтр, если он существует.
        </member>
        <member name="M:FBA.FormViewEntity.tb_N1_Click(System.Object,System.EventArgs)">
            Все управляющие кноки справочника.
        </member>
        <member name="M:FBA.FormViewEntity.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.FormViewTable">
            <summary>
            Показ формы с таблицей DataTable  
            </summary>
        </member>
        <member name="M:FBA.FormViewTable.#ctor(System.String,System.String,System.Data.DataTable)">
            <summary>
            Конструктор.
            </summary>
            <param name="capForm">Шапка формы</param>
            <param name="capText">Подпись на форме</param>
            <param name="dt">Таблица DataTable</param>
        </member>
        <member name="M:FBA.FormViewTable.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	        
        </member>
        <member name="T:FBA.sys">
            <summary>
            Description of SysEnter.
            </summary>
            <summary>
            Description of SysEnter.
            </summary>
            <summary>
            Здесь собраны все методы для обращения к данным. Для компонентов работы с даными.
            </summary>
            <summary>
            Методы работы со словарной системой.
            </summary>
            Методы связанные с сервером приложений.
            <summary>
            Текстовые и числовые методы.
            </summary>
            <summary>
            Функции работы с датой и временем.
            </summary>
            <summary>
            Основной статический класс, в котором собраны различные простые методы.
            Общий статический класс для всех проектов: Клиента (ClientApp), Сервера приложений (ServerApp), Utilites, Updater.
            Здесь собраны методы общего назначения для работы системы. Это главный класс.
            </summary>
        </member>
        <member name="M:FBA.sys.ConnectLocal">
            <summary>
            Установка соединения с локальной SQLite.	 
            </summary>
        </member>
        <member name="M:FBA.sys.ConnectRemote">
            <summary>
            Установка соединения с удаленной БД.
            </summary>
        </member>
        <member name="M:FBA.sys.GetServerAppPortDefault">
            <summary>
            Получить порт сервера приложений из настроек.
            </summary>
            <returns>Порт сервера приложений</returns>
        </member>
        <member name="M:FBA.sys.ConnectRemoteSilent(System.String,FBA.EnterMode,System.String,System.String)">
            <summary>
            Подключение без поднятия формы входа.
            </summary>
            <param name="connectionName">Имя соединения</param>
            <param name="enterMode">Тип входа в систему EnterMode</param>
            <param name="loginIN">Логин пользователя прикладной</param>
            <param name="passIN">Пароль пользователя прикладной</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.ConnectParam">
            <summary>
            Установка соединения. Параметры подключения в командной строке.
            Пример: ConnectionID=21;EnterMode=Work;
            </summary>
        </member>
        <member name="M:FBA.sys.Application_ThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Все исключения, выданные основным потоком, обрабатываются этим методом.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.sys.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Все исключения, выданные дополнительными потоками, обрабатываются в этом методе
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.sys.GetUserPassCrypt(System.String,System.String)">
            <summary>
            Получить зашифрованный пароль пользователя.
            </summary>
            <param name="userLoginIN">Логин пользователя</param>
            <param name="userPassIN">Пароль пользователя</param>
            <returns>Зашифрованный пароль пользователя</returns>
        </member>
        <member name="M:FBA.sys.ChangeUserPass">
            <summary>
            Сменить пароль пользвоателя.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.GetLocalIPv4(System.String)">
            <summary>
            Получить IP локальный IP адрес при AddressList[0]. 
            Может быть такой адрес IPv6 fe80::d82a:ce0f:4d01:7cb1%11
            Ищем IPv4.        
            </summary>
            <param name="hostName">Это параметр System.Net.Dns.GetHostName()</param>
            <returns>Получаем IPv4. IPv6 игноритуем</returns>
        </member>
        <member name="M:FBA.sys.Enter(System.String,FBA.EnterMode,System.String,System.String)">
            Вход в систему. Основной метод входа в систему. Для всех приложений ServerApp, ClientApp.
        </member>
        <member name="M:FBA.sys.AddEnterLast(System.String,System.String,FBA.EnterMode)">
            <summary>
            Добавление в историю входов. Функция только для SQLite.    
            </summary>
            <param name="connectionNameIN">Имя соединения с БД или сервером приложений</param>
            <param name="systemNameIN">Имя прикладной подсистемы</param>
            <param name="enterModeIN">Тип входа в программу</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.AddEnterHist(System.String,System.String,System.String,System.String,System.String,System.String,FBA.EnterMode)">
            <summary>
            Добавление в историю входов. Функция только для Postgre и MSSQL.
            </summary>
            <param name="connectionNameIN">Имя соединения с БД или сервером приложений</param>
            <param name="computerNameIN">Имя компьютера пользователя</param>
            <param name="computerUserNameIN">Имя пользователя системы</param>
            <param name="userProjectIN">Имя </param>
            <param name="userIDIN"></param>
            <param name="systemNameIN">Какой Exe клиент подключается. ClientApp, Utility и др.</param>
            <param name="enterModeIN">Тип входа: Work, Test, Develop</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.ShowHelp">
            <summary>
            Показ справки.
            </summary>
        </member>
        <member name="M:FBA.sys.ShowDocumentation">
            <summary>
            Показ подробной справки по классам, методам, и т.д.
            </summary>
        </member>
        <member name="M:FBA.sys.SQLToArray(FBA.DirectionQuery,System.String)">
            <summary>
            Запрос SELECT к БД. Результат в текстовом одномерном массиве.
            </summary>
            <param name="direction">Direction = Local, Remote</param>
            <param name="sql">Запрос SQL. В селекте может быть только одна колонка для выбора</param>
            <returns>Возвращается одномерный массив - одна колонка</returns>
        </member>
        <member name="M:FBA.sys.Exec(FBA.DirectionQuery,System.String)">
            <summary>
            Запрос EXEC к БД. Если нет авторизации, то запрашивается.
            Direction = Local, Remote
            </summary>
            <param name="direction">Direction = Local, Remote</param>
            <param name="sql">Запрос SQL</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.Exec(FBA.DirectionQuery,System.Boolean,System.String,System.String@)">
            <summary>
            Запрос EXEC к БД. Если нет авторизации, то запрашивается. 
            На выходе ID вставленной (обновленной) записи, если она одна.
            Direction = Local, Remote
            </summary>
            <param name="direction"></param>
            <param name="addInsertID">если true, то добавляется код для возврата значений.    
            Postgre: RETURNING id; ";
            MSSQL:   SELECT @@IDENTITY AS id; ";                                          
            SQLite:  SELECT last_insert_rowid() AS id; "; </param>
            <param name="sql">Код который нужно выполнить на сервере</param>
            <param name="id">ИД записи после Insert</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String)">
            <summary>
            Получение одного значения.
            </summary>      
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@)">
            <summary>
            Получение 2-х значений.
            </summary>      
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@)">
            <summary>
            Получение 3-х значений.
            </summary>       
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 4-х значений.
            </summary>       
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 5-х значений.
            </summary> 
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 6-х значений.
            </summary>
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            /Получение 7-х значений.
            </summary>      
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 8-х значений. 
            </summary>      
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 9-х значений. 
            </summary>
        </member>
        <member name="M:FBA.sys.GetValue(FBA.DirectionQuery,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 10-ти значений. 
            </summary>
        </member>
        <member name="M:FBA.sys.GetValueArr(FBA.DirectionQuery,System.String,System.String[]@)">
            <summary>
            Получение больше 10-ти значений. В массиве строк arr.
            </summary>
            <param name="direction">Локальная или удалённая БД</param>
            <param name="sql">Запрос SQL</param>
            <param name="arr">Масив, в который будут присвоены все полученные после запроса значения всех колонок</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.SelectGV(FBA.DirectionQuery,System.String,System.Windows.Forms.DataGridView)">
            <summary>
            Функции получения данных для MSSQL, Postgre, SQLite. Результат в DataGridView. 
            </summary>
            <param name="direction">Локальная или удалённая БД</param>
            <param name="sql">Запрос Select</param>
            <param name="grid">DataGridView</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.SelectGV2(FBA.DirectionQuery,System.String,FBA.DataGridViewFBA)">
            Функции получения данных для MSSQL, Postgre, SQLite. Результат в DataGridView.  
        </member>
        <member name="M:FBA.sys.SelectDT(FBA.DirectionQuery,System.String,System.Data.DataTable@)">
            Функция получения данных для MSSQL, Postgre, SQLite. Результат в DataTable. Возвращает только одну таблицу.             
        </member>
        <member name="M:FBA.sys.SelectDS(FBA.DirectionQuery,System.String,System.Data.DataSet@)">
            Запрос к БД. Если нет авторизации, то запрашивается. На выходе массив таблиц.
        </member>
        <member name="M:FBA.sys.SelectDS(FBA.DirectionQuery,System.String,System.Data.DataSet@,System.String@,System.Boolean)">
            Запрос к БД. Если нет авторизации, то запрашивается. На выходе массив таблиц.
        </member>
        <member name="M:FBA.sys.CheckSyntaxQuery(FBA.DirectionQuery,System.String,System.String@,System.Boolean)">
            <summary>
            Проверка синтаксиса запроса.
            </summary>
            <param name="direction">Локальная или удалённая БД</param>
            <param name="sql">Запрос SQL</param>
            <param name="errorText">Текст ошибки, если есть</param>
            <param name="errorShow">Если true, то показываетс оконо сообщения об ошибке</param>
            <returns>Если запрос корректный, то true</returns>
        </member>
        <member name="M:FBA.sys.SelectComboBox(FBA.DirectionQuery,System.String,System.Windows.Forms.ComboBox)">
            <summary>
            Функции получения данных для MSSQL, Postgre, SQLite. Результат в ComboBox. 
            </summary>
            <param name="direction">Локальная или удалённая БД</param>
            <param name="sql">Запрос SQL</param>
            <param name="cb">ComboBox</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.SelectCount(FBA.DirectionQuery,System.String)">
            <summary>
            Запрос к БД. Получение кол-ва записей, которое возвращает запрос.
            </summary>
            <param name="direction">Локальная или удалённая БД</param>
            <param name="sql">Запрос SQL</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.DataSetToStr(System.Data.DataSet)">
             <summary>
             Сериализовать DataSet в строку.
             Преимущества этой сериализации:
             Компактный размер при больших таблицах, так как повторяющиеся данные не сохраняются.
             В заголовке указан размер, поэтому можно сразу узнать сколько строк и столбцов.
             Описание формата:
             Вначале идет код операции - всегда 3 символа. Это означает что операций может быть не более 4096, если в 16-ти ричной системе.             
             Далее идут блоки. Блок может состоять из трёх частей или из четырёх.
             Первая часть - код блока.
             Второая часть всегда две цифры - длина числа, описывающего длину третьей части.
            
             Если блок стоит из из 3-х, то значит это какие то данные не более 99 символов в длину.
             Пример для параметра кол-ва таблиц или числа колонок или числа записей в таблице.
             Например 99 символов длина числа, описывающего кол-во записей в таблице - вполне достаточно.
            
             Если блок состоит из 4-х частей, то 2-я часть - это длина числа, описывающего длину 4-ой части, 
             3-я часть это длина 4-части, и 4-часть - сами данные.
             Фактичести это означает, что длина 4-ой части может описываться числом, имеющим не более 99 знаков.
             Например 1 террабайт - это 13 цифр, а 99 - это уже число галактических масштабов.
            
             Одна ячейка таблицы описывается без использования блоков. см. ниже:
            
             103   - Значение "Код операции" = 103. 103 Означает передачу DataSet.
            
             Описание DataSet.       
             002   - Тип Данных "Длина DataSet".
             11    - Кол-во символов, которое занимает атрибут "Длина DataSet"
             12345678901 - Значение "Длина DataSe".   
            
             003   - Тип Данных "Кол-во таблиц".
             01    - Кол-во символов, которое занимает атрибут "Кол-во таблиц"
             3     - Значение "Кол-во таблиц".                     
            
             004   - Тип Данных "Кол-во байт, которое занимают все таблицы".
             05    - Кол-во байт, которое занимает атрибут "Кол-во байт, которое занимают все таблицы".                             
             12345 - "Кол-во байт, которое занимают все таблицы".
             Описание Таблицы.
            
             005   - Тип Данных "Кол-во байт, которое занимает таблица".
             05    - Кол-во байт, которое занимает атрибут "Кол-во байт, которое занимает таблица"                             
             12345 - Кол-во байт, которое занимает таблица (вместе с шапкой).
            
             006   - Тип Данных "Кол-ва записей в таблице".
             03    - Кол-во символов, которое занимает атрибут "Кол-во записей в таблице"                      
             768   - Значение "Кол-во записей в таблице".
            
             007   - Тип Данных "Кол-ва полей в таблице".
             02    - Кол-во байт, которое занимает атрибут "Кол-во полей в таблице"                      
             10    - Значение "Кол-во полей в таблице".                      
            
             008   - Тип Данных "Описание полей таблицы".                                  
             04    - Кол-во байт, которое занимает атрибут "Описание полей таблицы".
             1175  - Значение Кол-во байт"Описание полей таблицы".                                   
            
             Описание полей таблицы (Название поля, Имя поля, Тип поля).
            
             009   - Тип Данных "Длина названия поля".
             01    - Кол-во байт, которое занимает атрибут "Длина названия поля"                      
             9     - Значение "Длина названия поля".                      
             ИДОбъекта - Значение "Название поля". 
            
             010   - Тип Данных "Длина имени поля".
             01    - Кол-во байт, которое занимает атрибут "Длина имени поля"                      
             2     - Значение "Длина имени поля".                      
             ID    - Значение "Имя поля".       
            
             011   - Тип Данных "Тип поля".
             01    - Кол-во байт, которое занимает атрибут "Тип поля"                      
             3     - Значение "Длина типа поля".                      
             INT   - Значение "Тип поля". 
            
             Описание записей таблицы.
             012   - Тип Данных "Таблицы без шапки".                                  
             04    - Кол-во байт, которое занимает атрибут "Таблицы без шапки".
             1175  - Значение "Таблицы без шапки".
            
             Описание одной ячейки таблицы. У неё для экономии места нет типа данных.
             01    - Кол-во байт, которое занимает атрибут "Длина значения ячейки таблицы".                    
             4     - Значение "Длина значения ячейки таблицы".                  
             AAAAA - Значение "Ячейки таблицы". 
             Для экономии места:
             Если 00, значит NULL или пустая строка, переходим к след. ячейке.  
             Если 99, значит вставляем значение предыдущей записи этого же поля. 
             (чтобы не повторять одни и теже данные, 
             если они повторяются в данном поле в записях идущих подряд).
             </summary>
             <param name="ds"></param>
             <returns></returns>
        </member>
        <member name="M:FBA.sys.StrToDataSet(System.String)">
            <summary>
            Получить DataSet из строки.
            </summary>
            <param name="inputStr"></param>
            <returns>на выходе System.Data.DataSet полученный из строки inputStr</returns>
        </member>
        <member name="M:FBA.sys.DataTableToStr(System.Data.DataTable,System.String@)">
            <summary>
            Сериализовать DataTable в строку.
            </summary>
            <param name="dt">DataTable для преобразования в строку</param>
            <param name="block5">Таблица в виде строки</param>
        </member>
        <member name="M:FBA.sys.StrToDataTable(System.Int32@,System.String@)">
            Получить DataTable из строки.
        </member>
        <member name="M:FBA.sys.DataGridViewToStr(FBA.DataGridViewFBA,System.String@)">
            Сериализовать DataGridView в строку.
        </member>
        <member name="M:FBA.sys.StrToDataGridView(FBA.DataGridViewFBA@,System.Int32@,System.String@)">
            Получить DataGridView из строки.
        </member>
        <member name="M:FBA.sys.ArrayToStr(System.String[0:,0:],System.String@,System.Int32)">
            Сериализовать Array[,] в строку.
        </member>
        <member name="M:FBA.sys.StrToArray(System.String[0:,0:]@,System.Int32@,System.String@)">
            Получить Array[,] из строки.
        </member>
        <member name="M:FBA.sys.DataTableCaption(System.Data.DataTable@,System.Int32@,System.String@,System.Int32)">
            Метод создает шапку таблицы из строки. Метод для GetDataTable.
        </member>
        <member name="M:FBA.sys.GetBlockLen(System.Int32@,System.String@,System.String@,System.Int32@)">
            Получить длину параметра.
        </member>
        <member name="M:FBA.sys.GetBlockData(System.Int32@,System.Int32,System.String@)">
            Получить значение параметра.
        </member>
        <member name="M:FBA.sys.GetBlockDataView(System.Int32@,System.Int32,System.String@)">
            Получить значение параметра для просмотра. Для тестирования.
        </member>
        <member name="M:FBA.sys.DataGridViewCap(FBA.DataGridViewFBA@,System.Int32@,System.String@,System.Int32)">
            Метод создает шапку таблицы из строки. Метод для GetDataGridView.
        </member>
        <member name="M:FBA.sys.DataTableToCSV(System.Data.DataTable,System.String,System.Boolean)">
            Сохранение DataTable в CSV.
        </member>
        <member name="M:FBA.sys.CSVToDataTable(System.Data.DataTable@,System.String,System.String@,System.Boolean)">
            Загрузка DataTable из CSV.
        </member>
        <member name="M:FBA.sys.CSVToDataTable2(System.Data.DataTable,System.String,System.String@,System.Boolean)">
            Загрузка DataTable из CSV. Второй вариант.
        </member>
        <member name="M:FBA.sys.DataGridViewToCSV(System.Windows.Forms.DataGridView,System.String)">
            Сохранение DataGridView в CSV.
        </member>
        <member name="M:FBA.sys.DataTableToExcel(System.Data.DataTable)">
            <summary>
            Открыть в Excel таблицу, открытую в DataTable.
            </summary>
            <param name="dt">DataTable</param>       
            <returns>Если успешно, то true</returns>            
        </member>
        <member name="M:FBA.sys.SetCurrentSheet``1(NPOI.XSSF.UserModel.XSSFWorkbook,``0,System.Boolean,NPOI.SS.UserModel.ISheet@,System.String@)">
            <summary>
            Команда установки текущего листа по порядковому номеру или имени листа.
            </summary>
            <param name="book"></param>
            <param name="sheetNameOrIndex"></param>  
            <param name="showMes">Показывать ошибки или нет</param>  
            <param name="sheet"></param>
            <param name="errorMes"></param>  		
            <returns>Если успешно, то true</returns> 
        </member>
        <member name="M:FBA.sys.ExcelToDataTable``1(System.String,System.Data.DataTable@,System.String@,System.Boolean,``0)">
            Загрузка одного листа Excel файла в DataTable. Если лист не указан, то берётся первый.
            Пример вызова:
            System.Data.DataTable DT;
            string ErrorMes;
            ExcelToDT(@"E:\Мусор\Отчет1_129.xlsx", out DT, out ErrorMes, true, 1);
        </member>
        <member name="M:FBA.sys.DataTableToFile(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Запись DataTable. В файл. Формат файла реализован в FBA, бинарный. 
            </summary>
            <param name="dt">Исходная таблица, которую сохраняем в файл</param>
            <param name="tableName">Произвольное название таблицы</param>
            <param name="fileName">Имя файла куда сохраняем таблицу</param>
            <param name="errorShow">Показывать ошибки, если возникнут</param>
            <returns>Если успрешно, то true</returns>
        </member>
        <member name="M:FBA.sys.FileToDataTable(System.Data.DataTable@,System.String@,System.String,System.Boolean)">
            <summary>
            Чтение сохранённого DataTable. Из файла. Процедура обратная DataTableToFile.
            </summary>
            <param name="dt">Полученный DataTable.</param>
            <param name="tableName">Прочитанное название таблицы</param>
            <param name="fileName">Имя файла куда сохраняем таблицу</param>
            <param name="errorShow">Показывать ошибки, если возникнут</param>
            <returns>Если успрешно, то true</returns>
        </member>
        <member name="M:FBA.sys.GetDataTableAsText(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            /Получить DataTable с названиями столбцов в виде списка строк.
            </summary>
            <param name="dt"></param>
            <param name="ch"></param>
            <param name="withCaptions"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.DataTableCaptionWithSeparator(System.Data.DataTable,System.String)">
            <summary>
            Получение списка колонок DT через точку с запятой. 
            </summary>
            <param name="dt">System.Data.DataTable</param>
            <param name="separator">Символ разделитель между колонками, напрмиер точка с запятой</param>
            <returns>Строка, содержащая все колонки разделённые символом разделителем</returns>
        </member>
        <member name="M:FBA.sys.SetColumnsOrder(System.Data.DataTable,System.String[])">
            <summary>
            Изменить порядок столбцов DataTable Пример: DT.SetColumnsOrder("Qty", "Unit", "Id");
            </summary>
            <param name="dt">System.Data.DataTable</param>
            <param name="columnNames">Имена колонок в строковом массиве</param>
        </member>
        <member name="M:FBA.sys.Value(System.Data.DataTable,System.String)">
            <summary>
            Получить значение поля из DataTable из первой строки. так как это часто нужно.
            </summary>
            <param name="dt">System.Data.DataTable</param>
            <param name="fieldName">Поле, значение которого нужно получить</param>
            <returns>Значение поля</returns>
        </member>
        <member name="M:FBA.sys.Value(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Получить значение поля из DataTable из строки с индексом RowIndex и полем FieldName.
            </summary>
            <param name="dt">System.Data.DataTable</param>
            <param name="rowIndex">Индекс строки</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение из ячейки в виде текста</returns>
        </member>
        <member name="M:FBA.sys.Value(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Получить значение поля из DataTable.
            </summary>
            <param name="dt">Таблица с которой получаем значение</param>
            <param name="rowIndex">Номер строки, начиная с 0</param>
            <param name="columnIndex">Номер колонки, начиная с 0.</param>
            <returns>Значение из ячейки в виде текста</returns> 
        </member>
        <member name="M:FBA.sys.DataTableReplaceQuote(System.Data.DataTable@)">
            <summary>
            Заменяем кавычки на двойные для того чтобы сохранить содержимое DataTable 
            SQL запросом в базе данных.
            </summary>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:FBA.sys.DataTableView(System.Data.DataTable,System.String,System.String)">
            <summary>
            Показ на форме таблицы DT. Пример: sys.ViewDataTable("Шапка формы", "Текст на форме", DT);
            </summary>
            <param name="dt">System.Data.DataTable</param>
            <param name="capForm">Шапка формы</param>
            <param name="capText">Подпись таблицы на форме</param>
        </member>
        <member name="M:FBA.sys.DataGridViewSetColumnWidth(FBA.DataGridViewFBA,System.String)">
            <summary>
            Установка ширины колонок грида.
            </summary>
            <param name="dg">DataGridViewFBA</param>
            <param name="columnWidthComma">Ширина колонок через запятую. Пример: 100,150,600</param>
        </member>
        <member name="M:FBA.sys.RecordSaveToFile(FBA.DirectionQuery,System.String,System.String,System.String)">
            <summary>
            Чтение из БД и запись строки DataTable в файл.
            Чтение происходит так: SELECT * FROM tableName WHERE ID = id
            В таблице должна быть колонка ID!
            </summary>
            <param name="direction">Из локальной или удалённой БД</param>
            <param name="id">ИД строки</param>
            <param name="tableName">имя таблицы, откуда читаем строку</param>
            <param name="fileName">Имя файла куда записываем</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.RecordLoadFromFile(FBA.DirectionQuery,System.String,System.Boolean,System.String@)">
            Чтение строки DataTable из файла и запись в БД.
        </member>
        <member name="M:FBA.sys.DataTable_Area_To_DataTable(System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            Копирование области из DataTable в другой DataTable.
        </member>
        <member name="M:FBA.sys.DataTable_To_DataTable(System.Data.DataTable)">
            <summary>
            Копирование DataTable в другую DataTable, включая формат колонок и все содержимое всех столбцов и строк.
            </summary>
            <param name="dtsource">DataTable которую копируем.</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.RefreshGrid_SourceGrid_MultiThread(FBA.DirectionQuery,SourceGrid.DataGrid,FBA.FilterObj,System.String,FBA.TextBoxFBA)">
            <summary>
            Многопоточная функция. Для получения данных для MSSQL, Postgre, SQLite для SourceGrid.
            Для очистки SourceGrid.DataGrid нужно передать пустой запрос (sql = "")
            </summary>
            <param name="direction">Запрос к локальной или удалённой БД</param>
            <param name="dg">SourceGrid.DataGrid</param>
            <param name="filter">Объект с настройками фильтра</param>
            <param name="sql">Запрос SQL</param>
            <param name="tbStatus">Если не null, то в этом TextBoxFBA отображается дополнительная информация</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.RefreshGrid_SourceGrid_OneThread(FBA.DirectionQuery,FBA.GridFBA,FBA.FilterObj,FBA.TextBoxFBA)">
            Функция в основном потоке для получения данных для MSSQL, Postgre, SQLite для SourceGrid.
        </member>
        <member name="M:FBA.sys.RefreshGrid``1(FBA.DirectionQuery,``0,System.String,FBA.TextBoxFBA)">
            filter - это FilterObj или string в котором SQL запрос. (Не MSQL!)
        </member>
        <member name="M:FBA.sys.RefreshGrid``1(FBA.DirectionQuery,``0,FBA.FilterObj,FBA.TextBoxFBA)">
            Функция получения данных для MSSQL, Postgre, SQLite для SourceGrid.
            Общая для нескольких типов.
            DG - это System.Windows.Forms.DataGridView, FBA.GridFBA       
        </member>
        <member name="M:FBA.sys.InsertMenuContext(System.Windows.Forms.ContextMenuStrip,System.Windows.Forms.ToolStripItem,System.Drawing.Image,System.String,System.String,System.Int32@)">
            Вставка пункта меню в ContextMenuStrip.
        </member>
        <member name="M:FBA.sys.GetSenderName(System.Object)">
            <summary>
            Получить имя компонента переданного в обработчик события как object.
            </summary>
            <param name="sender"></param>
            <returns>Имя sender</returns>
        </member>
        <member name="M:FBA.sys.GetControlNameByMenuStripItem(System.Object)">
            <summary>
            Возвращает имя компонента, на котором повешено контекстное меню. 
            </summary>
            <param name="sender">object</param>
            <returns>Имя компонента, на котором повешено контекстное меню</returns>
        </member>
        <member name="M:FBA.sys.GetControlByMenuStripItem(System.Object)">
            <summary>
            Возвращает компонент, на котором повешено контекстное меню. 
            </summary>
            <param name="sender">object</param>
            <returns>object - компонент</returns>
        </member>
        <member name="M:FBA.sys.LoadTreeFromDataTable(System.Windows.Forms.TreeView,System.Data.DataTable,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Загрузить дерево из DataTable в TreeView. В таблице DT поля ID, ParentID, Name.
            </summary>
            <param name="tv">System.Windows.Forms.TreeView</param>
            <param name="dt">System.Data.DataTable</param>
            <param name="fieldID">ID</param>
            <param name="fieldParentID">ParentID</param>
            <param name="fieldName">Значение этого поля - название узла дерева</param>
            <param name="sort">Если true, то сортировать дерево</param>
        </member>
        <member name="M:FBA.sys.AddNodes(System.Data.DataTable,System.String,System.String,System.String,System.Windows.Forms.TreeNode)">
            Метод только для LoadTreeFromDataTable.
        </member>
        <member name="M:FBA.sys.GetSQLTreeOrder">
            <summary>
            Запрос, который позволяет отстортировать список с ID и ParentID сущность fbaEntity.
            по порядку, как например в оглавлении книги. 
            </summary>
            <returns>Запрос для сортировки fbaEntity</returns>
        </member>
        <member name="M:FBA.sys.SearchNode(System.String,System.Windows.Forms.TreeNode,FBA.SearchParam,System.Boolean)">
            <summary>
            Поиск текста в дереве.
            Использование:     
            TreeNode SelectedNode = sys.SearchNode(tbFind.Text, treeViewAttr.Nodes[0]);//пытаемся найти в поле Text
               if (SelectedNode != null)
               {
                   //нашли, выделяем...
                   treeViewAttr.SelectedNode = SelectedNode;
                   treeViewAttr.SelectedNode.Expand();
                   treeViewAttr.Select();
               };
            </summary>
            <param name="searchText">Искомый текст</param>
            <param name="startNode">Узел, с которого начинать поиск</param>
            <param name="seachParam">Настройки поиска: NotAssigned, Exact, Contains, Begin, End</param>
            <param name="ignoreCase">Игнорировать регистр символов</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetEntityID(System.String)">
            Получить ИД Сущности по сокращению.
        </member>
        <member name="M:FBA.sys.GetEntityBrief(System.String)">
            Получить сокращение сущности по ИД.
        </member>
        <member name="M:FBA.sys.GetEntityName(System.String,System.String)">
            Получить имя сущности по ИД или сокращению сущности.
        </member>
        <member name="M:FBA.sys.GetFirstParentID(System.String,System.String)">
            Получить ИДОбъекта первого предка сущности.
        </member>
        <member name="M:FBA.sys.GetAttrID(System.String,System.String)">
            Получить ИД атрибута по сокращению.
        </member>
        <member name="M:FBA.sys.GetAttrBrief(System.String)">
            Получить сокращение атрибута по ИД.
        </member>
        <member name="M:FBA.sys.GetAttrName(System.String)">
            Получить имя атрибута по ИД.
        </member>
        <member name="M:FBA.sys.GetTableID(System.String)">
            Получить ИД таблицы по Имени.
        </member>
        <member name="M:FBA.sys.GetTableName(System.String)">
            Получить имя таблицы по её ИД.
        </member>
        <member name="M:FBA.sys.GetStatusID(System.String)">
            Получить ИД статуса по его имени.
        </member>
        <member name="M:FBA.sys.GetEntityTableMain(System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            Получить имя главной таблицы сущности.
             string EntityID;
            	string Table_Name;
            	string IDFieldName;
            	string Table_Type;
            	string NumLevel;
            	if (!sys.GetEntityTableMain(EntityBriefRel, out EntityID, out Table_Name, out IDFieldName, out Table_Type, out NumLevel)) return false;
        </member>
        <member name="M:FBA.sys.GetTableFields(System.String,System.Data.DataTable@)">
            Получить список полей таблицы TableName.
        </member>
        <member name="M:FBA.sys.GetEntityBriefLink(System.String,System.String)">
            Получить сокращение сущности, на которую ссылается атрибут Attr сущности EntityBrief.
        </member>
        <member name="M:FBA.sys.GetMainTableNameByEnBrief(System.String,System.String@,System.String@)">
            Получить наименование главной таблицы и наименование ключевого поля этой таблицы сущности EntityBrief.
        </member>
        <member name="M:FBA.sys.GetMainTableNameByEnID(System.String,System.String@,System.String@)">
            Получить наименование главной таблицы и наименование ключевого поля этой таблицы сущности EntityBrief.
        </member>
        <member name="M:FBA.sys.CreateParserLocalTables">
            <summary>
            Создать таблицы парсера.
            Всего есть три таблицы модели данных: 
            fbaEntity - все сущности.
            fbaAttribute - все атрибуты всех сущностей.
            fbaEntity - все таблицы всех сущностей.
            Но для работы парсера не очень удобно использовать эти три таблицы. Было бы удобнее, если бы вся информация была собрана в одной, или двух таблицах.
            В этом случае снижается сложность парсера и увеличивается скорость работы. Поэтому процедура ниже берёт эти три таблицы и на основе них создает две других таблицы,
            которые были бы удобнее для парсера. Парсер работает на этих таблицах. Это таблицы: fbaAttrParent, fbaEntityParser.
            В таблице fbaAttrParent есть вся информация по атрибутам и по таблицам с учетом вложенности сущностей в друг друга.
            Количество строк больше чем в fbaAttribute.
            Таблица fbaEntityParser - это по сути та-же самая fbaEntity, но добавлены столбца в которых проставлено имя главной таблицы парсера и другая информация по главной таблице. Количество строк такое-же как и в fbaEntity.         
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.Parse(System.String)">
            <summary>
            Преобразование кода MSQL в SQL.
            </summary>
            <param name="MSQL"></param>
            <returns>Код SQL</returns>
        </member>
        <member name="M:FBA.sys.CallO(System.String,System.String,System.Object[])">
            Вызов 1. Вызвать метод MethodName с параметрами из DLL, Form, FormMain.
            На выходе Object.
        </member>
        <member name="M:FBA.sys.CallS(System.String,System.String,System.Object[])">
            Вызов 2. Вызвать метод MethodName с параметрами из DLL, Form, FormMain.
            На выходе Object.ToString();
        </member>
        <member name="M:FBA.sys.CallFO(System.Object,System.String,System.Object[])">
            Вызов 3. Вызвать метод MethodName с параметрами из DLL, Form, FormMain.
        </member>
        <member name="M:FBA.sys.CallFS(System.Object,System.String,System.Object[])">
            Вызов 4. Вызвать метод MethodName с параметрами из DLL, Form, FormMain.
        </member>
        <member name="M:FBA.sys.GetBit(System.Int32,System.Int32)">
            <summary>
             Возвращает бит в num байте val
            </summary>
            <param name="val">Входнойбайт</param>
            <param name="num">Номербита, начинаяс 0</param>
            <returns>true-битравен 1, false- битравен 0</returns>
        </member>
        <member name="M:FBA.sys.SetBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
             Устанавливает значение определенного бита в числе INT.
            </summary>
            <param name="val">Входное значение</param>
            <param name="num">Номер бита</param>
            <param name="bit">Значение бита: true-битравен 1, false-битравен 0 </param>
            <returns>INT с измененным значением бита</returns>
        </member>
        <member name="M:FBA.sys.IntConvertTo2(System.Int32)">
            Конвертация в двоичную систему и вывод в виде строки.
        </member>
        <member name="M:FBA.sys.IntConvertFrom2(System.String)">
            Конвертация в десятичную систему из двоичной.
        </member>
        <member name="M:FBA.sys.IsInteger(System.String,System.Int32@)">
            Проверка, что строка является числом INT.
        </member>
        <member name="M:FBA.sys.IsFloat(System.String)">
            Проверка, что строка является числом c дробной частью.
        </member>
        <member name="M:FBA.sys.RoundUp(System.Decimal,System.Int32)">
            Округление в большую сторону
        </member>
        <member name="M:FBA.sys.IsEven(System.Int32)">
            Проверка на чётность числа.
        </member>
        <member name="M:FBA.sys.SendEventClientClose">
            Извещаем сервер приложений о том, что клиент закрывается. Для того чтобы освободить лицензию.    
        </member>
        <member name="M:FBA.sys.GetServerAppPort(System.String,System.String@,System.Int32@)">
            Если в имени сервера указан порт, то используетм его.
        </member>
        <member name="M:FBA.sys.GetCountRunApp(System.String)">
            <summary>
            Получить количество запущенных копий приложения с именем appName.
            </summary>
            <param name="appName"></param>
            <returns>Количество запущенных копий в Windows с именем appName</returns>
        </member>
        <member name="M:FBA.sys.GetServerLocalPort">
            Получить номер порта для локального сервера приложений.
        </member>
        <member name="M:FBA.sys.ServerAppSendHTTPMessage(System.String,System.String,System.Int32,FBA.CommandCode,System.String,System.String,System.String,System.Int32)">
            Послать сообщение на сервер приложений.
        </member>
        <member name="M:FBA.sys.GetComandCode(System.String,FBA.CommandCode@,System.String@,System.String@)">
            Код команды и GUID посылаются в строке URL, длина URL всегда фиксирована.
        </member>
        <member name="M:FBA.sys.GetRequestFile(System.Text.Encoding,System.String,System.IO.Stream,System.String)">
            Сохранить текст сообщения от клиента в файл. Сейчас не используется.
        </member>
        <member name="M:FBA.sys.GetRequestString1(System.Net.HttpListenerRequest)">
            Получить текст сообщения от клиента. Здесь полный текст, вместе со служебной информацией. Сейчас не используется.
        </member>
        <member name="M:FBA.sys.GetRequestString2(System.Text.Encoding,System.String,System.IO.Stream)">
            Получить текст сообщения от клиента. Здесь текст, но без служеной информации.
        </member>
        <member name="M:FBA.sys.GetBoundary(System.String)">
            Для разбора сообщения от клиента.
        </member>
        <member name="M:FBA.sys.IndexOf(System.Byte[],System.Int32,System.Byte[])">
            Для разбора сообщения от клиента.
        </member>
        <member name="M:FBA.sys.SM(System.String,FBA.MessageType,System.String,System.String,System.String,System.Int32)">
            <summary>
            Процедура для показа сообщения MessageBox.Show() 
            TypeMessage: Error, Information, Question, Warning, Stop, Tech или E, I, Q, W, S, T.
            Пример: if (sys.SM("Этот форма уже открыта! Переоткрыть?", MessageType.Question) == false) return; 
            </summary> 
            <param name="messageStr"></param>
            <param name="mesType"></param>
            <param name="caption"></param>
            <param name="memberName"></param>
            <param name="filePath"></param>
            <param name="lineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetStackCalls">
            <summary>
            Получить информацию по стеку вызовов методов.
            </summary>        
            <returns>Нет</returns>
        </member>
        <member name="M:FBA.sys.CopyToClipboard(System.String)">
            <summary>
            Копирование любого текста в буфер обмена.
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns>Нет</returns>
        </member>
        <member name="M:FBA.sys.SaveToFile(System.String,System.String,System.Boolean)">
            <summary>
            Сохранить текстовую переменную в файл.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="fileName">Полное имя файла с расширением куда сохраняем текст в переменной inputStr</param>
            <param name="showMes">Показывать ошибку записи на диск или нет</param> 		
            <returns>true-успешная запись в файл, false-ошибка при записи на диск</returns>
        </member>
        <member name="M:FBA.sys.AddLeftCR(System.String@)">
            <summary>
            Добавить перенос строки слева, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr c переносом строки вначале, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddLeftString(System.String,System.String)">
            <summary>
            Добавить строку слева, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="value">Строка, которую нужно добавить.</param>            
            <returns>Возвращает inputStr cо строкой value вначале, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddLeftSpace(System.String)">
            <summary>
            Добавить пробел слева, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr c ведущим пробелом, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddRightComma(System.String)">
            <summary>
            Добавить запятую, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr c запятой в конце, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddRightCR(System.String)">
            <summary>
            Добавить перенос строки справа, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr c переносом строки в конце, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddRightSpace(System.String)">
            <summary>
            Добавить пробел, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr c пробелом в конце, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddRightAND(System.String)">
            <summary>
            Добавить AND, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr AND, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddRightOR(System.String)">
            <summary>
            Добавить OR, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка</param>       
            <returns>Возвращает inputStr OR, если строка не пустая, и "" если строка inputStr пустая</returns>
        </member>
        <member name="M:FBA.sys.AddString(System.String,System.String,System.Boolean)">
            <summary>
            Добавить справа или слева произвольную строку, если строка не пустая.
            </summary>
            <param name="inputStr">Входная строка в которой проверяем наличие подстроки value</param>
            <param name="value">Строка которую добавляем</param>
            <param name="addRight">Если true, то добавляем справа, иначе слева</param>
            <returns>Возврат inputStr после добавления справа или слева value</returns>
        </member>
        <member name="M:FBA.sys.CountChar(System.String,System.Char)">
            <summary>
            Количество символа chr в строке.
            </summary>
            <param name="inputStr">Входная строка в которой проверяем наличие подстроки value</param>
            <param name="chr">символ, которорый считаем</param>
            <returns>Количество символов chr в строке inputStr</returns>
        </member>
        <member name="M:FBA.sys.InStr(System.String,System.String)">
            <summary>
            Если исходная строка содержится в value, возвращает true.
            </summary>
            <param name="inputStr">Входная строка в которой проверяем наличие подстроки value</param>
            <param name="value">Подстрока, которую ищем в inputStr</param>
            <returns>true - строка содержит inputStr, false-не содержит</returns>
        </member>
        <member name="M:FBA.sys.IsEmptyID(System.String)">
            <summary>
            Если исходная строка пустая или содержит 0, то возвращаем true.
            </summary>
            <param name="inputStr">Проверка на то что строка не null</param>
            <returns>true - строка null или пустая, false-содержит выражение</returns>
        </member>
        <member name="M:FBA.sys.IsEmpty(System.String)">
            <summary>
            Если исходная строка пустая, то возвращаем true.
            </summary>
            <param name="inputStr">Проверка на то что строка не null</param>
            <returns>true - строка null или пустая, false-содержит выражение</returns>
        </member>
        <member name="M:FBA.sys.IsIntegerStr(System.String)">
            <summary>
            Проверка, что строка является числом INT.
            </summary>
            <param name="numberStr">Строка в которой число или произвольное выращение</param>
            <returns>true - Содержимое строки является числом, false - не является</returns>
        </member>
        <member name="M:FBA.sys.IsFloatStr(System.String)">
            <summary>
            Проверка, что строка является числом Float.
            </summary>
            <param name="floatStr">Входное число в виде текста</param>
            <returns>Если число вформате float, то true, иначе false.</returns>
        </member>
        <member name="M:FBA.sys.IndexOfEx(System.String,System.String)">
            <summary>        
            Если value содержится в исходной строке, возвращает true. Поиск производится с настройкой StringComparison.OrdinalIgnoreCase.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="value">Подстрока, которую нужно проверить на вхождение.</param>
            <returns>Номер символа, ск которого найдено вхождение, если не найдено, то -1.</returns>
        </member>
        <member name="M:FBA.sys.IndexOfBool(System.String,System.String)">
            <summary>
            Узнать содержится ли подстрока в другой строке.
            Поиск с применением настройки StringComparison.OrdinalIgnoreCase.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="value">Входная строка</param>
            <returns>
            Если value содержится в исходной строке, возвращает true.       
            </returns>
        </member>
        <member name="M:FBA.sys.StrBetweenStr(System.String,System.String,System.String)">
            <summary>
            Возвращает строку, которая находится между двух строк. 
            beginStr ищется как первое вхождение.
            Если endStr не найден, то возвращает пустую строку. 
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>
            <param name="endStr">Конечная подстрока</param>
            <returns>Строка между начальной и конечной подстроками</returns>       
        </member>
        <member name="M:FBA.sys.StringBetween(System.String,System.String,System.String)">
            <summary>
            Возвращает строку, которая находится между двух строк.
            beginStr ищется как первое вхождение.
            Если endStr не найден, то возвращает пустую строку.  
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>
            <param name="endStr">Конечная подстрока</param>
            <returns>Строка между начальной и конечной подстроками</returns>      
        </member>
        <member name="M:FBA.sys.StrBetweenStr2(System.String,System.String,System.String)">
            <summary>
            Возвращает строку, которая находится между двух строк.
            beginStr ищется как первое вхождение.
            Если endStr не найден, то возвращает до конца строки.  
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>
            <param name="endStr">Конечная подстрока</param>
            <returns>Строка между начальной и конечной подстроками</returns>      
        </member>
        <member name="M:FBA.sys.StrBeweenStr3(System.String,System.String,System.String)">
            <summary>
            Возвращает строку, которая находится между двух строк.
            beginStr ищется как последнее вхождение.
            Если endStr не найден, то возвращает пустую строку. 
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>
            <param name="endStr">Конечная подстрока</param>
            <returns>Строка между начальной и конечной подстроками</returns>     
        </member>
        <member name="M:FBA.sys.StrBetweenStr4(System.String,System.String,System.String)">
            <summary>
            Возвращает строку, которая находится между двух строк, beginStr и endStr не возвращаются.
            beginStr ищется как первое вхождение.
            Если endStr не найден, то возвращает до конца строки.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>
            <param name="endStr">Конечная подстрока</param>
            <returns>Строка между начальной и конечной подстроками</returns>  
        </member>
        <member name="M:FBA.sys.StrAfterStr(System.String,System.String)">
            <summary>
            Возвращает строку, которая следует после строки beginStr.
            Если beginStr не найден, то возвращается исходная строка.    
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>   
            <returns>Строка между начальной и конечной подстроками</returns>  
        </member>
        <member name="M:FBA.sys.StrBeforeStr(System.String,System.String)">
            <summary>
            Строка между строк. 
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="beginStr">Начальная подстрока</param>
            <returns>
            Возвращает строку, которая следует до строки beginStr.
            Если beginStr не найден, то возвращается исходная строка.
            </returns>
        </member>
        <member name="M:FBA.sys.ToInt(System.Boolean)">
            <summary>
            Для типа bool. Функции ToInt(). 
            </summary>
            <param name="inputBool">Входная строка</param>
            <returns>Число, в которое преобразован переменная bool</returns>  
        </member>
        <member name="M:FBA.sys.ToInt(System.String,System.Boolean)">
            <summary>
            Для типа string. Функции ToInt(). 
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="showError">Показывать ошибку или нет</param>
            <returns>Число, в которое преобразована строка</returns>        
        </member>
        <member name="M:FBA.sys.ToInt(System.Char)">
            <summary>
            Для типа char. Функции ToInt().
            </summary>
            <param name="inputChar">Входной символ</param>
            <returns>Возвращает Convert.ToInt32(inputChar)</returns>
        </member>
        <member name="M:FBA.sys.ToShort(System.String)">
            <summary>
            Для типа string. Функции ToShort(). 
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns>Возвращает short.TryParse(inputStr, out num))</returns>
        </member>
        <member name="M:FBA.sys.ToShort(System.Char)">
             <summary>
            Для типа char. Функции ToShort(). 
             </summary>
             <param name="inputChar">Входной символ</param>
             <returns>Возвращает Convert.ToInt16(inputChar)</returns>
        </member>
        <member name="M:FBA.sys.ToBool(System.String)">
            <summary>
            Для типа string. Преобразование значения в bool. 
            Пустая строка, значение "0" или значение "false" возвращает false.
            Если "1" или "true", то результат true.
            Если проозвольное строковое значение, то попытка преобразования неуспешна - выдает ошибку.
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns>Если преобразование успешно, то результат преобрахования, если не успешно, выдает сообщение об ошибке.</returns>
        </member>
        <member name="M:FBA.sys.ToBool(System.Int32)">
            <summary>
            Для типа string. Преобразование значения в bool.
            </summary>
            <param name="inputvalue">Входная строка</param>
            <returns>Если число больше 0, то true иначе false. Ошибок не выдает.</returns>
        </member>
        <member name="M:FBA.sys.Left(System.String,System.String)">
            Для типа STRING. Функции LEFT() до указанной подстроки.
        </member>
        <member name="M:FBA.sys.Left(System.String,System.Int32)">
            <summary>
            Для типа string. Аналог функции LEFT() в SQL.
            </summary>
            <param name="inputStr">Входная строк</param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.Right(System.String,System.Int32)">
            Для типа string. Последние CountChar символов.
        </member>
        <member name="M:FBA.sys.RightChar(System.String,System.Int32)">
            <summary>
            Для типа string. Возвращает CountChar символ с конца. 
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="countChar">Количество символов</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.SubStringEnd(System.String,System.Int32,System.Int32)">
            <summary>
            Для типа string. Нормальный SubString, как в Delphi, можно указывать Length, превышающую длину inputStr.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="firstChar">Номер символа, с которого возвращать подстроку</param>
            <param name="length">Кодичество символов</param>
            <returns>Возвращает подстроку</returns>
        </member>
        <member name="M:FBA.sys.ReplaceIgnoreCase(System.String,System.String,System.String,System.Int32)">
            <summary>
            Для типа string. Замена подстроки без учета регистра. Работает, но ОЧЕНЬ медленно.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="oldStr">Строка, которую нужно заменить</param>
            <param name="newStr">Строка, на которую нужно заменить</param>
            <param name="countReplace">Количество замен. Если 0, то без ограничения.</param>
            <returns>Строку поде замены</returns>
        </member>
        <member name="M:FBA.sys.ReplaceRepeatChars(System.String,System.Char)">
            <summary>
            Для типа string. Замена повторений символа в строке. Например, можно заменить повторяющиеся пробелы на один.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="ch">Cимвол, на который будет произведена замена</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.ReplaceCharInString(System.String,System.Int32,System.Char)">
            <summary>
            Для типа string. Функция заменяет в строке символ в позиции Index на ch. Не протестировано.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="index">В какой позиции заменить символ</param>
            <param name="ch">Cимвол, на который будет произведена замена</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.DeleteCharsInString(System.String,System.String)">
            <summary>
            Возвращает строку, в которой все символы, которые в строке chars удалены.
            В параметре chars строка с символами для замены без разделителей, например abcvfwgs
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="chars">Список символов без разделителе, например abcvfwgs</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.DeleteWordsInString(System.String,System.String,System.Char)">
            <summary>
            Возвращает строку, в которой удалены все строки, которые находятся в строке words.
            В параметре words строки, разделёнными символом  ch.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="words">Список строк, разделённых символом ch</param>
            <param name="ch">Символ разделитель слов в words</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.DeleteStringsInString(System.String,System.String,System.Char)">
            <summary>
            Возвращает строку, в которой удалены все подстроки, которые находятся в строке strings.
            В параметре strings строки, разделёнными символом  ch.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="words">Список строк, разделённых символом ch</param>
            <param name="ch">Символ разделитель слов в words</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.LeaveCharsInString(System.String,System.String)">
            <summary>
            Возвращает строку, в которой все символы, которые в не находятся строке chars удалены.
            В параметре chars строка с символами, например abcvfwgs
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="chars">Список символов без разделителей, например abcvfwgs</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.FirstCharUpper(System.String)">
            <summary>
            Для типа STRING. Первую букву слова перевести в верхний регистр. Не протестировано.
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns>преобразует перов к Петров</returns>
        </member>
        <member name="M:FBA.sys.FirstCharsUpperOtherLower(System.String)">
            <summary>
            Для типа string. Первую буква всех слов перевести в верхний регистр.
            </summary>
            <param name="inputStr"></param>
            <returns>преобразует пероВ ИЛЬЯ вЛаДимирович к Петров Илья Владимирович</returns>
        </member>
        <member name="M:FBA.sys.Reverse(System.String)">
            Реверс строки. Не протестировано.
        </member>
        <member name="M:FBA.sys.RepeatString(System.String,System.Int32)">
            <summary>
            Повторить строку count раз.
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="count">Сколько раз повторять строку</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetDefaultAssemblies">
            <summary>
            Текстовая константа. Это Сборки по умолчанию, которые добавляются при создании новой формы.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetDefaultUsing">
            <summary>
            Текстовые константы. Это Пространства имен по умолчанию, которые добавляются при создании новой формы.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetDefaultProject">
            <summary>
            Текстовые константы. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetDefaultClass">
            <summary>
            Шаблон простого класса
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.QueryQuote(System.String)">
            <summary>
            Для того чтобы можно было строку посылать в качестве параметров запросов на сервер.
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.SymbolCyr2Lat(System.Char)">
            <summary>
            Транслитерация символа в латиницу.
            </summary>
            <param name="inputChar"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.StringCyr2Lat(System.String)">
            <summary>
            Транслитерация строки в латиницу.
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.StringLat2Cyr(System.String)">
            <summary>
            Транслитерация латиницы в строку.
            </summary>
            <param name="inputStr"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.StringToBase64(System.String)">
            <summary>
            Преобразовать строку в Base64.
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns>Возвращает строку, преобразованную в формат Base64</returns>
        </member>
        <member name="M:FBA.sys.Base64ToString(System.String)">
            <summary>
            Получить нормальную строку из строки Bas64. 
            </summary>
            <param name="inputStr"></param>
            <returns>Возвращает строку, преобразованную из строки формата Base64</returns>
        </member>
        <member name="M:FBA.sys.NumberSpelled(System.Int32)">
            <summary>
            Число прописью (числительное мужского рода). Не протестировано.
            </summary>
            <param name="number">Число int</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.StringOfChar(System.String,System.Int32)">
            <summary>
            Функция возвращает строку, состоящую из заданного количества одинаковых символов.		  
            Пример вызова: s := StringOfChar('...', 3). 
            Не протестировано.
            </summary>
            <param name="ch">Символ, котрый нужно повторить</param>
            <param name="count">Количество повторений</param>
            <returns>Строку, состаящую из сивола ch длиной count символов</returns>
        </member>
        <member name="M:FBA.sys.ReverseName(System.String)">
            <summary>
            Функция меняет ФИО на ИОФ. Т.е. просто меняет слова местами.
            Пример: ReverseFIO('Антонец Сергей Владимирович'); 
            Не протестировано.
            </summary>
            <param name="personName">ФИО</param>
            <returns>ИОФ - меняет слова местами</returns>
        </member>
        <member name="M:FBA.sys.SymbolRusEnglish(System.String,System.Boolean)">
            <summary>
            Меняем одинаковые по начертанию.
            Если ToEnglish = True то приводим к английской раскладке, иначе к русской.
            Пример использования: string MKBCode = SymbolRusEnglish("K02.1", true); 
            Не протестировано.
            </summary>
            <param name="inputStr">Строка в котрой нужно заменить символы одинаковые по начертанию</param>
            <param name="toEnglish">Английский или Русский язык</param>
            <returns>Строка, приведённая к указанному языку</returns>
        </member>
        <member name="M:FBA.sys.KeyboardSymbRusEnglish(System.String,System.Boolean)">
            <summary>
            Транслитерация. Меняем раскладку с английской на русскую и обратно
            Если ToEnglish = True то приводим к английской раскладке, иначе к русской.
            Пример использования: MKBCode := StrUtilsSU.KeyboardSymbRusEnglish('фыв', True);
            Не протестировано. 
            </summary>
            <param name="inputStr">Входная строка</param>
            <param name="toEnglish">Английский или Русский язык.</param>    
            <returns>Текст транслит.</returns>
        </member>
        <member name="M:FBA.sys.PersonShortName(System.String,System.String,System.String)">
            <summary>
            Из Иванов Петр Васильевич, получается Иванов П.В. 
            Не протестировано.
            </summary>
            <param name="LastName">Фамилия</param>
            <param name="FirstName">Имя</param>
            <param name="SecondName">Отчество</param>
            <returns>Возвращает Иванов П.В.</returns>
        </member>
        <member name="M:FBA.sys.NameToBrief(System.String)">
            <summary>
            Функция удаляет все ненужные символы(например пробелы) из строки
            и следующую после удаленного символа переводит в верхний регистр
            Получается преобразование из наименования в сокращение.	
            </summary>
            <param name="inputStr">Входная строка</param>
            <returns>Сокращеное наименования для модели данных</returns>
        </member>
        <member name="M:FBA.sys.CheckKPP(System.String)">
            <summary>
            Проверка КПП по регулярному выражению
            </summary>
            <param name="kpp">Значение КПП например </param>
            <returns>true - если проходит проверку, false - если не проходит проверку</returns>
        </member>
        <member name="M:FBA.sys.CheckINN(System.String)">
            <summary>
            Функция вычисляет контрольное число ИНН
            Возвращает True если ИНН
            введен правильно или False в противном случае
            В качестве параметра передается проверяемый ИНН
            Для справки: структура ИНН
                         10-ти разрядный ИНН - NNNNXXXXXC
                         12-ти разрядный ИНН - NNNNXXXXXXCC
                         где: NNNN - номер налоговой инспекции
                              XXXXX, XXXXXX - порядковый номер налогоплательщика (номер записи в госреестре)
                              C - контрольное число в 10-ти разрядном ИНН
                              CC - контрольное число в 12-ти разрядном ИНН
                                   (фактически, идущие подряд две контрольные цифры)
            </summary>
            <param name="iNNstring">ИНН для проверки</param>
            <returns>true - если проходит проверку, false - если не проходит проверку</returns>
        </member>
        <member name="M:FBA.sys.CheckOGRN(System.String)">
            <summary>
            Проверка ОГРН по контрольной цифре
            </summary>
            <param name="oGRNstring">ОГРН для проверки</param>
            <returns>true - если проходит проверку, false - если не проходит проверку</returns>
        </member>
        <member name="M:FBA.sys.ChooseWord(System.String,System.Int32)">
            <summary>
            Функция возвращает iNum-е слово из строки aString,
            или пустую строку, если такого слова нет.      
            </summary>
            <param name="inputStr">Строка, в котрой искать слово</param>
            <param name="iNum">Порядковый номер слова</param>
            <returns>Найденное слово</returns>
        </member>
        <member name="M:FBA.sys.DeleteLastComma(System.String,System.String)">
            <summary>
            Удаление последних символов, если оно равены сomma
            Пример использвания: s = DeleteLastComma('456456..', '.');
            Результат: 456456
            </summary>
            <param name="inputStr">Входная стркоа</param>
            <param name="comma">Символ-разделитель, например точка с запятой</param>
            <returns>Строка после удаления символов в конце</returns>
        </member>
        <member name="M:FBA.sys.ConverLimitToMSSQL(System.String)">
            <summary>
            Замена в запросе LIMIT на TOP.
            </summary>
            <param name="sql"></param>
            <returns>Возвращает строку, в которой слово LIMIT заменено на TOP</returns>
        </member>
        <member name="M:FBA.sys.QueryAddLimit(System.String,System.Int32)">
            <summary>
            Добавление в запрос LIMIT или TOP.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="limitRows">Количество строк</param>
            <returns>Возвращает строку, в которой слово LIMIT заменено на TOP</returns>
        </member>
        <member name="M:FBA.sys.InputValue(System.String,System.String,FBA.SizeMode,FBA.ValueType,System.String@)">
            <summary>
            Запрос ввода одной строки. 
            Пример вызова: 
            string str = "";
            if (!sys.Inputvalue("CapForm", "CapText", "TEXT", ref str)) return;
            </summary>
            <param name="capForm">Заголовок формы</param>
            <param name="capText">Подпись над текстом</param>
            <param name="sizetext">Размер текстового поля: Small или Large</param>
            <param name="valueType">Integer или String</param>
            <param name="valueText">Отображаемый текст</param>
            <returns>Если значение введено, то true</returns>
        </member>
        <member name="M:FBA.sys.InputValue2(System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Упрощённый запрос ввода двух строк.  
            string NameText  = ""; 
            string valueText = "";                   
            if (!sys.Inputvalue2("ВВедите текст", "Название:", "Текст:", ref NameText, ref valueText)) return false;
            </summary>
            <param name="capForm"></param>
            <param name="capText1">Подпись над текстом 1</param>
            <param name="capText2">Подпись над текстом 2</param>
            <param name="valueText1">Тип текста 1: Integer или String</param>
            <param name="valueText2">Тип текста 2: Integer или String</param>
            <returns>Если значение введено, то true</returns>
        </member>
        <member name="M:FBA.sys.InputValues(System.String,System.Boolean,System.Boolean,System.String[0:,0:]@)">
            <summary>
            Получить выбранное значение из списка.
            Пример вызова: 
            const string SQL = "SELECT ID, Name FROM fbaUser ORDER BY Name";
            string[,] values;
            if (!sys.Inputvalues(SQL, out values)) return false;  
            </summary>
            <param name="sql">Код запроса получения списка даных</param>
            <param name="multiSelect">Возможность множественного выбора строк</param>
            <param name="mdi">Если true, то форма выбора значений будет в режиме MDI</param>
            <param name="values">Выбранные строки</param>
            <returns>Если что-то выбрано, то true</returns>
        </member>
        <member name="M:FBA.sys.InputAttr(System.String,System.String@)">
            <summary>
            Запрос ввода строки. Пример вызова: string str = ""; if (!sys.InputAttr("List",  ref str)) return;
            </summary>
            <param name="entityID">ИД сущности</param>
            <param name="attrBrief">Сокращение атрибута</param>
            <returns>Если что-то введено, то true</returns>
        </member>
        <member name="M:FBA.sys.InputEntity(System.Boolean,System.String@,System.String@,System.String@)">
            <summary>
            Запрос ввода строки. 
            Пример вызова: 
            string entityID    = "";
            string entityBrief = "";
            string entityName  = "";
            if (!sys.InputEntity(false, false, "Договор страхования", out entityID, out EntityBrief, out EntityName)) return;          
            <param name="selectInOneClick"></param>		
            <param name="entityID"></param>		
            <param name="entityBrief"></param>		
            <param name="entityName"></param>		
            </summary>		
            <returns></returns>
        </member>
        <member name="M:FBA.sys.IsNullOrEmpty(System.String)">
            <summary>
            Метод, чтобы можно было писать вместо string.IsNullOrEmpty так: if (MyString1.IsNullOrEmpty()) ...
            Полный аналог  string.IsNullOrEmpty(value).
            <param name="value">Входная строка</param>		
            </summary>		
            <returns>true, если строка null или ""</returns>
        </member>
        <member name="M:FBA.sys.TransformValue(System.String)">
            <summary>
            При вводе списка значений добавляются кавычки и запятые.
            Это нужно для ввода на компонетах TextBox, ComboBox.
            <param name="value">Входная строка</param>		
            </summary>		
            <returns>Строка с кавычками и запятыми</returns>
        </member>
        <member name="M:FBA.sys.TruncateType(System.String,System.Boolean)">
            <summary>
            Получение типа. Вспомогательная функция. Из названия типа убирает строки "FBA." и "System.Windows.Forms."
            <param name="typeStr"></param>
            <param name="fullTruncate">Если true, то убираем и "FBA"</param>  
            </summary>		
            <returns>Строка, после исключения значений</returns>
        </member>
        <member name="M:FBA.sys.InputListValues(System.Object)">
            <summary>
            Ввод списка значений в компоненты TextBox, ComboBox, TextBoxFBA, ComboBoxFBA.
            Поднимается форма, в котрую нужно ввести значения
            </summary>
            <param name="tb">Компонент, куда вводим значения</param>        
            <returns>Нет</returns>
        </member>
        <member name="M:FBA.sys.DictionaryFill(System.String[0:,0:])">
            <summary>
            Преобразовать двумерный массив в Dictionary.  
            </summary>
            <param name="arr">Входящий двумерный массив</param>        
            <returns>Объект Dictionary</returns>
        </member>
        <member name="M:FBA.sys.GetSection(System.String,System.String)">
            <summary>
            Получение текста блока секции. 
            Метод возвращает текст между текстом  --(SectionBegin какая_то_секция) и --(SectionEnd какая_то_секция)
            Начало секции --(SectionBegin какая_то_секция)
            Конец секции --(SectionEnd какая_то_секция)
            Возвращает секцию. Если не найдено, то возвращает пустую строку. Ошибок не выдает.
            </summary>
            <param name="inputStr">Входная строка, в котром нужно найти блок текста</param>
            <param name="section">Название секции, в данном случае какая_то_секция</param>
            <returns>Текст секции</returns>
        </member>
        <member name="M:FBA.sys.GetSection(System.String[],System.String)">
            <summary>
            Получение текста блока секции. 
            Метод возвращает текст между текстом  --(SectionBegin какая_то_секция) и --(SectionEnd какая_то_секция)
            В отличие от метода  GetSection(string inputStr, string section), здесь входной параметр - это массив строк.
            Результат такой-же.        
            Начало секции --(SectionBegin какая_то_секция)
            Конец секции --(SectionEnd какая_то_секция)
            Возвращает секцию. Если не найдено, то возвращает пустую строку. Ошибок не выдает.
            </summary>
            <param name="inputStr">Входная строка, в котром нужно найти блок текста</param>
            <param name="section">Название секции, в данном случае какая_то_секция</param>
            <returns>Текст секции</returns>
        </member>
        <member name="M:FBA.sys.GetTextLength(System.String,System.Drawing.Font)">
            <summary>
             Вычисление размера текста. Шрифт (по умолчанию Arial 11), определен в sys.Common.            
             </summary>
             <param name="inputStr">Входная строка</param>
             <param name="fnt">Шрифт</param>
             <returns>Длина текста в вшрифте fnt</returns>
        </member>
        <member name="M:FBA.sys.CheckRegEx(System.String,System.String)">
            <summary>
             Проверка выражения Expression соответствия регулярному выражению Reg.               
             </summary>
             <param name="reg">Регулярное выражение</param>
             <param name="expression">Проверяемое выражение</param>
             <returns>true - соответствует, false - не соответствует</returns>
        </member>
        <member name="M:FBA.sys.ShowSolutionStringCodeCount(System.String)">
            <summary>
             Показать список файлов в решении и количество строк кода в каждом файле и общее кол-во строк кода.
             </summary>
             <param name="folderSolution">Полный пусть к папке с решением</param>      
             <returns>Вызывает ShowMessage c результатом</returns>
        </member>
        <member name="M:FBA.sys.GetSolutionFilesInfo(System.String,System.Int32@,System.Int32@,System.Text.StringBuilder@)">
            <summary>
             Получение информации о папке  файлами *.cs
             </summary>
             <param name="folderSolution">Полный пусть к папке с решением</param>  
             <param name="fileCount">Возвращает количество файлов в решении</param>  
             <param name="stringCount">Возвращает количество строк кода в решении</param>  
             <param name="fileList">Возвращает список файлов</param>  
             <returns>Сам метод значений не возвращает</returns>        
        </member>
        <member name="M:FBA.sys.GetStringCount(System.String)">
            <summary>
             Получение количества строк в текстовом файле
             </summary>
             <param name="filePath">Полный пусть к файлу</param>  
             <returns>Возвращает количество строк в файле</returns> 
        </member>
        <member name="M:FBA.sys.GetSubString(FBA.ServerType)">
            <summary>
            Строка команды SUBSTRING, в зависимости от типа сервера. Возвращает например SUBSTRING или SUBSTR.
            </summary>
            <param name="serverType">Тип сервера</param>	     
            <returns>Возвращает одно из значений SUBSTRING или SUBSTR в зависимости от типа сервера</returns>         
        </member>
        <member name="M:FBA.sys.GetISNULL(FBA.ServerType)">
            <summary>
            Получить строку ISNULL в зависимости от типа сервера
            </summary>
            <param name="serverType">Тип сервера</param>	     
            <returns>Возвращает одно из значений ISNULL или COALESCE или IFNULL в зависимости от типа сервера</returns>        
        </member>
        <member name="M:FBA.sys.TextTransform(System.String,System.Boolean)">
            <summary>
            Для разработки. Каждую строку текста обрамить кавычками.
            </summary>
            <param name="inputStr">Входная строка</param>	
            <param name="AddCR">Добавлять или нет в конце Var.CR. true - добавлять.</param>	           
            <returns>Каждая строка обрамляется кавычками</returns>    
        </member>
        <member name="M:FBA.sys.TestDateTimeMethods">
            <summary>
            Метод для теста показывает все преобразования, которые производят методы в этом модуле.
            </summary>
        </member>
        <member name="M:FBA.sys.GetDateTimeNow">
            <summary>
            Получить строку с текущей датой и временем в формате "yyyy.dd.MM HH:mm:ss"
            </summary>
            <returns>Текущее дата-время на компьютере в формате "yyyy.dd.MM HH:mm:ss"</returns>
        </member>
        <member name="M:FBA.sys.GetDateTimeLog">
            <summary>
            Получить строку с текущей датой и временем в формате "dd.MM.yyyy HH:mm:ss"
            Обычно используется для лога.
            </summary>
            <returns>Текущее дата-время на компьютере в формате "dd.MM.yyyy HH:mm:ss"</returns>
        </member>
        <member name="M:FBA.sys.DateTimeToSQLStr(System.DateTime,System.Boolean)">
            <summary>
            Получить строку с текущей датой и временем в формате yyyy-MM-dd HH:mm:ss.
            </summary>
            <param name="datetime">DateTime</param>
            <param name="addQuote">Добавлять кавычки</param>
            <returns>Возвращает в виде yyyy-MM-dd HH:mm:ss. Если addQuote=true, то добавляет кавычки 'yyyy-MM-dd HH:mm:ss'</returns>
        </member>
        <member name="M:FBA.sys.GetFormatDateTime(System.String,System.Boolean)">
            <summary>
            Получаем формат даты и времени. Попытка понять какой формат даты и/или времени передан на вход. 
            </summary>
            <param name="value">дата-время в виде строки в каком либо формате</param>
            <param name="tryFixError">Попытаться исправить ошибки в дате или времени</param>
            <returns>Формат даты-времени, который был определён</returns>
        </member>
        <member name="M:FBA.sys.IsBetween(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Проверка, что время находится между временем.
            </summary>
            <param name="time">Проверяемое время</param>
            <param name="startTime">Начало диапазона времени</param>
            <param name="endTime">Конец диапазона времени</param>
            <returns>Если время между временем, то true.</returns>
        </member>
        <member name="M:FBA.sys.IsDate(System.String)">
            <summary>
            Проверка на то что строка является датой. Способ через TryParse.
            </summary>
            <param name="value">Проверка на то, что значение является датой или временем</param>
            <returns>Если это дата-время, то true</returns>
        </member>
        <member name="M:FBA.sys.ConvertDate4Server(System.String,System.Boolean)">
            <summary>
            Конвертирование форматов дат для запросов SQL: 
            24.03.2017
            24-03-2017
            24/03/2017
            2017-03-24
            2017/03/24
            2017.03.24       
            yyyy-MM-dd HH:mm:ss
            yyyy/MM/dd HH:mm:ss
            yyyy.MM.dd HH:mm:ss
            yyyy.MM.dd HH:mm:ss.fff
            Если AddQuote = true будут добавлены кавычки. Во входящей строке также кавычки могут быть, а могут и отсутствовать.
            </summary>
            <param name="value">Строка дата-время</param>
            <param name="addQuote">Добавлять кавычки или нет</param>
            <returns>Строка дата-время в виде yyyy-MM-dd HH:mm:ss</returns>
        </member>
        <member name="M:FBA.sys.StringToDateTime(System.String)">
            <summary>
            Конвертация строки в формат DateTime. Если формат даты или времени не определён, возвращается Var.MinStateDate.
            </summary>
            <param name="value">Строка дата-время в каком либо формате</param>
            <returns>Значение типа DateTime</returns>
        </member>
        <member name="M:FBA.sys.GetDate4FileName(System.DateTime)">
            <summary>
            Получить строку с датой. Используется в именах файлов. Возвращает в формате "yyyy-MM-dd".
            </summary>
            <param name="dt">DateTime</param>
            <returns>Возвращает в формате "yyyy-MM-dd"</returns>
        </member>
        <member name="M:FBA.sys.GetDate4Report(System.DateTime)">
            <summary>
            Получить строку с датой. Обычно используется для отчетов. Возвращает в формате "dd.MM.yyyy".
            </summary>
            <param name="dt">DateTime</param>
            <returns>Возвращает в формате "dd.MM.yyyy"</returns>
        </member>
        <member name="M:FBA.sys.DateTimeConvertStr(System.String@,System.String,System.String)">
            <summary>
            Конвертирование одного формата даты-времени к другому. 
            Пример: bool result = sys.DateTimeConvertStr(str1, "24.03.2017", "yyyy-MM-dd HH:mm:ss.fff", str2);
            Если входной формат указан ошибочный, то делается попытка определить формат самостоятельно.  
            </summary>
            <param name="dateTime">dateTime в виде строки. Возвращает Строка дата-время в формате formatOUT</param>
            <param name="formatIN">Формат строки в первом параметре dateTime</param>
            <param name="formatOUT">Формат строки даты времени, в который нужно преобразовать</param>
            <returns>Если успешно, то true. Ошибок не выдает.</returns>
        </member>
        <member name="M:FBA.sys.TimeConvertStr(System.String@,System.String,System.String)">
            <summary>
            Конвертирование времени из одного формата  другой.
            </summary>
            <param name="value">Время в виде строки. переменная ref. Возвращается время в виде строки в новом формате.</param>
            <param name="formatIN">Входной формат времени</param>
            <param name="formatOUT">Выходной формат времени</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.DateTimeStrToMSSQL(System.String)">
            <summary>
            Процедура устарела. нужно в вызовах заменить её на DateTimeConvertStr. Оставлена для совместимости.
            Приведение строки даты-времени к формату: 30.05.2017 16:49:33
            </summary>
            <param name="value">Строка с латой и временем</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.DateTimeCurrent(FBA.ServerType)">
            <summary>
            Строка текущего времени, в зависимости от типа сервера. Возвращает:
            Postgre = current_timestamp     	
            MSSQL   = GetDate()        
            SQLite  = datetime(CURRENT_TIMESTAMP, 'localtime')
            </summary>
            <param name="serverType">ServerType: Postgre, MSSQL, SQLite</param>
            <returns>Одно из трёх текстовых значений</returns>
        </member>
        <member name="M:FBA.sys.SelectCurrentDateTime(FBA.ServerType)">
            <summary>
            Получить SQL для получения текущей даты на сервере.
            Postgre = SELECT current_timestamp AS CurrentDateTime   	
            MSSQL   = SELECT datetime('now', 'localtime') AS CurrentDateTime       
            SQLite  = SELECT GetDate() AS CurrentDateTime
            </summary>
            <param name="serverType">ServerType: Postgre, MSSQL, SQLite</param>
            <returns>Одно из трёх текстовых значений</returns>
        </member>
        <member name="M:FBA.sys.DateTimeFieldType(FBA.ServerType)">
            <summary>
            Получить тип поля при создании таблицы для каждого типа сервера.
            Postgre =timestamp without time zone   	
            MSSQL   = DATETIME    
            SQLite  = DATETIME
            </summary>
            <param name="serverType">ServerType: Postgre, MSSQL, SQLite</param>
            <returns>Одно из трёх текстовых значений</returns>
        </member>
        <member name="M:FBA.sys.DaysCorrectEnding(System.Int32)">
            <summary>
            Слово "день" с правильным окончанием.
            </summary>
            <param name="value">Количество дней</param>
            <returns>дней или дня или день</returns>
        </member>
        <member name="M:FBA.sys.GetTimeDiff(System.DateTime,System.DateTime)">
            <summary>
            Получить разницу во времени между DateTime1 и DateTime2 в виде 12:09:343
            </summary>
            <param name="dateTime1">Время раннее</param>
            <param name="dateTime2">Время позднее</param>
            <returns>Разница во времени в виде 12:09:343</returns>
        </member>
        <member name="M:FBA.sys.GetDateDiff(System.DateTime,System.DateTime)">
            <summary>
            Получить разницу во времени между DateTime1 и DateTime2 в виде: 1 Days, 2 Hours, 3 Minutes, 4 Seconds   
            </summary>
            <param name="dateTime1">Время раннее</param>
            <param name="dateTime2">Время позднее</param>
            <returns>Разница во времени в виде: 1 Days, 2 Hours, 3 Minutes, 4 Seconds  </returns>
        </member>
        <member name="M:FBA.sys.GetSecDiff(System.DateTime,System.DateTime)">
            <summary>
            Получить разницу во времени в секундах между DateTime1 и DateTime2 в виде 7343
            </summary>
            <param name="dateTime1">Время раннее</param>
            <param name="dateTime2">Время позднее</param>
            <returns>Разница во времени в виде целого числа секунд</returns>
        </member>
        <member name="M:FBA.sys.GetMSecDiff(System.DateTime,System.DateTime)">
            <summary>
            Получить разницу во времени в милисекундах между DateTime1 и DateTime2 в виде 7343
            </summary>
            <param name="dateTime1">Время раннее</param>
            <param name="dateTime2">Время позднее</param>
            <returns>Разница во времени в милисекундах</returns>
        </member>
        <member name="M:FBA.sys.#cctor">
            <summary>
            Конструктор статического класса.
            </summary>
        </member>
        <member name="M:FBA.sys.IsAdmin(System.String)">
            <summary>
            Проверка на то, что пользователья является администртором БД.
            </summary>        /// <param name="login">Логоин системы FBA</param>
            <returns>Если роль = Admin, то true</returns>
        </member>
        <member name="M:FBA.sys.AddAdmin">
            <summary>
            Заводим пользователя admin, если его ещё нет в базе.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.sys.GetUserID(System.String,System.String)">
            <summary>
            Проверяем наличие пользователя в удаленной базе.
            </summary>
            <param name="login">Логин системы FBA</param>
            <param name="pass">Пароль системы FBA</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.UserRight(System.String)">
            <summary>
            Проверка наличия права у Пользователя.
            </summary>
            <param name="rightBrief"></param>
            <returns>Если право есть, то true</returns>
        </member>
        <member name="M:FBA.sys.IsUserProjectGrant(System.String)">
            <summary>
            Проверка прав на проект у пользователя.
            </summary>
            <param name="projectName">Имя проекта</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.ShowDirectorySimple(System.String,System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Простой показ справочника, остальные параметры по умолчанию.      
            </summary>
            <param name="entityBrief">Cущность,которую показываем.</param>
            <param name="formProject">Это имя DLL, где находится форма свойств с именем FormName. Форма свойств появляется при двойном клике на строке грида.</param>
            <param name="formName">Имя самой формы свойства объекта. Если в DLL всего одна форма, то formProject и formName совпадают.</param>
            <param name="objectID">ИД объекта, которые будет выделено по умолчанию</param>
            <param name="listObjectID">Список ИД объектов, которые показываем</param>
            <param name="customSQL">Произвольный текст запроса SQL</param>
            <param name="customMSQL">Произвольный текст запроса MSQL</param>
            <returns>Форма справочника тип FormFBA</returns>
        </member>
        <member name="M:FBA.sys.ErrorCheck(System.Boolean,System.String)">
            <summary>
            Для сокращения строк кода. Проверка на условие. Пример: 
            if (ErrorCheck(!File.Exists(fileName), "File not found: " + fileName)) return false;
            </summary>
            <param name="condition">Условие</param>
            <param name="errorMes">Сообщение об ошибке</param>
            <returns></returns>
        </member>
        <member name="M:FBA.sys.GetTextTableToDatabase(FBA.ServerType,System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Получение текста DROP TABLE, CREATE TABLE, INSERT для копирования таблицы DT на сервер. DatabaseType: MSSQL, Postgre, SQLite. 
            </summary>
            <param name="serverType">Тип сервера: SQLite, MSSQL, Postgre</param>
            <param name="tableName">Имя таблицы на сервере</param>
            <param name="dt">DataTable которая будет копироваться</param>
            <param name="createTable">Если true, то добавится код удаления таблицы, если такая уже есть</param>
            <returns>Код SQL создания таблицы на сервере и INSERTы для всех записей из DataTable</returns>
        </member>
        <member name="M:FBA.sys.CopyDataTableToLocalTable(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Копирование таблицы DT в локальную БД SQLite в таблицу с именем TableName. 
            </summary>
            <param name="tableName">Имя таблицы в базе SQLite</param>
            <param name="dt">DataTable которая будет копироваться</param>
            <param name="createTable">Если true, то добавится код удаления таблицы, если такая уже есть</param>
            <returns>Код SQL создания таблицы в базе SQLite и INSERTы для всех записей из DataTable</returns>
        </member>
        <member name="M:FBA.sys.GetTextDropTable(FBA.ServerType,System.String)">
            <summary>
            Получение текста DROP TABLE. DatabaseType: MSSQL, Postgre, SQLite.
            </summary>
            <param name="serverType">Тип сервера: SQLite, MSSQL, Postgre</param>
            <param name="tableName">Имя таблицы на сервере, которую нужно удалить, если такая уже есть</param>
            <returns>Запрос SQL для удаления таблицы, если есть</returns>
        </member>
        <member name="M:FBA.sys.GetTextCreateTable(FBA.ServerType,System.String,System.Data.DataTable)">
            <summary>
            Получение текста CREATE TABLE. DatabaseType: MSSQL, Postgre, SQLite.
            </summary>
            <param name="serverType">Тип сервера: SQLite, MSSQL, Postgre</param>
            <param name="tableName">Имя таблицы на сервере, которую нужно создать</param>
            <param name="dt">DataTable которая будет копироваться</param>
            <returns>Получение CREATE TABLE и INSERT для копирования таблицы DT на сервер.</returns>
        </member>
        <member name="M:FBA.sys.GetTextInsertTable(FBA.ServerType,System.String,System.Data.DataTable)">
            <summary>
            Получение текста INSERT для вставки записей в таблицу в БД из таблицы DT.
            </summary>
            <param name="serverType">Тип сервера: SQLite, MSSQL, Postgre</param>
            <param name="tableName">Имя таблицы на сервере, которую нужно создать</param>
            <param name="dt">DataTable которая будет копироваться</param>
            <returns>Получение INSERT для копирования таблицы DT на сервер.</returns>
        </member>
        <member name="M:FBA.sys.GetDefaultRowCount(System.String@)">
            <summary>
            Получение значения по умолчанию - количество строк для отображения.
            </summary>
            <param name="rowCount">Количество строк для отображения</param>
            <returns>Если удалось получить, то true</returns>
        </member>
        <member name="M:FBA.sys.ControlEnableDisable(System.Windows.Forms.Control)">
            <summary>
            Метод для установки Enable/Disable компонента - разбор свойства компонента GroupEnabled.      
            Пример вызова: Var.controlEnableDisable(PanelFilter);
            </summary>
            <param name="form">Начальный контрол, на котором нужно проводить поиск всех компонентов.</param>
        </member>
        <member name="M:FBA.sys.ControlEnableDisable2(System.Windows.Forms.Control,System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Метод исключительно для ControlEnableDisable.
            для установки Enable/Disable компонента - разбор свойства компонента GroupEnabled.
            </summary>
            <param name="form">Форма, на которой нужно изменить Enable/Disable для компонентов</param>
            <param name="controls">Набор контролов</param>
        </member>
        <member name="M:FBA.sys.GetInsertID(FBA.DirectionQuery)">
            <summary>
            Получить код для получения ID вставленной/изменённой записи.
            Postgre: ; RETURNING id;                     
            MSSQL: ; SELECT @@IDENTITY AS id;                                         
            SQLite: ; SELECT last_insert_rowid() AS id;
            </summary>
            <param name="direction">Локальная или удалённая БД</param>
            <returns>Код SQL</returns>
        </member>
        <member name="M:FBA.sys.ParseTag(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Парсим Tag контрола. 
            Пример: ParseTag("Main1.Страхователь.ИНН;SAVE", out QueryName, out Attr, out Setting);
            На выходе: QueryName = Main1, Attr = Name, AttrLokkup = ИНН, Setting = SAVE
            </summary>
            <param name="tagStr"></param>
            <param name="queryName"></param>
            <param name="attr"></param>
            <param name="attrLookup"></param>
            <param name="setting"></param>
        </member>
        <member name="T:FBA.SysComboStatus">
            ComboBox для изменения статуса объекта.
        </member>
        <member name="M:FBA.SysComboStatus.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.SysComboStatus.LoadStatusList(System.String,System.String,System.String)">
            <summary>
            Загрузить в ComboBox список доступных статусов для объекта сущности EntityBrief,
            который находится в статусе StatusName.
            </summary>
            <param name="entityBrief">Сокращение сущности, для которой нужно загрузить список доступных статусов</param>
            <param name="objectID">ИД Объекта</param>
            <param name="statusName">Имя статуса, которое будет показано в компоненте</param>
        </member>
        <member name="M:FBA.SysComboStatus.btnHistory_Click(System.Object,System.EventArgs)">
            Кнопка - показать историю изменения статуса объекта.
        </member>
        <member name="M:FBA.SysComboStatus.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="T:FBA.CompAttrTreeFBA">
            <summary>
            Компонент выбора атрибута модели данных.   
            </summary>
        </member>
        <member name="F:FBA.CompAttrTreeFBA.AttrBrief">
            <summary>
            Сокращение атрибута
            </summary>
        </member>
        <member name="F:FBA.CompAttrTreeFBA.EntityBrief">
            <summary>
            Сокращение сущности
            </summary>       
        </member>
        <member name="F:FBA.CompAttrTreeFBA.EntityRefID">
            <summary>
            ИД сущности атрибута
            </summary>
        </member>
        <member name="M:FBA.CompAttrTreeFBA.OnSelectedAttr(FBA.SelectAttrEventArgs)">
            <summary>
            Событие выбора атрибута в дереве.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FBA.CompAttrTreeFBA.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.CompAttrTreeFBA.ParseAttrBrief(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Получаем все данные по атрибуту.
            </summary>
            <param name="attr">Строка с атрибутом</param>
            <param name="attrBrief">Сокращение атрибута</param>
            <param name="attrName">Наименование атрибута</param>
            <param name="attrMask">Маска атрибута</param>
        </member>
        <member name="M:FBA.CompAttrTreeFBA.ParseAttrTag(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            Разделяем параметр на несколько, по разделютелю точка с запятой.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.GetImageIndex(System.String,System.String,System.String)">
            Определяем картинку для узла.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.AddSysAttrOne(System.Windows.Forms.TreeNode,System.String,System.String)">
            Добавление элемента в дерево.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.AddSysAttrList(System.Windows.Forms.TreeNode)">
            Добавление системных атрибутов в каждую сущность. 
        </member>
        <member name="M:FBA.CompAttrTreeFBA.TreeViewAttrAfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            Для ускорения загрузки дерева, отключаем/включаем прорисовку.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.TreeViewAttrBeforeExpand(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            Наполнение узла происходит только в момент раскрытия узла по крестику.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.TreeViewAttrDoubleClick(System.Object,System.EventArgs)">
            Двойной клик - выбор элеменат дерева (атрибута) и срабатывание события выбора.
            Перед двойным кликом срабатывает одинарный, поэтому AttrBrief уже заполнен.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.TreeViewAttrAfterSelect(System.Object,System.EventArgs)">
            Одинарный клик - выбор элеменат дерева (атрибута)
        </member>
        <member name="M:FBA.CompAttrTreeFBA.GetWHERE">
            Получение фильтра для отображения атрибутов.
        </member>
        <member name="M:FBA.CompAttrTreeFBA.LoadAttrTree(System.String)">
            <summary>
            Загрузить дерево сущностей.Здесь происходит наполнение только корневого узла дерева.
            т.е. список сущностей. Остальные узлы наполняются в TreeViewAttrBeforeExpand.
            </summary>
            <param name="entityRefID">Ссылка на сущность</param>
        </member>
        <member name="M:FBA.CompAttrTreeFBA.cmMenu_N1_Click(System.Object,System.EventArgs)">
            <summary>
            Контекстное меню на дереве атрибутов.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:FBA.CompAttrTreeFBA.treeViewAttr">
            <summary>
            Сделано public для доступности из вызывающего класса.
            </summary>
        </member>
        <member name="M:FBA.CompAttrTreeFBA.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="E:FBA.CompAttrTreeFBA.SelectedAttr">
            <summary>
            Cобытие выбора атрибута
            </summary>
        </member>
        <member name="T:FBA.AttrEventHandler">
            <summary>
            Для выбора атрибута
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:FBA.SelectAttrEventArgs">
            <summary>
            Событие выбора атрибута
            </summary>
        </member>
        <member name="M:FBA.SelectAttrEventArgs.#ctor(System.String)">
            <summary>
            Для выбора атрибута
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="P:FBA.SelectAttrEventArgs.NewAttr">
            <summary>
            Выбранный атрибут
            </summary>
        </member>
        <member name="T:FBA.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FBA.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FBA.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FBA.Resource.Add_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Add_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.arrt_base_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_array_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_basic_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_calc_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_hist_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_in_name_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_key_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_link_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_not_hist_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_parent_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_sys_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_this_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_unilink_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_unilink2_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.attr_usual_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Back_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.block_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.bricks_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.bullet_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.bullet_delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Cancel_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Card_add_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Collapse_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Collapse2_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Connection_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.CopyToUser_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Danger_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Del_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Del_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Delete_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Down_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Down_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Edit_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Edit_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Error_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Example_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Expand_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Expand2_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.ExportExcel_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Filter_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Filter_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Find_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Folder_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.folder_add_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.forms_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Forward_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Grid_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.hist_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Information_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.method_1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.method_2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.method_3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.method_4">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.method_5">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.method_6">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.New_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.New_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Next_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.no_data">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.no_foto_1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.OK_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Prev_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.prop_16_2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Properties_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Question_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Refresh_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Refresh_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Remove_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.ruby_48">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Save_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Save_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.SaveAs_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.SaveCSV_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Script_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Search_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Search_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.SetGlobal_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Stop_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Stop_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.table_hist_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.table_rel_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Test_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.unblock_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.UnSetGlobal_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Up_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Up_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Use_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Warning_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:FBA.Resource.Yes_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:FBA.Var">
            <summary>
            Статический класс. Переменные для всего решения, в том числе и для прикладного кода.
            </summary>
        </member>
        <member name="F:FBA.Var.CR">
            <summary>
            Перенос строки \r\n;
            </summary>
        </member>
        <member name="F:FBA.Var.TAB">
            <summary>
            Табуляция \t 
            </summary>
        </member>
        <member name="F:FBA.Var.SystemName">
            <summary>
            Имя системы с помощью которой вошли. ClientApp, ServerApp, Unility
            </summary>
        </member>
        <member name="F:FBA.Var.ShowMes">
            <summary>
            /Показывать сообщения sys.SM.
            </summary>
        </member>
        <member name="F:FBA.Var.ApplicationVersion">
            <summary>
            Версия сборки sys. пределяется как Assembly.GetExecutingAssembly().GetName().Version.ToString()
            </summary>
        </member>
        <member name="F:FBA.Var.Args">
            <summary>
            Параметры, переданные в EXE файл при запуске.
            </summary>
        </member>
        <member name="F:FBA.Var.conLite">
            <summary>
            Соединение для локальной SQLite.  
            </summary>
        </member>
        <member name="F:FBA.Var.con">
            <summary>
            Соединение для запросов к пользовательским данным. Это основное соединение.		             
            </summary>
        </member>
        <member name="F:FBA.Var.UserID">
            <summary>
            ИД текущего пользователя. Данные с которыми был выполнен вход.   
            </summary>
        </member>
        <member name="F:FBA.Var.UserLogin">
            <summary>
            Логин текущего пользователя. Данные с которыми был выполнен вход. 
            </summary>
        </member>
        <member name="F:FBA.Var.UserName">
            <summary>
            Имя текущего пользователя. Данные с которыми был выполнен вход.
            </summary>
        </member>
        <member name="F:FBA.Var.UserPass">
            <summary>
            Пароль текущего пользователя. Данные с которыми был выполнен вход.  
            </summary>        
        </member>
        <member name="F:FBA.Var.RoleID">
            <summary>
            ИД роли пользователя. Множественные роли пользователя не поддерживаются.
            </summary>
        </member>
        <member name="F:FBA.Var.RoleBrief">
            <summary>
            Сокращение роли пользователя. Данные с которыми был выполнен вход.  
            </summary>
        </member>
        <member name="F:FBA.Var.UserIsAdmin">
            <summary>
            /Признак того что пользователь является администратором.
            </summary>
        </member>
        <member name="F:FBA.Var.enterMode">
            <summary>
            Тестовый режим (Test, рабочий режим работы Work, разработка Dev. Выбор: тестовые модули кода или рабочие. 
            Если разработка, то запуск без проверки версии модулей.
            </summary>
        </member>
        <member name="F:FBA.Var.ComputerName">
            <summary>
            ComputerName = Environment.MachineName;
            </summary>
        </member>
        <member name="F:FBA.Var.ComputerUserName">
            <summary>
            ComputerUserName = SystemInformation.UserName
            </summary>
        </member>
        <member name="F:FBA.Var.LocalHost">
            <summary>
            LocalHost = System.Net.Dns.GetHostName(); 
            </summary>
        </member>
        <member name="F:FBA.Var.LocalIP">
            <summary>
            LocalIP = GetLocalIPv4(System.Net.Dns.GetHostName())
            </summary>
        </member>
        <member name="F:FBA.Var.ServerAppPortDefault">
            <summary>
            Порт для обмена сообщениями по умолчанию при посылке запросов от клиента серверу По умолчанию ServerAppPortDefault = 7145.
            </summary>
        </member>
        <member name="F:FBA.Var.LocalServerPort">
            <summary>
            Порт для обмена сообщениями по умолчанию при посылке от удаленного сервера App этому клиенту. По умолчанию LocalServerPort = 7145.           
            </summary>
        </member>
        <member name="F:FBA.Var.MaxThreadsCount">
            <summary>
            Количество потоков по 4 на каждый процессор. MaxThreadsCount = Environment.ProcessorCount * 4
            </summary>
        </member>
        <member name="F:FBA.Var.MinThreadsCount">
            <summary>
            Минимальное Количество потоков. MinThreadsCount = 2    
            </summary>
        </member>
        <member name="F:FBA.Var.ProjectMainName">
            <summary>
            Название проекста, котрый стартует.   
            </summary>        
        </member>
        <member name="F:FBA.Var.FormMainObj">
            <summary>
            Ссылка на первую форму-контейнер MDI. 
            </summary>
        </member>
        <member name="F:FBA.Var.DateTimeStart">
            <summary>
            Время когда запущен клиент.
            </summary>
        </member>
        <member name="F:FBA.Var.QueryTimeout">
            <summary>
            Настройка времени выполнения запросов. Максимальное время. Если превышает, то ошибка.
            </summary>        
        </member>
        <member name="F:FBA.Var.font1">
            <summary>
            Шрифт первый, общесистемный
            </summary>
        </member>
        <member name="F:FBA.Var.font2">
            <summary>
            Шрифт второй, общесистемный
            </summary>
        </member>
        <member name="F:FBA.Var.FontTableHeader">
            <summary>
            Шрифт заголовков таблицы.
            </summary>
        </member>
        <member name="F:FBA.Var.MinStateDate">
            <summary>
            По умолчанию первая дата.
            </summary>
        </member>
        <member name="F:FBA.Var.MinStateDateSQL">
            <summary>
            По умолчанию дата для SQL запросов.
            </summary>
        </member>
        <member name="F:FBA.Var.DefaultRowCount">
            <summary>
            Количество строк для отображения в таблицах по умолчанию. В настрйоках гибких таблиц перекрывается.
            </summary>
        </member>
        <member name="F:FBA.Var.FormSearchParam">
            <summary>
            Текстовая переменная в которой через ; перечислены все поднятые в настоящий момент формы поиска.
            </summary>
        </member>
        <member name="F:FBA.Var.IsDesignMode">
            <summary>
            Определяем, что мы в режиме конструктора.
            </summary>
        </member>
        <member name="F:FBA.Var.ListForm">
            <summary>
            Список форм. Проблема в том, что если форма скрывается (Hide, Visible = False), 
            то её потом нельзя найти в списке Application.OpenForms.
            Поэтому приходится вести учет открытых форм самостоятельно.
            </summary>
        </member>
        <member name="F:FBA.Var.SystemSysLocal">
            <summary>
            Переменная SystemSysLocal, говорит о том что все системные таблицы
            (те, которые нужны для работы сервера приложений, такие как fbaUser, Role, Form, и др.)
            находятся в базе SQLite сервера приложений, а не в БД, в которой храняться все пользовательские данные.
            Для доступа к системным таблицам всегда нужно использовать соединение Var.conSys.   
            </summary>
        </member>
        <member name="F:FBA.Var.scrteenWorkingArea">
            <summary>
            Прямоуголник рабочей области основного экрана приложения
            </summary>
        </member>
        <member name="F:FBA.Var.scrteenWorkingWidth">
            <summary>
            Ширина рабочей области основного экрана приложения
            </summary>
        </member>
        <member name="F:FBA.Var.scrteenWorkingHeight">
            <summary>
            Высота рабочей области основного экрана приложения
            </summary>
        </member>
        <member name="T:FBA.Error">
            <summary>
            Статический класс. Необходим для описания глобальных переменных по работе с ошибками.        
            </summary>
        </member>
        <member name="F:FBA.Error.LastDateTimeSendError">
            <summary>
            Дата-время когда была послана последняя ошибка на сервер. Если просто более 1 мин. то можно посылать заново. Иначе слишком много ошибок можно нечаянно послать.            
            </summary>
        </member>
        <member name="F:FBA.Error.SaveError">
            <summary>
            Сохранять в принципе ошибку на сервере или нет. Включаем только в момент соединения с удаленным сервером.
            </summary>
        </member>
        <member name="F:FBA.Error.SaveScreenshot">
            <summary>
            Сохранять скриншот ошибки на сервере или нет.
            </summary>
        </member>
        <member name="F:FBA.Error.CompressRatio">
            <summary>
            Степень сжатия скриншота ошибки. 1 - самое низкое, 100 - самое высокое.
            </summary>
        </member>
        <member name="F:FBA.Error.ErrorsSentCount">
            <summary>
            /Количество отправленных ошибок на сервер с момента старта программы.
            </summary>		
        </member>
        <member name="F:FBA.Error.ErrorsCount">
            <summary>
            /Количество возникших в программе ошибок с момента старта программы. 
            </summary>
        </member>
        <member name="F:FBA.Error.SecBetweenSendError">
            <summary>
            Количество секунд между ошибками, которые нужно посылать на сервер. Потому что если посылать все ошибки подряд - это будет много, если они например возникают в цикле.
            </summary>
        </member>
        <member name="M:FBA.Error.SendErrorToServer(System.String,System.String)">
            <summary>
            Послать ошибку на сервер.
            </summary>
            <param name="errorMes">Текст ошибки</param>
            <param name="additionalInfo">Дополнительная информация</param>
        </member>
        <member name="M:FBA.Error.GetSystemInfo">
            <summary>
            Информация о системе
            </summary>
            <returns>Список строк с информацией о систеиме.</returns>
        </member>
        <member name="T:FBA.FBAPath">
            <summary>
            Статический класс. Все служебные папки всей системы. 
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathMain">
            <summary>
            Папка для файлов платформы
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathRoot">
            <summary>
            Path.GetDirectoryName(Path.GetDirectoryName(PathMain))
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathApp">
            <summary>
            Папка для прикладных форм. PathApp = PathRoot + @"\App\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathAdditional">
            <summary>
            PathAdditional = PathRoot + @"\Additional\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathLog">
            <summary>
            PathLog = PathRoot + @"\Log\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathTemp">
            <summary>
            PathTemp = PathRoot + @"\Temp\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathUpdate">
            <summary>
            PathUpdate = PathRoot + @"\Update\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathRollback">
            <summary>
            PathRollback = PathRoot + @"\Rollback\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathSettings">
            <summary>
            PathSettings = PathRoot + @"\Settings\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathSQL">
            <summary>
            PathSQL = PathRoot + @"\SQL\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathForms">
            <summary>
            PathForms = PathRoot + @"\Forms\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathDevelop">
            <summary>
             PathDevelop = @"..\..\..\..\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathTemplate">
            <summary>
            PathTemplate = PathRoot + @"\Template\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.PathDebug">
            <summary>
            Папка проекта Debug. PathDebug = @"..\..\"; 
            </summary>
        </member>
        <member name="F:FBA.FBAPath.FileHelp">
            <summary>
            Файл справки. PathHelp = PathRoot + @"\Help\chm\"
            </summary>
        </member>
        <member name="F:FBA.FBAPath.FileDocumentation">
            <summary>
            Файл описаний классов платформы.
            </summary>
        </member>
        <member name="M:FBA.FBAPath.CheckPath">
            <summary>
            Проверка наличия путей. При запуске клиента.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FBA.CommandCode">
            <summary>
            Команды от клиента серверу приложений, список возможных команд:
            Все возможные типы сообщений между сервером и клиентом.
            Список кодов сообщений. CommandCode - Команда от клиента, список возможных команд:
            Команда начинающиеся на C - это команда клиента серверу.
            Команда начинающиеся на S - Команды от сервера приложений к клиенту.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.NotAssigned">
            <summary>
            Не определено
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C101">
            <summary>
            Запись в темповую папку файла, присланного от клиента.  
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C102">
            <summary>
            Добавить в список клиентов LocalIP, LocalHost, ComputerName, ComputerUserName и вернуть GUID для клиента и настройки подключения.
            102. Запрос подключения. Добавить в список клиентов LocalIP, LocalHost, ComputerName, ComputerUserName и вернуть GUID для клиента и настройки подключения.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C103">
            <summary>
            Выполнить запрос SELECT и вернуть таблицу результата.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C104">
            <summary>
            Выполнить запрос EXEC и вернуть ID последней изменённой записи.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C105">
            <summary>
            Выполнить процедуру произвольного модуля и вернуть результат.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C106">
            <summary>
            Клиент извещает сервер приложений, о том что он закрывается.   
            </summary>
        </member>
        <member name="F:FBA.CommandCode.C107">
            <summary>
            Клиент запрашивает доступный порт для запуска локального сервера  HTTP.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.S201">
            <summary>
            Закрытие клиента. Без всяких вопросов. 201. Команда клиенту закрыться.  
            </summary>
        </member>
        <member name="F:FBA.CommandCode.S202">
            <summary>
            MessageType.Error Сообщение от администратора"	    
            </summary>
        </member>
        <member name="F:FBA.CommandCode.S203">
            <summary>
            MessageType.Information Сообщение от администратора" Команда клиенту показать сообщение Information.   
            </summary>
        </member>
        <member name="F:FBA.CommandCode.S204">
            <summary>
            MessageType.Question Вопрос от администратора" пока не работает.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.S205">
            <summary>
            Проверка гуида клиента. Верное ли значение на сервере приложений.
            Команда клиенту вернуть гуид. Для проверки - верное ли значение на сервере приложений. (команда проверки существования клиента. Клиент должен ответить.
            </summary>
        </member>
        <member name="F:FBA.CommandCode.S209">
            <summary>
            Команда клиенту вернуть гуид. Для проверки - верное ли значение на сервере приложений. (команда проверки существования клиента. Клиент должен ответить.
            </summary>	    
        </member>
        <member name="F:FBA.CommandCode.S210">
            <summary>
            Возвращаем только GUID соединения и тип СУБД.
            </summary>
        </member>
        <member name="T:FBA.ErrorCode">
            <summary>
            Все возможные типы ошибок.
            C - что это ошибка на клиенте. S - на сервере
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.C115">
            <summary>
            Ошибка запуска локального сервера HTTP
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.C116">
            <summary>
            Ошибка запуска локального сервера HTTP
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.C117">
            <summary>
            Остановка локального сервера
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.C118">
            <summary>
            Ошибка при получении сообщения локальным сервером
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.C119">
            <summary>
            Ошибка локального сервера
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S501">
            <summary>
            Ошибка. Сессия с сервером не найдена!
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S502">
            <summary>
            Ошибка выполнения запроса       
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S503">
            <summary>
            Ошибка авторизации
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S504">
            <summary>
            Ошибка при выполнении кода на сервере
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S505">
            <summary>
            Ошибка отправки сообщения клиенту
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S506">
            <summary>
            Ошибка отправки сообщения клиенту  
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S507">
            <summary>
            Ошибка проверки количества лицензий
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S508">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S509">
            <summary>
            Ошибка преробразования даты
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S510">
            <summary>
            Ошибка преробразования даты
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S511">
            <summary>
            Ошибка преробразования даты		     
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S601">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S602">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S603">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S604">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S605">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S606">
            <summary>
            Ошибка проверки лицензии
            </summary>		
        </member>
        <member name="F:FBA.ErrorCode.S607">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S608">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S609">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S610">
            <summary>
            Ошибка проверки лицензии
            </summary>
        </member>
        <member name="F:FBA.ErrorCode.S611">
            <summary>
            Ошибка проверки лицензии
            </summary>		
        </member>
        <member name="T:FBA.MessageType">
            <summary>
            Все возможные типы сообщений.
            </summary>
        </member>
        <member name="F:FBA.MessageType.Error">
            <summary>
            Ошибка
            </summary>
        </member>
        <member name="F:FBA.MessageType.SystemError">
            <summary>
            Системная ошибка. В этом случае к выводимому сообщению добавляется дополнительная информация.
            </summary>
        </member>
        <member name="F:FBA.MessageType.ErrorQuestion">
            <summary>
            Ошибка и нужно ответить на вопрос
            </summary>
        </member>
        <member name="F:FBA.MessageType.Stop">
            <summary>
            Другой Значок, чем у сообщения Ошибка и системная ошибка
            </summary>	    
        </member>
        <member name="F:FBA.MessageType.Information">
            <summary>
            Выаод информации, не требует от пользователя принятия решения.
            </summary>
        </member>
        <member name="F:FBA.MessageType.Warning">
            <summary>
            Значок восклицательный знак
            </summary>
        </member>
        <member name="F:FBA.MessageType.Question">
            <summary>
            Вопрос пользователю
            </summary>
        </member>
        <member name="T:FBA.ServerType">
            <summary>
            Все поддерживаемые сервера: NotAssigned, MSSQL, Postgre, SQLite, ServerApp, Auto
            </summary>
        </member>
        <member name="F:FBA.ServerType.NotAssigned">
            <summary>
            Не определено
            </summary>
        </member>
        <member name="F:FBA.ServerType.MSSQL">
            <summary>
            MS SQL Server
            </summary>
        </member>
        <member name="F:FBA.ServerType.Postgre">
            <summary>
            PostgreQL
            </summary>
        </member>
        <member name="F:FBA.ServerType.SQLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="F:FBA.ServerType.ServerApp">
            <summary>
            Если  подключение производится к серверу приложений.
            Притом, если подключение будет осуществляться напрямую, то сервер приложений сообщит тип используемого серовера клиенту.
            </summary>	    
        </member>
        <member name="F:FBA.ServerType.Auto">
            <summary>
            Если Auto, то тип сервера брать с глобальной переменной sys.ServerType
            </summary>
        </member>
        <member name="T:FBA.TypeQuery">
            <summary>
            Тип запроса к серверу приложений: NotAssigned, SELECT, EXEC
            </summary>
        </member>
        <member name="F:FBA.TypeQuery.SELECT">
            <summary>
            Сервер что-то возвращает
            </summary>
        </member>
        <member name="F:FBA.TypeQuery.EXEC">
            <summary>
            Выполнение запроса без возвращаемого результата
            </summary>
        </member>
        <member name="T:FBA.Operation">
            <summary>
            Тип операции с объектом:
            NotAssigned, Refresh, Add, AddChild, Edit, Del
            </summary>
        </member>
        <member name="F:FBA.Operation.NotAssigned">
            <summary>
            Не определено
            </summary>
        </member>
        <member name="F:FBA.Operation.Refresh">
            <summary>
            Обновить таблицу
            </summary>
        </member>
        <member name="F:FBA.Operation.Add">
            <summary>
            Добавить новую запись
            </summary>
        </member>
        <member name="F:FBA.Operation.AddChild">
            <summary>
            Добавить новую вложенную запись
            </summary>
        </member>
        <member name="F:FBA.Operation.Edit">
            <summary>
            Редактирвать
            </summary>
        </member>
        <member name="F:FBA.Operation.Del">
            <summary>
            Удалить
            </summary>
        </member>
        <member name="T:FBA.SQLCommand">
            <summary>
            Тип операции в БД: NotAssigned, Auto, Update, Insert, Delete
            </summary>
        </member>
        <member name="F:FBA.SQLCommand.Auto">
            <summary>
            Определять автоматически по наличию ИД объекта. Если ИД есть, то Update, иначе Insert. Delete вызывается отдельно и Auto не определяется.
            </summary>
        </member>
        <member name="F:FBA.SQLCommand.Update">
            <summary>
            Обновить. ИД объекта уже должен быть.
            </summary>
        </member>
        <member name="F:FBA.SQLCommand.Insert">
            <summary>
            Вставить новую запись. ИД объекта не должно быть.
            </summary>
        </member>
        <member name="F:FBA.SQLCommand.Delete">
            <summary>
            Удалить. ИД объекта уже должен быть.
            </summary>
        </member>
        <member name="T:FBA.SQLLang">
            <summary>
            Тип языка: MSQL, SQL
            </summary>
        </member>
        <member name="F:FBA.SQLLang.MSQL">
            <summary>
            Язык модели данных
            </summary>
        </member>
        <member name="F:FBA.SQLLang.SQL">
            <summary>
            Чистый SQL к любому из серверов MSQL, Postgre, SQLite.
            </summary>
        </member>
        <member name="T:FBA.SearchParam">
            <summary>
            Тип поиска: NotAssigned, Exact, Contains, Begin, End 
            </summary>
        </member>
        <member name="F:FBA.SearchParam.Exact">
            <summary>
            Точное совпадение
            </summary>
        </member>
        <member name="F:FBA.SearchParam.Contains">
            <summary>
            Подстрока содержится в строке с любого места
            </summary>
        </member>
        <member name="F:FBA.SearchParam.Begin">
            <summary>
            Стрка начинается со подстроки
            </summary>
        </member>
        <member name="F:FBA.SearchParam.End">
            <summary>
            Стрка заканчивается на подстроку
            </summary>
        </member>
        <member name="T:FBA.FormAction">
            <summary>
            Способ вызова метода созданиия формы: NotAssigned, None, Show, ShowDialog
            </summary>
        </member>
        <member name="F:FBA.FormAction.None">
            <summary>
            Формау не показывать
            </summary>
        </member>
        <member name="F:FBA.FormAction.Show">
            <summary>
            Показать не немодальную.
            </summary>
        </member>
        <member name="F:FBA.FormAction.ShowDialog">
            <summary>
            Показать не модальную.
            </summary>
        </member>
        <member name="T:FBA.DirectionQuery">
            <summary>
            Направить запрос к локальной БД или удалённой: NotAssigned, Remote, Local
            </summary>
        </member>
        <member name="F:FBA.DirectionQuery.Remote">
            <summary>
            Запрос к удалённой БД
            </summary>
        </member>
        <member name="F:FBA.DirectionQuery.Local">
            <summary>
            Запрос к локальной БД
            </summary>
        </member>
        <member name="T:FBA.TimeAction">
            <summary>
            Время, после или до. Чтобы определить время до или после события.
            Используется в методах сущности: Before, After
            </summary>
        </member>
        <member name="F:FBA.TimeAction.Before">
            <summary>
            До
            </summary>
        </member>
        <member name="F:FBA.TimeAction.After">
            <summary>
            После
            </summary>
        </member>
        <member name="T:FBA.EnterMode">
            <summary>
            Тип входа в систему: Work, Test, Develop
            </summary>
        </member>
        <member name="F:FBA.EnterMode.Work">
            <summary>
            Рабочий режим. Все модули берутся из полей fbaProject которые относятся к рабочей версии 
            </summary>
        </member>
        <member name="F:FBA.EnterMode.Test">
            <summary>
            Тестовый режим. Все модули берутся из полей fbaProject которые относятся к тестовой версии 
            </summary>
        </member>
        <member name="F:FBA.EnterMode.Develop">
            <summary>
            Разработка. Все модули берутся только с локального компьютера, к БД обращений не происходит.
            </summary>
        </member>
        <member name="T:FBA.SizeMode">
            <summary>
            Размер. Всего два значения: Small, Large. Используется в FormValue1
            </summary>
        </member>
        <member name="F:FBA.SizeMode.Small">
            <summary>
            Маленький 
            </summary>
        </member>
        <member name="F:FBA.SizeMode.Large">
            <summary>
            Большой
            </summary>
        </member>
        <member name="T:FBA.ValueType">
            <summary>
            Тип значения: Integer, String. Используется для FormValue1.
            </summary>
        </member>
        <member name="F:FBA.ValueType.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:FBA.ValueType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="T:FBA.ProjectType">
            <summary>
            Тип проекта: NotAssigned, Main, App, Dll 
            </summary>
        </member>
        <member name="F:FBA.ProjectType.NotAssigned">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:FBA.ProjectType.Main">
            <summary>
            Главная форма запуска прикладной подсистемы
            </summary>
        </member>
        <member name="F:FBA.ProjectType.App">
            <summary>
            Проект приложения с формами
            </summary>
        </member>
        <member name="F:FBA.ProjectType.Dll">
            <summary>
            Только DLL. Визуальных форм нет.
            </summary>
        </member>
        <member name="T:FBA.CellBackColorAlternate">
            <summary>
            Класс для перерисовки SourceGrid. Нужно для того чтобы выводить строки разным цветом через одну.
            </summary>
        </member>
        <member name="F:FBA.CellBackColorAlternate.FirstBackground">
            <summary>
            Первый цвет.
            </summary>
        </member>
        <member name="F:FBA.CellBackColorAlternate.SecondBackground">
            <summary>
            Второй цвет.
            </summary>
        </member>
        <member name="M:FBA.CellBackColorAlternate.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Установка цветов.
            </summary>
            <param name="firstColor">Первый цвет.</param>
            <param name="secondColor">Второй цвет.</param>
        </member>
        <member name="M:FBA.CellBackColorAlternate.PrepareView(SourceGrid.CellContext)">
            <summary>
            При выводе грида, раскраска двумя цветами.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:FBA.CheckBoxBackColorAlternate">
            <summary>
            Класс для перерисовки SourceGrid. Нужно для того чтобы выводить строки разным цветом через одну. 
            Это тоже самое что CellBackColorAlternate, но для ячеек типа CheckBox.
            </summary>   
        </member>
        <member name="M:FBA.CheckBoxBackColorAlternate.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Установка цветов.
            </summary>
            <param name="firstColor">Первый цвет.</param>
            <param name="secondColor">Второй цвет.</param>
        </member>
        <member name="M:FBA.CheckBoxBackColorAlternate.PrepareView(SourceGrid.CellContext)">
            <summary>
            При выводе грида, раскраска двумя цветами.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:FBA.CheckBoxBackColorAlternate.FirstBackground">
            <summary>
            Первый цвет.
            </summary>
        </member>
        <member name="P:FBA.CheckBoxBackColorAlternate.SecondBackground">
            <summary>
            Второй цвет.
            </summary>
        </member>
        <member name="T:FBA.GridFBA">
            <summary>
            Класс потомок SourceGrid.DataGrid.
            </summary>
        </member>
        <member name="M:FBA.GridFBA.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.GridFBA.CopyRegion(System.Boolean,System.Boolean)">
            <summary>
            Копировать выделенную облать из FBA.GridFBA в буфер обмена с названиями столбцов.
            </summary>
            <param name="copyWithCaptions">Если true, то в результат попадает шапка таблицы</param>
            <param name="copyAll">Если false берётся для копирования выделенная область, иначе вся таблица.</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.GridFBA.SelectAll">
            <summary>
            Выделить всю таблицу.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.GridFBA.SourceGridToExcel">
            <summary>
            Открыть в Excel таблицу, открытую в FBA.GridFBA.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.GridFBA.SourceGridToCSV">
            <summary>
            Открыть в Excel таблицу, открытую в FBA.GridFBA.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.GridFBA.GetColumnIndex(System.String)">
            <summary>
            Получение номера колонки по её имени
            </summary>
            <param name="columnName">Имя колонки</param>
            <returns>Номер полонки</returns>
        </member>
        <member name="M:FBA.GridFBA.Value(System.Int32,System.Int32)">
            <summary>
            Получить текстовое значение ячейки FBA.GridFBA по номеру строки и номеру колонки.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <returns>Текстовое значение ячейки</returns>
        </member>
        <member name="M:FBA.GridFBA.Value(System.Int32,System.String)">
            <summary>
            Получить текстовое значение ячейки FBA.GridFBA по номеру строки и названию колонки.
            </summary>
            <param name="iRow">Номер строки</param>
            <param name="columnName">Название колонки</param>
            <returns>Текстовое значение ячейки</returns>
        </member>
        <member name="M:FBA.GridFBA.Value(System.String,System.Boolean)">
            <summary>
            Получение значения в колонке с именем первой выделенной строки. 
            </summary>
            <param name="columnName"></param>
            <param name="showError">Показывать ошибки, если false и возникнет ошибка, то вернёт null</param>
            <returns>Текстовое значение ячейки</returns>
        </member>
        <member name="M:FBA.GridFBA.Value(System.Int32,System.Boolean)">
            <summary>
            Получение значения в колонке с номером первой выделенной строки. 
            </summary>
            <param name="columnIndex">Если ColumnIndex ==-1 берём значение из первой выделенной колонки</param>
            <param name="showError">Показывать ошибки, если false и возникнет ошибка, то вернёт null</param>
            <returns>Текстовое значение ячейки</returns>
        </member>
        <member name="M:FBA.GridFBA.GetSelectedArea(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Получение координат выделенной области из FBA.GridFBA.
            </summary>
            <param name="areaLeft">Left</param>
            <param name="areaTop">Top</param>
            <param name="areaRight">Right</param>
            <param name="areaBottom">Bottom</param>
        </member>
        <member name="M:FBA.GridFBA.GetDataTable">
            <summary>
            Получение DataTable из FBA.GridFBA.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.GridFBA.SelectedRowsToDataTable(System.Boolean)">
            <summary>
            Копирование выделенные строки из FBA.GridFBA в DataTable. 
            </summary>
            <param name="onlyFirstColumn">Если OnlyFirstColumn = true, то возвращается только первая колонка, иначе все колонки.</param>
            <returns>System.Data.DataTable</returns>
        </member>
        <member name="M:FBA.GridFBA.GetSelectedValues(System.Int32,System.Boolean)">
            <summary>
            Получение массива значений всех выделенных строк в колонке с индексом ColumnIndex.
            </summary>
            <param name="columnIndex">Номер колонки</param>
            <param name="showError">Показывать ошибки</param>
            <returns>Список значений колонки в массиве saring[]</returns>
        </member>
        <member name="M:FBA.GridFBA.SetDataSource(System.Data.DataTable)">
            <summary>
            Функция присвоения SourceGrid.DataSource = DataTable.
            </summary>
            <param name="dt">DataTable</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.GridFBA.SelectColumnRowCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            В зависимости от типа выделения (строка, столбец или ячейка) выделяем цветом по индексу столбца и строки.
            Два отдельных цвета - для выделения и для выбора.
            </summary>
            <param name="iRow">Номер строки</param>
            <param name="iColumn">Номер колонки</param>
            <param name="navigate">Выделять отдельным цветом выбора (выбирать) строку, колонку или область.</param>
        </member>
        <member name="M:FBA.GridFBA.PreviewKeyDown1(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            По CTRL+L выводим форму с инфой по таблице.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.GridFBA.GridInformation">
            <summary>
            Показать информацию о таблице.
            </summary>        
        </member>
        <member name="T:FBA.ProgressBarDisplayText">
            <summary>
            Способ отображения полосы в прогрес-баре.
            </summary>
        </member>
        <member name="F:FBA.ProgressBarDisplayText.Percentage">
            <summary>
            Только проценты
            </summary>
        </member>
        <member name="F:FBA.ProgressBarDisplayText.CustomText">
            <summary>
            Только произвольный текст
            </summary>
        </member>
        <member name="F:FBA.ProgressBarDisplayText.PercentText">
            <summary>
            Проценты и произвольный текст
            </summary>
        </member>
        <member name="T:FBA.ProgressBarFBA">
            <summary>
            Класс потомок System.Windows.Forms.ProgressBar.
            </summary>
        </member>
        <member name="M:FBA.ProgressBarFBA.#ctor">
            Конструктор.
        </member>
        <member name="M:FBA.ProgressBarFBA.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Вывод процентов и произвольного текста на прогрес-бар.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FBA.ProgressBarFBA.DisplayFont">
            <summary>
            Шрифт для вывода произвольного текста.
            </summary>
        </member>
        <member name="P:FBA.ProgressBarFBA.TextColor">
            <summary>
            Цвет шрифта.
            </summary>
        </member>
        <member name="P:FBA.ProgressBarFBA.TextStyle">
            <summary>
            Вывод или процентов или произвольного текста.
            </summary>
        </member>
        <member name="P:FBA.ProgressBarFBA.TextValue">
            <summary>
            Установка произвольного текста.
            </summary>
        </member>
        <member name="T:FBA.GroupBoxFBA">
            <summary>
            Класс потомок System.Windows.Forms.GroupBox.
            </summary>
        </member>
        <member name="P:FBA.GroupBoxFBA.StarText">
            <summary>
            Текст - звёздочка. Показывает обязательность заполнения поля. 
            Можно вместо звёздочки вывести другой текст.
            </summary>
        </member>
        <member name="P:FBA.GroupBoxFBA.StarFont">
            <summary>
            Шрифт звёздочки.
            </summary>
        </member>
        <member name="P:FBA.GroupBoxFBA.StarOffsetY">
            <summary>
            Смещение в пикселях вверх от основного текста по оси Y
            </summary>
        </member>
        <member name="P:FBA.GroupBoxFBA.StarOffsetX">
            <summary>
            Смещение в пикселях вверх от основного текста по оси X
            </summary>
        </member>
        <member name="P:FBA.GroupBoxFBA.StarColor">
            <summary>
            Цвет звёздочки
            </summary>
        </member>
        <member name="P:FBA.GroupBoxFBA.StarShow">
            <summary>
            Показывать или нет звёздочку.
            </summary>
        </member>
        <member name="T:FBA.LabelFBA">
            <summary>
            Класс потомок System.Windows.Forms.Label.
            </summary>
        </member>
        <member name="M:FBA.LabelFBA.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Переопределение события Paint.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FBA.LabelFBA.StarText">
            <summary>
            Текст - звёздочка. Показывает обязательность заполнения поля. 
            Можно вместо звёздочки вывести другой текст.
            </summary>
        </member>
        <member name="P:FBA.LabelFBA.StarFont">
            <summary>
            Шрифт звёздочки.
            </summary>
        </member>
        <member name="P:FBA.LabelFBA.StarOffsetY">
            <summary>
            Смещение в пикселях вверх от основного текста по оси Y
            </summary>
        </member>
        <member name="P:FBA.LabelFBA.StarOffsetX">
            <summary>
            Смещение в пикселях вверх от основного текста по оси X
            </summary>
        </member>
        <member name="P:FBA.LabelFBA.StarColor">
            <summary>
            Цвет звёздочки
            </summary>
        </member>
        <member name="P:FBA.LabelFBA.StarShow">
            <summary>
            Показывать или нет звёздочку.
            </summary>
        </member>
        <member name="T:FBA.TextBoxFBA">
            <summary>
            Класс потомок System.Windows.Forms.TextBox.    
            </summary>
            <remarks>
            Дополнительные возможности TextBox:
            Цвет фона компонента меняется, если Enabled = false.
            Возможность указать список допустимых символов, свойство: ListValidChars
            Возможность указать список допустимых символов, свойство: ListInvalidChars
            Возможность указать регулярное выражение для проверки соответствия, свойство: RegExChars
            Вместо списка  допустиымых и недопустимых  символов можно указать следующие константы:
            DIG: 1234567890
            UPPERENG: QWERTYUIOPASDFGHJKLZXCVBNM
            LOWERENG: qwertyuiopasdfghjklzxcbnm
            ENG: QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnm
            ENGDIG: 1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnm
            FLOATDOT: 1234567890.
            FLOATCOMMA: 1234567890,
            ENGRUSDIG: 1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnmЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё
            RUS: ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё
            Возможность ввести список значений по двойному клику
            </remarks>
        </member>
        <member name="F:FBA.TextBoxFBA.ValueArray">
            <summary>
            История введённых значений.
            </summary>
        </member>
        <member name="M:FBA.TextBoxFBA.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.TextBoxFBA.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.TextBoxFBA.EnabledChangedMethod(System.Object,System.EventArgs)">
            <summary>
            Меняем цвет компонента, если Enabled = false.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.TextBoxFBA.CanInput(System.Char,System.String)">
            Проверяем можно ли вставить данные.
        </member>
        <member name="M:FBA.TextBoxFBA.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Обработка вставки текста из буфера обмена. 
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:FBA.TextBoxFBA.TextBoxEnter(System.Object,System.EventArgs)">
            <summary>
            Для того чтобы можно было вставить свойство текст "Введите значение" которое появляется, если в компоненте свойство текст не заполнено.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>    		
        </member>
        <member name="M:FBA.TextBoxFBA.TextBoxLeave(System.Object,System.EventArgs)">
            <summary>
            Для того чтобы можно было вставить свойство текст "Введите значение" которое появляется, если в компоненте свойство текст не заполнено.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.TextBoxFBA.TextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Добавляем свойство KeyPress.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.TextBoxFBA.FilterInputText(System.Object,System.Windows.Forms.MouseEventArgs)">
            Ввод списка значений при двойном клике на TextBox полоски фильтра.
        </member>
        <member name="P:FBA.TextBoxFBA.DefaultTextGray">
            <summary>
            Текст, который будет выводиться серым цветом при первоначальном вводе.
            Если текст не введён.
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.DefaultTextGrayColor">
            <summary>
            Текст, который будет выводиться серым цветом при первоначальном вводе.
            Если текст не введён.
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.Text2">
            <summary>
            Дополнительное поле с текстом. Для разных целей.
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.RegExChars">
            <summary>
            Регулярное выражение для проверки валидности текста в свойстве Text.
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.ListInvalidChars">
            <summary>
            Список НЕ допустимых значений
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.ListValidChars">
            <summary>
            Список допустимых значений
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.SaveValueHistory">
            <summary>
            Записывать в локальную базу данных историю введённых значений
            </summary>
        </member>
        <member name="P:FBA.TextBoxFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках,
            при выполнении команды SaveSettings/LoadSettings.  
            </summary>        
        </member>
        <member name="P:FBA.TextBoxFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef
            </summary>      
        </member>
        <member name="P:FBA.TextBoxFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef
            </summary>     
        </member>
        <member name="P:FBA.TextBoxFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента.
            </summary>        
        </member>
        <member name="P:FBA.TextBoxFBA.AttrBriefLookup">
            <summary>
            Атрибут для выбора через ObjectRef
            </summary>       
        </member>
        <member name="P:FBA.TextBoxFBA.ErrorIfNull">
            <summary>
            Требуем заполнение компонента значениями.  
            </summary>
        </member>
        <member name="T:FBA.ComboBoxFBA">
            <summary>
            Класс потомок ComboBoxEx.
            </summary>
        </member>
        <member name="F:FBA.ComboBoxFBA.ValueArray">
            <summary>
            Список строк для раскрывающегося списка.
            </summary>
        </member>
        <member name="M:FBA.ComboBoxFBA.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.ComboBoxFBA.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.ComboBoxFBA.Constructor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.ComboBoxFBA.ComboBoxEnter(System.Object,System.EventArgs)">
            <summary>
            Для того чтобы можно было вставить свойство текст "Введите значение" которое появляется, если в компоненте свойство текст не заполнено.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>    		
        </member>
        <member name="M:FBA.ComboBoxFBA.ComboBoxLeave(System.Object,System.EventArgs)">
            <summary>
            Для того чтобы можно было вставить свойство текст "Введите значение" которое появляется, если в компоненте свойство текст не заполнено.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ComboBoxFBA.EnabledChangedMethod(System.Object,System.EventArgs)">
            <summary>
            Меняем цвет компонента, если Enabled = false.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ComboBoxFBA.CanInput(System.Char,System.String)">
            <summary>
            Проверяем можно ли вставить данные.
            </summary>
            <param name="key"></param>
            <param name="BufferText"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.ComboBoxFBA.WndProc(System.Windows.Forms.Message@)">
            Обработка вставки текста из буфера обмена.        
        </member>
        <member name="M:FBA.ComboBoxFBA.TextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Добавляем свойство ReadOnly.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ComboBoxFBA.FilterInputText(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Ввод списка значений при двойном клике на TextBox полоски фильтра.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.ComboBoxFBA.SetDataSourse(System.Data.DataTable)">
            <summary>
            Присвоить ComboBox свойство DataSourse. Только первую колонку.
            </summary>      
            <param name="dt">System.Data.DataTable</param>
        </member>
        <member name="M:FBA.ComboBoxFBA.SetDataSourceSQL(FBA.DirectionQuery,System.String)">
            <summary>
            Присвоить ComboBox свойство DataSourse из запроса SQL. SQL должен возвращать одну колонку.
            </summary>
            <param name="direction">Запрос к локальной или удалённой БД</param>      
            <param name="sql">Запрос SQL</param>
        </member>
        <member name="M:FBA.ComboBoxFBA.SetDataSourceMSQL(System.String)">
            <summary>
            Присвоить ComboBox свойство DataSourse из запроса SQL. SQL должен возвращать одну колонку.
            </summary>         
            <param name="msql">Запрос MSQL</param>
        </member>
        <member name="M:FBA.ComboBoxFBA.SelectStr(System.String)">
            <summary>
            Выделить строку в ComboBox. Если такое значение найдено, изменится SelectedIndex.
            </summary>       
            <param name="str">Строка, которую ищем в ComboBox</param>
        </member>
        <member name="M:FBA.ComboBoxFBA.ComboBoxStr">
            <summary>
            Получение выбранного значения в ComboBox.
            </summary>       
            <returns>Выбранное значение в cb</returns>
        </member>
        <member name="P:FBA.ComboBoxFBA.DefaultTextGrayFont">
            <summary>
            Текст, который будет выводиться серым цветом при первоначальном вводе.
            Если текст не введён.
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.ObjectID">
            <summary>
            Привязанный ИД объект.
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.ObjRef">
            <summary>
            Ссылка на ObjectRef
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.Text2">
            <summary>
            Дополнительное поле с текстом. Для разных целей.
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.RegExChars">
            <summary>
            Регулярное выражение для проверки текста свойстве Text.
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.ListInvalidChars">
            <summary>
            Список НЕ допустимых значений
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.ListValidChars">
            <summary>
            Список допустимых значений. Также допустимы сокращения: DIG, UPPERENG, LOWERENG, ENG, ENGDIG, FLOATDOT, FLOATCOMMA, ENGRUSDIG, ENGRUSDIG, RUS
            DIG - 1234567890
            UPPERENG   - QWERTYUIOPASDFGHJKLZXCVBNM
            LOWERENG   - qwertyuiopasdfghjklzxcbnm
            ENG        - QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnm
            ENGDIG     - 1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnm
            FLOATDOT   - 1234567890.
            FLOATCOMMA - 1234567890,
            ENGRUSDIG  - 1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnm" + "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё
            ENGRUSDIG  - QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcbnm" + "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё
            RUS        - ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁйцукенгшщзхъфывапролджэячсмитьбюё 
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.SaveValueHistory">
            <summary>
            Сохранять или не сохранять историю введённых вручную значений. 
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках,
            при выполнении команды SaveSettings/LoadSettings. 
            </summary>       
        </member>
        <member name="P:FBA.ComboBoxFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef. 
            </summary>         
        </member>
        <member name="P:FBA.ComboBoxFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef. 
            </summary>           
        </member>
        <member name="P:FBA.ComboBoxFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента. 
            </summary>            
        </member>
        <member name="P:FBA.ComboBoxFBA.AttrBriefLookup">
            <summary>
            Атрибут для выбора через ObjectRef. 
            </summary>      
        </member>
        <member name="P:FBA.ComboBoxFBA.ErrorIfNull">
            <summary>
            Требуем заполнение компонента значениями.   
            </summary>              
        </member>
        <member name="P:FBA.ComboBoxFBA.Obj">
            <summary>
            Ссылка на ObjectRef.
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.ReadOnly">
            <summary>
            Добавляем свойство "Только для чтения"
            </summary>          
        </member>
        <member name="P:FBA.ComboBoxFBA.ValueHistoryInItems">
            <summary>
            Показывать историю предыдущих введённых значений.
            </summary>
        </member>
        <member name="P:FBA.ComboBoxFBA.SaveType">
            <summary>
            Указываем что сохранять свойство Text или SelectedIndex.     
            </summary>       
        </member>
        <member name="P:FBA.ComboBoxFBA.ContextMenuEnabled">
            <summary>
            Если поставить False стандартное контекстное меню перестанет появляться. 
            </summary>
        </member>
        <member name="T:FBA.CheckBoxFBA">
            <summary>
            Класс потомок System.Windows.Forms.CheckBox.
            </summary>
        </member>
        <member name="P:FBA.CheckBoxFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках, 
            при выполнении команды SaveSettings/LoadSettings.     
            </summary>
        </member>
        <member name="P:FBA.CheckBoxFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef.     
            </summary>		
        </member>
        <member name="P:FBA.CheckBoxFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.    
            </summary>	        
        </member>
        <member name="P:FBA.CheckBoxFBA.Obj">
            <summary>
            Привязанный компонент ObjectRef
            </summary>
        </member>
        <member name="P:FBA.CheckBoxFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента. 
            </summary>       
        </member>
        <member name="T:FBA.RadioButtonFBA">
            <summary>
            Класс потомок System.Windows.Forms.RadioButton.
            </summary>
        </member>
        <member name="P:FBA.RadioButtonFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках, 
            при выполнении команды SaveSettings/LoadSettings. 
            </summary>
        </member>
        <member name="P:FBA.RadioButtonFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef.  
            </summary>       
        </member>
        <member name="P:FBA.RadioButtonFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.  
            </summary>   
        </member>
        <member name="P:FBA.RadioButtonFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента. 
            </summary>          
        </member>
        <member name="P:FBA.RadioButtonFBA.Obj">
            <summary>
            Привязанный объект ObjectRef.
            </summary>
        </member>
        <member name="T:FBA.PanelFBA">
            <summary>
            Класс потомок System.Windows.Forms.Panel.
            </summary>
        </member>
        <member name="P:FBA.PanelFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках, 
            при выполнении команды SaveSettings/LoadSettings.  
            </summary>	        
        </member>
        <member name="P:FBA.PanelFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef.     
            </summary>	       
        </member>
        <member name="P:FBA.PanelFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.     
            </summary>		
        </member>
        <member name="P:FBA.PanelFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента.    
            </summary>
        </member>
        <member name="P:FBA.PanelFBA.Obj">
            <summary>
            Привязанный объект ObjectRef.
            </summary>
        </member>
        <member name="T:FBA.ButtonFBA">
            <summary>
            Класс потомок System.Windows.Forms.Button.
            </summary>
        </member>
        <member name="P:FBA.ButtonFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках, 
            при выполнении команды SaveSettings/LoadSettings.      
            </summary>
        </member>
        <member name="P:FBA.ButtonFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef.    
            </summary>       
        </member>
        <member name="P:FBA.ButtonFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.    
            </summary>        
        </member>
        <member name="P:FBA.ButtonFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента.  
            </summary>    
        </member>
        <member name="P:FBA.ButtonFBA.Obj">
            <summary>
            Привязанный компонент ObjectRef.
            </summary>
        </member>
        <member name="T:FBA.TabControlFBA">
            <summary>
            Класс потомок System.Windows.Forms.TabControl.
            </summary>
        </member>
        <member name="M:FBA.TabControlFBA.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.TabControlFBA.DoTabVisible(System.Windows.Forms.TabPage,System.Boolean)">
            <summary>
            Скрыть/показать вкладке TabPage в TabControl.
            </summary>       
            <param name="tb">TabPage</param>
            <param name="tabVisible">true-показать вкладку, false-скрыть</param>
        </member>
        <member name="M:FBA.TabControlFBA.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Свойство скрыть вкладки. 
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:FBA.TabControlFBA.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Вывод дополнительного текста.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FBA.TabControlFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках,
            при выполнении команды SaveSettings/LoadSettings.
            </summary>        
        </member>
        <member name="P:FBA.TabControlFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента. 
            </summary>         
        </member>
        <member name="P:FBA.TabControlFBA.HideTabs">
            <summary>
            Скрывать или нет вкладки.
            </summary> 
        </member>
        <member name="P:FBA.TabControlFBA.StarPageIndex">
            <summary>
            Вкладка на которой отображается звёздочка в ярлыке.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.StarShow">
            <summary>
            Показывать или нет звёздочку.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.StarText">
            <summary>
            Текст звёздочки по умолчанию. Можно изменить.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.StarFont">
            <summary>
            Шрифт звёздочки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.StarOffsetY">
            <summary>
            Смещение по Y текста звёздочки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.StarOffsetX">
            <summary>
            Смещение по X текста звёздочки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.StarColor">
            <summary>
            Цвет звёздочки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.SetSelectTabBackColor">
            <summary>
            Отмечать цветом фона ярлык выбранной вкладки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.SelectTabBackColor">
            <summary>
            Цвет фона ярлык выбранной вкладки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.SelectTabFontColor">
            <summary>
            Цвет шрифта ярлыка выбранной вкладки.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.TabFontColor">
            <summary>
            Цвет ярлыков НЕ выбранных вкладок.
            </summary>
        </member>
        <member name="P:FBA.TabControlFBA.Obj">
            <summary>
            Привязанный объект ObjectRef.
            </summary>
        </member>
        <member name="T:FBA.DataGridViewFBA">
            <summary>
            Класс потомок System.Windows.Forms.DataGridView.
            </summary>
        </member>
        <member name="M:FBA.DataGridViewFBA.#ctor">
            <summary>
            При создании грида, наполняем пунктами меню, связнное с ним контекстное меню. 
            </summary>       
        </member>
        <member name="M:FBA.DataGridViewFBA.CaptionWithComma">
            <summary>
            Получение списка колонок DataGridViewFBA через точку с запятой. 
            </summary>      
            <returns>Список колонок через точку с запятой</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.RowDown(System.Int32)">
            <summary>
            Опустить в DataGridView строку с индексом RowIndex вниз.
            </summary>       
            <param name="rowIndex">Строка, которую нужно опустить вниз</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.RowUp(System.Int32)">
            <summary>
            Поднять в DataGridView строку с индексом RowIndex вверх.
            </summary>        
            <param name="rowIndex">Строка, которую нужно поднять вверх</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.SelectFind(System.String,System.Int32,System.Boolean)">
            <summary>
            Метод выделяет найденные строки в DataGridView, возвращает индекс первой найденной строки.
            Если selectAllRows = false, то искать только одну первую строку. 
            </summary>        
            <param name="value">Значение для поиска</param>
            <param name="colIndex">В какой колонке ищем</param>
            <param name="selectAllRows">Если false, то после первого нахождения выходим</param>
            <returns>Индекс первой найденной строки</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.ReplaceQuote">
            <summary>
            Заменяем кавычки на двойные для того чтобы сохранить содержимое DataGridView 
            SQL запросом в базе данных. Внутри каждой ячейки обрамляющие кавычки.
            </summary>       
        </member>
        <member name="M:FBA.DataGridViewFBA.DeleteAll">
            <summary>
            Удаление всех строк в DataGridView.
            </summary>       
            <returns>Ничего не возвращает.</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.SelectedDeleteAll">
            <summary>
            Удаление всех выделенных строк в DataGridView.
            </summary>       
            <returns>Ничего не возвращает.</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.SelectedDeleteFirst">
            <summary>
            Удаление первой выделенной строки из DataGridView.
            </summary>      
            <returns>Ничего не возвращает.</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.RowInt(System.Int32,System.String)">
            <summary> //RowInt
            Получение значения в DataGridView по индексу строки и названию столбца.
            </summary>       
            <param name="rowIndex">Индекс строки из котрой выбираем</param>   
            <param name="columnName">Название колонки, из которой выбираем</param>   
            <returns></returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.RowInt(System.Int32,System.Int32)">
            <summary>
            Получение значения в DataGridView по индексу строки и индексу столбца.
            </summary>       
            <param name="rowIndex">Номер строки</param> 
            <param name="columnIndex">Номер колонки</param>			
            <returns></returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.RowValue(System.Windows.Forms.DataGridViewRow,System.String)">
            <summary>
            Получение выбранного значения в DataGridView по объекту строки row.
            </summary>       
            <param name="row">Строка тип DataGridViewRow</param>   
            <param name="columnName">Название колонки, из которой выбираем</param>   
            <returns>Выбранное значение в dg</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.SelectIndex">
            <summary>
            Получение index первого выбранного значения в FBA.DataGridViewFBA.
            </summary>        
            <returns>index первого выбранного значения в FBA.DataGridViewFBA</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.DataGridViewSelected(System.String)">
            <summary>
            Получение выбранного значения в DataGridView по имени столбца.
            </summary>     
            <param name="columnName">Имя колонки из которой взять значение</param>
            <returns>Значение из ячейки</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.DataGridViewSelected(System.Int32)">
            <summary>
            Получение выбранного значения в DataGridView по индексу поля.
            </summary>     
            <param name="columnindex">Имя колонки из которой взять значение</param>
            <returns>Значение из ячейки</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.ScrollTo(System.Int32)">
            <summary>
            Скроллирование FBA.DataGridViewFBA на строку с номером navigateRow
            </summary>        
            <param name="navigateRow">Номер строки, на которую переходим</param>
            <returns>Нет</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.CopyToDataGridView(FBA.DataGridViewFBA,System.Boolean)">
            <summary>
            Копирование всех данных в другой DataGridView.
            Если CopyRows = false, то копируется только структура(названия колонок).
            Если CopyRows = true, то копируются также все строки. 
            </summary>      
            <param name="dgDest">В какой DataGridView копируем</param>
            <param name="copyRows">Если true, то копируется и содержимое, иначе - только структура колонок</param>
        </member>
        <member name="M:FBA.DataGridViewFBA.GridInformation">
            <summary>
            Показать информацию о таблице.
            </summary>      
        </member>
        <member name="M:FBA.DataGridViewFBA.ExportToExcel">
            <summary>
            Открыть в Excel таблицу, открытую в DataGridView.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.ExportToExcelTemplate(System.String)">
            <summary>
            Экспортирвать DataTable в шаблон Excel.
            </summary>
            <param name="TemplatePath">Полный путь к файлу Excel куда выгрузить таблицу</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.DataGridViewFBA.RefreshGrid(FBA.DirectionQuery,System.String)">
            Обновить данные в гриде DataGridView.
        </member>
        <member name="P:FBA.DataGridViewFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента. 
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandAdd">
            <summary>
            Показывать команду в контекстном меню грида Add
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandDel">
            <summary>
            Показывать команду в контекстном меню грида Del
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandEdit">
            <summary>
            Показывать команду в контекстном меню грида Edit
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandFilter">
            <summary>
            Показывать команду в контекстном меню грида Filter
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandRefresh">
            <summary>
            Показывать команду в контекстном меню грида Refresh
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandExportToExcel">
            <summary>
            Показывать команду в контекстном меню грида "Export to Excel"
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.CommandSaveASCSV">
            <summary>
            Показывать команду в контекстном меню грида "Save as CSV"
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.PassedSec">
            <summary>
            Время, за котрое выполнился запрос, результаты котрого отображаются в гриде.
            </summary>
        </member>
        <member name="P:FBA.DataGridViewFBA.Obj">
            <summary>
            Привязанный объект ObjectRef.
            </summary>
        </member>
        <member name="T:FBA.FastColoredTextBoxFBA">
            <summary>
            Класс потомок FastColoredTextBoxNS.FastColoredTextBox.
            </summary>
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках,
            при выполнении команды SaveSettings/LoadSettings. 
            </summary>
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef.  
            </summary>       
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.
            </summary>        
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента.   
            </summary>        
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.AttrBriefLookup">
            <summary>
            Атрибут для выбора через ObjectRef.  
            </summary>        
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.ErrorIfNull">
            <summary>
            Требуем заполнение компонента значениями.
            </summary>        
        </member>
        <member name="P:FBA.FastColoredTextBoxFBA.Text2">
            <summary>
            Дополнительное поле с текстом. Для разных целей.
            </summary>
        </member>
        <member name="T:FBA.DateTimePickerFBA">
            <summary>
            Вывод DateTimePicker, позволяющий изменять цвет фона.
            </summary>
        </member>
        <member name="M:FBA.DateTimePickerFBA.#ctor">
            <summary>
            Color _backDisabledColor;
            </summary>
        </member>
        <member name="P:FBA.DateTimePickerFBA.SaveValueHistory">
            <summary>
            Сохранять историю введённых значений в локальной базе данных
            </summary>
        </member>
        <member name="P:FBA.DateTimePickerFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках,
            при выполнении команды SaveSettings/LoadSettings.
            </summary>       
        </member>
        <member name="P:FBA.DateTimePickerFBA.ObjectRef">
            <summary>
            Атрибут для выбора через ObjectRef.  
            </summary>       
        </member>
        <member name="P:FBA.DateTimePickerFBA.AttrBrief">
            <summary>
            Атрибут для выбора через ObjectRef.   
            </summary>        
        </member>
        <member name="P:FBA.DateTimePickerFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента.     
            </summary>         
        </member>
        <member name="P:FBA.DateTimePickerFBA.AttrBriefLookup">
            <summary>
            Атрибут для выбора через ObjectRef.            
            </summary>    
        </member>
        <member name="P:FBA.DateTimePickerFBA.ErrorIfNull">
            <summary>
            Требуем заполнение компонента значениями.  
            </summary>         
        </member>
        <member name="T:FBA.CustomFlowLayoutPanel">
            <summary>
            Класс потомок FlowLayoutPanel.
            </summary>
        </member>
        <member name="M:FBA.CustomFlowLayoutPanel.#ctor">
            <summary>
            FlowLayoutPanel с доп. свойствами.
            </summary>
        </member>
        <member name="M:FBA.CustomFlowLayoutPanel.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Прокрутка панели мышкой.
            </summary>
            <param name="se"></param>
        </member>
        <member name="P:FBA.CustomFlowLayoutPanel.CreateParams">
            <summary>
            Необходимо для возмодности прокрутки панели мышкой.
            </summary>
        </member>
        <member name="T:FBA.SplitContainerFBA">
            <summary>
            Наследник System.Windows.Forms.SplitContainer
            </summary>
        </member>
        <member name="T:FBA.PictureBoxFBA">
            <summary>
            Класс потомок System.Windows.Forms.PictureBox.
            </summary>
        </member>
        <member name="M:FBA.PictureBoxFBA.PictureBoxLoadFile(System.String,System.Boolean)">
            <summary>
            Загрузить картинку в PictureBox из файла с именем fileName.
            </summary>        
            <param name="fileName">Имя файла с картинкой</param>
            <param name="showMes">Показывать сообщения об ошибках</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.PictureBoxFBA.PictureBoxLoadDB(System.String,System.Boolean)">
            <summary>
            Загрузить картинку с именем ImageName в PictureBox из базы данных.
            </summary>       
            <param name="imageName">Имя картинки (поле Name) в таблице fbaImage</param>
            <param name="showMes">Показывать сообщения об ошибках</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="T:FBA.CompEntityTreeFBA">
            <summary>
            Компонент выбора и редактирвания сущности.  
            </summary>
            <summary>
            Компонент для отображения дерева сущностей с возможностью поиска по нему.
            </summary>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.#ctor">
            Конструктор.
        </member>
        <member name="M:FBA.CompEntityTreeFBA.OnSelectedEntity(FBA.SelectEntityEventArgs)">
            <summary>
            Cобытие выбора сущности.
            </summary>     
        </member>
        <member name="M:FBA.CompEntityTreeFBA.BeginUpdate">
            <summary>
            Для возможности отключить переисовку дерева при измениии размеров формы, на которой лежит компонент.
            </summary>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.EndUpdate">
            <summary>
            Для возможности отключить переисовку дерева при измениии размеров формы, на которой лежит компонент.
            </summary>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.LoadEntityTree">
            <summary>
            Загрузить дерево сущностей.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.AddNodes(System.Data.DataTable,System.Windows.Forms.TreeNode)">
            <summary>
            Добавление узла дерева сущностей.
            </summary>
            <param name="dt">System.Data.DataTable</param>
            <param name="node">TreeNode</param>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.btnFind_Click(System.Object,System.EventArgs)">
            <summary>
            Кнопка фильтр сущностей.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.FindEntityBrief(System.String)">
            <summary>
            Поиск сущности.
            </summary>
            <param name="entityName">Имя сущности, которую ищем</param>
            <returns>Возвращаетмя сокращение сущности, если не найдено, то возвращается пустая строка</returns>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.ActionFind">
            <summary>
            Поиск сущности.
            </summary>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.EntityNameNavigate(System.String)">
            <summary>
            Навигация по имени сущности.
            </summary>
            <param name="entityName">Имя сущности, котроую ещем в дереве</param>
            <returns>Если нашли, то true</returns>
        </member>
        <member name="M:FBA.CompEntityTreeFBA.dgvFind_CellClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            Выбор сущности в фильтре сущностей.
        </member>
        <member name="M:FBA.CompEntityTreeFBA.cmModel_N1_Click(System.Object,System.EventArgs)">
            Контекстное меню.
        </member>
        <member name="M:FBA.CompEntityTreeFBA.TreeViewEntity_DoubleClick(System.Object,System.EventArgs)">
            Двойной клик - выбор сущности. Возникает событие выбора.
        </member>
        <member name="M:FBA.CompEntityTreeFBA.tbFind_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            Перехват нажатия Enter.
        </member>
        <member name="M:FBA.CompEntityTreeFBA.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="P:FBA.CompEntityTreeFBA.EntityID">
            <summary>
            ИД сущности
            </summary>
        </member>
        <member name="P:FBA.CompEntityTreeFBA.EntityName">
            <summary>
            Имя сущности
            </summary>
        </member>
        <member name="P:FBA.CompEntityTreeFBA.Editable">
            <summary>
            Возможность редактирования дерева сущностей. В контестном меню становятся доступны пункты меню: Add, Edit, Delete.
            </summary>
        </member>
        <member name="E:FBA.CompEntityTreeFBA.SelectedEntity">
            <summary>
            Cобытие выбора сущности.
            </summary>
        </member>
        <member name="P:FBA.CompEntityTreeFBA.SelectInOneClick">
            <summary>
            Для выбора сущности требуется один щелчок мыши.
            </summary>
        </member>
        <member name="T:FBA.EntityEventHandler">
            <summary>
            Делегат для события
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:FBA.SelectEntityEventArgs">
            <summary>
            Для выбора сущности в дереве
            </summary>
        </member>
        <member name="M:FBA.SelectEntityEventArgs.#ctor(System.String)">
            <summary>
            Событие выбора сущности.
            </summary>
            <param name="entityID">ИД сущности</param>
        </member>
        <member name="P:FBA.SelectEntityEventArgs.EntityID">
            <summary>
            ИД выбранной сущности.
            </summary>
        </member>
        <member name="T:FBA.NewDT">
            <summary>
            Класс для сериализации/десериализации DataTable. 
            </summary>
            <remarks>
            Этот класс нужен для того, чтобы сохранить строку DataTable в файл.
            Используется в функциях ExportDataTabletoFile и ImportDataTableFromFile. 
            Лучше сериализовать свой класс, а не чистый Datatable так как в класс можно
            добавить свои поля, например TableName. 	
            </remarks>
        </member>
        <member name="F:FBA.NewDT.DataTableStr">
            <summary>
            Сама таблица в виде строки.
            </summary>           
        </member>
        <member name="F:FBA.NewDT.TableName">
            <summary>
            Имя таблицы
            </summary>
        </member>
        <member name="T:FBA.SysEmail">
            <summary>
            Класс для рассылки писем
            </summary>
        </member>
        <member name="F:FBA.SysEmail.Subject">
            <summary>
            Тема письма
            </summary>
        </member>
        <member name="F:FBA.SysEmail.Body">
            <summary>
            Содержимое письма
            </summary>
        </member>
        <member name="F:FBA.SysEmail.Host">
            <summary>
            Адрес постового сервера SMTP
            </summary>
        </member>
        <member name="F:FBA.SysEmail.Port">
            <summary>
            Порт. По умолчанию 25.
            </summary>
        </member>
        <member name="F:FBA.SysEmail.EmailFrom">
            <summary>
            Email от кого.
            </summary>
        </member>
        <member name="F:FBA.SysEmail.EmailTo">
            <summary>
            Email кому.
            </summary>
        </member>
        <member name="F:FBA.SysEmail.Password">
            <summary>
            Пароль от почты с которой шлём
            </summary>
        </member>
        <member name="F:FBA.SysEmail.EnableSsl">
            <summary>
            Включить SSL.
            </summary>
        </member>
        <member name="F:FBA.SysEmail.IsBodyHtml">
            <summary>
            Содержимое письма в HTML
            </summary>
        </member>
        <member name="F:FBA.SysEmail.Attachments">
            <summary>
            Список имен файлов с полными путями, для вложения.
            </summary>
        </member>
        <member name="M:FBA.SysEmail.SendEmail">
            <summary>
            Послать почтовое сообщение через SMTP.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="T:FBA.SysImport">
            <summary>
            Класс для всех импортов файлов. От него можно наследоваться и создаать свои индивидуальные импорты.
            </summary>
        </member>
        <member name="F:FBA.SysImport.ErrorCount">
            <summary>
            Количество ошибок
            </summary>
        </member>
        <member name="F:FBA.SysImport.Test">
            <summary>
            Тестовый режим. Замедляет вывод.
            </summary>
        </member>
        <member name="F:FBA.SysImport.Progress">
            <summary>
            Форма прогресс бара
            </summary>
        </member>
        <member name="F:FBA.SysImport.BookmarkCount">
            <summary>
            Количество заполненных строк в массиве
            </summary>
        </member>
        <member name="F:FBA.SysImport.ShowError">
            <summary>
            Показывать или нет сообщения об ошибках
            </summary>
        </member>
        <member name="F:FBA.SysImport.book">
            <summary>
            Книга
            </summary>       
        </member>
        <member name="F:FBA.SysImport.sheet">
            <summary>
            Текущий лист
            </summary>
        </member>
        <member name="F:FBA.SysImport.CurrentSheetName">
            <summary>
            Имя листа Excel, откуда импортируем
            </summary>
        </member>
        <member name="M:FBA.SysImport.#ctor">
            <summary>
            Конструктор. 
            </summary>
        </member>
        <member name="M:FBA.SysImport.ParseTemplate(System.Int32@)">
            Поиск местоположения закладок во всей книге.
        </member>
        <member name="M:FBA.SysImport.SetCurrentSheet(System.Int32)">
            <summary>
            Команда установки текущего листа по индексу листа.
            </summary>
            <param name="SheetIndex">Индекс листа</param>
            <returns>Успешно, если true</returns>
        </member>
        <member name="M:FBA.SysImport.SetCurrentSheet(System.String)">
            <summary>
            Команда установки текущего листа по имени листа
            </summary>
            <param name="SheetName">Имя листа</param>
            <returns></returns>
        </member>
        <member name="T:FBA.SysObjAdd">
            <summary>
            Это компонент для выбора из списка доступных значений.
            Слева таблица доступных значений, справа - таблица - выбранных значений.
            </summary>
        </member>
        <member name="F:FBA.SysObjAdd.DTObj1">
            <summary>
            Левая таблица
            </summary>
        </member>
        <member name="F:FBA.SysObjAdd.DTObj2">
            <summary>
            Правая таблица
            </summary>
        </member>
        <member name="F:FBA.SysObjAdd.ObjID1">
            <summary>
            ИД объекта, по которому привязываются записи
            </summary>
        </member>
        <member name="M:FBA.SysObjAdd.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.SysObjAdd.AddObj(System.Int32,System.Boolean)">
            <summary>
            Добавление одного объекта.
            </summary>
            <param name="indexRow">Индекс строки</param>
            <param name="showMes">Показывать сообщение об ошибке или нет</param>
        </member>
        <member name="M:FBA.SysObjAdd.CheckRowExists(System.Windows.Forms.DataGridView,System.Windows.Forms.DataGridView,System.Int32)">
            <summary>
            Проверка на то, что объект уже добавлен.
            </summary>
            <param name="dgv1">Левый грид</param>
            <param name="dgv2">Правый грид</param>
            <param name="indexRow">Индекс строки</param>
            <returns>Если значение уже добавлено, то true</returns>
        </member>
        <member name="M:FBA.SysObjAdd.BtnObjAddClick(System.Object,System.EventArgs)">
            <summary>
            Добавление/удаление объекта.
            </summary>
            <param name="sender">Кнопка</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:FBA.SysObjAdd.Open(System.String,System.String)">
            <summary>
            Открытие таблиц.
            </summary>
            <param name="sql1">Для левой таблицы</param>
            <param name="sql2">Для правой таблицы</param>
            <returns></returns>
        </member>
        <member name="M:FBA.SysObjAdd.SaveChanges(System.String,System.String,System.String,System.String,System.String[],System.String[])">
            <summary>
            Выполнение запросов и показ данных.
            </summary>
            <param name="tableName">Имя таблицы в которой будет храниться выбранный набор строк. это таблица оношения Obj1 - Obj2</param>	
            <param name="fieldObj1">Поле в котром храниться ссылка на объект 1</param>
            <param name="fieldObj2">Поле в котром храниться ссылка на объект 2</param>
            <param name="objID1">Значение ИД к которому привязывается выбранй список строк</param>
            <param name="addFields">Дополнительные поля</param>
            <param name="addValues">Дополнительные значения полей. Количество элементов массива addFields должно быть равно количеству элементов массива addValues</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="F:FBA.SysObjAdd.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:FBA.SysObjAdd.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the control.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FBA.SysObjAdd.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="T:FBA.Param">
            <summary>
            Все методы работы с параметрами приложения.
            </summary>
        </member>
        <member name="M:FBA.Param.GetSysParam(System.String)">
            <summary>
            Получить порт сервера приложений из настроек.
            Это такие же параметры как и пользовательские, но проще, и нужны только для работы платформы.
            </summary>
            <returns>Порт сервера приложений</returns>
        </member>
        <member name="M:FBA.Param.Save(FBA.DirectionQuery,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Запись значения настройки в таблицу настроек fbaParam.
            Настройки может быть глобальной (для всех пользователей одна с именем ParamName) и индивидуальная.
            Если индивидуальная, то имя ParamName повторяется для разных пользователей.
            Если в настройке сохраняются значения компронентов формы, то FormID указывать нужно, в противном случае FormID = ""
            </summary>
            <param name="direction">Запрос к локальной или удаленнённой базе данных.</param>
            <param name="userID">ИД пользователя</param>
            <param name="paramName">Имя параметра</param>
            <param name="checkGlobal">Глобальный или локальный параметр</param>
            <param name="param">Массив параметров</param>
            <param name="paramType"></param>
            <param name="formName">Имя формы</param>
            <param name="comment">Произвольный комментарий к параметру</param>
            <returns>Если запись успешная, то true</returns>
        </member>
        <member name="M:FBA.Param.Save(FBA.DirectionQuery,System.String,System.String,System.Boolean,System.String[],System.String,System.String,System.String)">
            <summary>
            Запись значения настройки в таблицу настроек fbaParam.
            Настройки может быть глобальной (для всех пользователей одна с именем ParamName) и индивидуальная.
            Если индивидуальная, то имя ParamName повторяется для разных пользователей.
            Если в настройке сохраняются значения компронентов формы, то FormID указывать нужно, в противном случае FormID = ""
            </summary>
            <param name="direction">Запрос к локальной или удаленнённой базе данных.</param>
            <param name="userID">ИД пользователя</param>
            <param name="paramName">Имя параметра</param>
            <param name="checkGlobal">Глобальный или локальный параметр</param>
            <param name="listParams">Массив параметров</param>
            <param name="paramType"></param>
            <param name="formName">Имя формы</param>
            <param name="comment">Произвольный комментарий к параметру</param>
            <returns>Если запись успешная, то true</returns>
        </member>
        <member name="M:FBA.Param.Load(FBA.DirectionQuery,System.String,System.String,System.Boolean,System.String,System.String[]@)">
            <summary>
            Чтение значения настройки из таблицы настроек fbaParam.
            </summary>
            <param name="direction">Запрос к локальной или удаленнённой базе данных.</param>
            <param name="userID">>ИД пользователя</param>
            <param name="paramName">Имя параметра</param>
            <param name="checkGlobal">Глобальный или локальный параметр</param>
            <param name="paramType">Тип параметра</param>
            <param name="listParams">Массив параметров</param>
            <returns>Если загрузка успешная, то true</returns>                          
        </member>
        <member name="M:FBA.Param.Load(FBA.DirectionQuery,System.String,System.String,System.Boolean,System.String,System.String@)">
            <summary>
            Чтение значения настройки из таблицы настроек fbaParam.
            </summary>
            <param name="direction">Запрос к локальной или удаленнённой базе данных.</param>
            <param name="userID">>ИД пользователя</param>
            <param name="paramName">Имя параметра</param>
            <param name="checkGlobal">Глобальный или локальный параметр</param>
            <param name="paramType">Тип параметра</param>
            <param name="param">Массив параметров</param>
            <returns>Если загрузка успешная, то true</returns>                          
        </member>
        <member name="M:FBA.Param.GetComponentValues(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Получаем значения компонентов формы (или другого компонента-контейнера Panel, TabControl) в виде строки.
            </summary>
            <param name="controls">Масив компонентов формы</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Param.SetComponentValues(System.String,System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Присваивааем значения компонентам формы (или другого компонента-контейнера Panel, TabControl).
            </summary>
            <param name="componentValues">Компоненты формы и их значения в виде строки. Так как они записываются в базу данных.</param>
            <param name="controls">Масив компонентов формы</param>
            <returns></returns>
        </member>
        <member name="T:FBA.TestObjectRef">
            <summary>
            Статический класс для тестирования работы ObjectRef.
            </summary>
        </member>
        <member name="M:FBA.TestObjectRef.TestSaveObject">
            <summary>
            Тестовые методы для проверки работы методов ObjectRef.
            </summary>
        </member>
        <member name="T:FBA.ObjectRef">
            <summary>
            Класс, в котором реализована возможность присваивать компонентам значения из таблиц в БД. 
            </summary>
            <remarks>
            Это класс для чтения из базы данных и присваивания значений компонентам.
            Также при изменении пользователем значения компонента, изменения отправляются в БД с помощью запросов (Insert и Update).
            Чтобы показать значения компонентов на форме можно использовать три команды SetQueryTable, SetQueryEntity, SetQueryDirect.       
            Если компоненты получают свое значение через команду SetQueryDirect, то обновить данные в базе нельзя.
            Если компоненты получают свое значение через команду SetQueryTable или SetQueryEntity, то обновить данные в БД можно.
            Есть три таблицы  Ent, Ref, Tbl. В таблице Ent (главная) содержатся все объекты или все привязки к компонентам.
            В Ref - содержатся все значения компонентов формы, старые и новые.
            В Tbl - содержится список таблиц объекта. Tbl используется только в случае с SetQueryEntity, так как в объекте может быть несколько таблиц. 
            В случае с SetQueryDirect Tbl тоже само собой не используется, так как SetQueryDirect - это происзвольный запрос к БД, может содержать много таблиц, вложенных запросов и чего угодно.
            Tbl используется только для составления запросов одновления данных в БД.
            При SetQueryTable - всегда данные читаются из одной таблицы, поэтому массив также Tbl не используется.  
            Возможность показать значение в компоненте на форме:
            1. Из таблицы в БД. (SetQueryTable)
            2. Из атрибута сущности. (SetQueryEntity)
            3. Из результата прямого запроса (MSQL или SQL). (SetQueryDirect)    
            Изменить значене в БД можно только в том случае, если значение атрибута выведено из атрибута сущности или из таблицы в БД.  
            </remarks>
        </member>
        <member name="F:FBA.ObjectRef.localSQL">
            <summary>
            Все запросы к локальной БД. 
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.RemoteMSQL">
            <summary>
            Все запросы к удаленной БД до перевода в SQL. 
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.remoteSQL">
            <summary>
            Все запросы к удаленной БД после перевода в SQL.   
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.SaveObjectAtClient">
            <summary>
            Это заглушка. Если true, то используется функционал записи объекта в этом модуле, если false, то используется хранимая процедура на сервере.
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.RefCount">
            <summary>
            Максимальное количество компонентов на форме - 1000.
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.EntCount">
            <summary>
            /Максимальное количество сущностей, из которых будут получать значения компоненты формы - 100.
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.TranCount">
            <summary>
            Счетчик добавленных запросов.
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.Ref">
            <summary>
            Массив значений компонентов формы и атрибутов.
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.Ent">
            <summary>
            Массив сущностей и/или таблиц, которые используются в свойстве Tag компонентов.
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.SQLTransaction">
            <summary>
            В этом массиве будет храниться все запросы которомуые будут выполняться перед запросом записи объекта и после записи объекта
            на языках SQL и MSQL.
            Этот код будет выполняться в рамках одной транзакции с записью объекта (перед запросом записи объекта или после записи)
            MSQL - тоже самое что и SQL, но запрос будет конвертирован в MSQL из SQL.           
            </summary>
        </member>
        <member name="F:FBA.ObjectRef.formWasRead">
            <summary>
            Признак того что при Obj.Write уже не нужно считывать все компоненты с формы. Онии были прочитаны на Obj.Read.
            </summary>		
        </member>
        <member name="M:FBA.ObjectRef.AddQuery(System.String,System.String,FBA.SQLLang,FBA.TimeAction)">
            <summary>
            Добавление запроса SQL. Возвращается порядковый номер запроса.
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="query">Запрос на языке Master SQL или SQL</param>
            <param name="lang">Язык. SQLLang.MSQL или SQLLang.SQL</param>
            <param name="timeAction">Место выполнения запроса. TimeAction.Before или TimeAction.After</param>
            <returns>если успешно, то true</returns>     
        </member>
        <member name="M:FBA.ObjectRef.DeleteAddQuery(System.Int32)">
            <summary>
            Удаление запроса. Возвращается порядковый номер запроса. Остальные запросы номеров не меняют.
            </summary>
            <param name="numberQuery">Номер запроса</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.DeleteQuery(System.String)">
            <summary>
            Удаление QueryName. Мало ли... может понадобится. Просто очищаем строки.
            </summary>
            <param name="queryName">Имя QueryName</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.AddQuery_Bebore_After_In_ResultQuery(System.String,System.String)">
            <summary>
            Сборка запросов перед выполнением.
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="sourceSQL">Сборка всех запросв в один и вставка дополнительных запросов Before или After</param>
            <returns>Текст всех запросов</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetQueryTable(System.Windows.Forms.Form,System.String,System.String,System.String,System.String,System.String,FBA.DirectionQuery)">
            <summary>
            Возможность показать значение в компонентах формы из таблицы в БД.
            Пример вызова: 
            Obj = new FBA.ObjectRef();
            Obj.SetQueryTable(this, "Main1", "fbaAttr", ObjID, "AttributeID", "", "Remote");
            Obj.Read();    
            </summary>
            <param name="form">Форма Windows.Forms</param>
            <param name="queryName">Имя запроса</param>
            <param name="tableName">Сокращение сущности</param>
            <param name="objectID">ИД объекта</param>
            <param name="idFieldName">Поле ключа таблицы</param>
            <param name="stateDate">Дата состояния</param>
            <param name="direction">Локальная или удаленная база данных</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetQueryEntity(System.Windows.Forms.Form,System.String,System.String,System.String,System.String,FBA.DirectionQuery)">
            <summary>
            Возможность показать значение в компонентах формы из атрибута сущности.
            Пример вызова:
            Obj = new FBA.ObjectRef();        
            SetQueryEntity(this, "Застрахованный", "23158", "Remote");
            Obj.Read();  
            </summary>
            <param name="form">Форма Windows.Forms</param>
            <param name="queryName">Имя запроса</param>
            <param name="entityBrief">Сокращение сущности</param>
            <param name="objectID">ИД объекта</param>
            <param name="stateDate">Дата состояния</param>
            <param name="direction">Локальная или удаленная база данных</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetQueryDirect(System.Windows.Forms.Form,System.String,FBA.SQLLang,System.String,FBA.DirectionQuery)">
            <summary>
            Возможность показать значениев компонентах формы из результата прямого запроса.
            Примеры вызовов для SQL и MSQL: 
            Obj = new FBA.ObjectRef();  
            SetQueryDirect(this", SQLLang.MSQL, "select ДатаНачала from ДогСтрах where ИДОбъекта = 2284621", "Remote");
            Obj.Read();   
            </summary>
            <param name="form">Форма Windows Form. Необязательный параметр.</param>
            <param name="queryName">Имя запроса</param>
            <param name="lang">Язык. SQLLang.MSQL или SQLLang.SQL</param>
            <param name="query">Произвольный запрос на языке Master SQL или SQL</param>
            <param name="direction">Запрос к локальной или удалённой базе данных</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.FindQueryName(System.String,System.Boolean)">
            <summary>
            Поиск QueruName.
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="showErrorIfExist">Показывать сообщение об ошибке, если найдены ошибки</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.DeleteQueryName(System.String)">
            <summary>
            Удаление QueryName.
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.AddAttr(System.String,System.String)">
            <summary>
            Для ручного добавления атрибута в QueryName
            </summary>
            <param name="tagStr">Полный путь атрибута с QueryName. Пример: Main1.Договор.Номер</param>
            <param name="valueAttr">Значение добавляемого атрибута</param>
        </member>
        <member name="M:FBA.ObjectRef.DeleteAttr(System.String)">
            <summary>
            Для ручного удаления атрибута из QueryName
            </summary>
            <param name="tagStr">Полный путь атрибута с QueryName. Пример: Main1.Договор.Номер</param>
        </member>
        <member name="M:FBA.ObjectRef.GetResultTables(FBA.DirectionQuery,System.Data.DataSet@)">
            <summary>
            Получить таблицы после выполенения запросов.
            </summary>
            <param name="direction">Запрос к локальной или удалённой базе данных</param>
            <param name="ds">DataSet результата запроса к базе данных. Количество таблиц в DataSet равно количеству QueryName.</param>
        </member>
        <member name="M:FBA.ObjectRef.GetResultTableFirst(FBA.DirectionQuery,System.Data.DataTable@)">
            <summary>
            Получить одну первую таблицу после выполенения запросов.
            </summary>
            <param name="direction">Запрос к локальной или удалённой базе данных</param>
            <param name="dt">DataTable - первая таблица в DataSet результата запроса к базе данных</param>
        </member>
        <member name="M:FBA.ObjectRef.ShowArrayAll">
            <summary>
            Показ всех созданных массивов. Для отладки.
            </summary>
        </member>
        <member name="M:FBA.ObjectRef.ShowArray(System.String)">
            <summary>
            Показ созданного массива. Для отладки. 
            </summary>
            <param name="arrayName">Имя массива Ent, Ref</param>
        </member>
        <member name="M:FBA.ObjectRef.GetSelectSQLForEditFBA(FBA.EditFBA)">
            <summary>
            Получить код для запроса, который будет выполняться при раскрытии выпадающего списка на компоненте EditFBA.
            </summary>
            <param name="dBEdit">Компонент dBEdit</param>
            <returns>Текст запроса для наполнения раскрывающегося списка dBEdit</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetLinkEntityBrief(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Получить сокращение сущности, на которую ссылается атрибут AttrBrief. 
            </summary>
            <param name="attrBrief"></param>
            <param name="entityBrief">Сущность в котрой находится атрибут AttrBrief</param>
            <param name="entityBriefLookup">Сущность, на которую указывает атрибут AttrBrief</param>
            <param name="attrLookup">какой атрибут показывать из сущности EntityBriefLookup</param>
            <returns>Если сущноссть найдена, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.Read">
            <summary>
            Чтение значений из БД. Основная процедура чтения. Сдледует вызывать после заполнения QueryName методами SetQueryTable, SetQueryEntity, SetQueryDirect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.ObjectRef.ObjectFound(System.String)">
            <summary>
            Определение, был ли успешно найден объект в БД при чтении. 
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Если объект был наден в базе данных при чтении, то true.</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetControlsText(System.Windows.Forms.Control.ControlCollection,System.Boolean)">
            <summary>
            Перебор всех контролов на форме, и запись в массив Ref.
            setOldvalue - если true, то присваивается значение Ref[RefCount, iValueOld] = Ref[RefCount, iValueNew]  
            </summary>
            <param name="controls">Коллекция компонентов формы</param>
            <param name="setOldvalue">Устанавливать строе значение для найденного компонента</param>
        </member>
        <member name="M:FBA.ObjectRef.SetControlsText(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Перебор всех контролов на форме, и запись в свойство Text значения из массива Ref.    
            Если хотя бы значение одного компонента изменилось, то вернёт true. 
            </summary>
            <param name="controls">Коллекция компонентов формы</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.FillRefFromEnt">
            <summary>
            Заполяем список таблиц из Ent (для удобства).
            </summary>
        </member>
        <member name="M:FBA.ObjectRef.FillTablesFromAttrParent">
            <summary>
            Заполняем список таблиц.
            </summary>
        </member>
        <member name="M:FBA.ObjectRef.CreateSelect">
            <summary>
            Создаем запросы SELECT для чтения всех значений из БД.
            </summary>
        </member>
        <member name="M:FBA.ObjectRef.CollectSelect(FBA.DirectionQuery)">
            <summary>
            Сборка всех запросов.
            </summary>
            <param name="direction">Запрос к локальной или удалённой базе данных для чтения Read()</param>
            <returns>На выходе текст всех запросов select</returns>
        </member>
        <member name="M:FBA.ObjectRef.SendSelect">
            <summary>
            Посылка запросов к БД.
            </summary>
            <returns>Если ошибок нет при выполнениии Select, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetControlsValueFromDS">
            <summary>
            Заполнение свойств компонентов в массиве Ref значениями из DataTable после выполняния чтения из БД.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.Write(System.String)">
            <summary>
            Запись значений в БД. Возможна запись определенного QueryName или всех. Запись как INSERT так и UPDATE.
            Если QueryName не указано, то производится запись всех QueryName. 
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Если запись прошла без ошибок, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetValueNew(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Перебор всех контролов на форме, и запись в iValueNew или в iValueNewID значения из массива Ref. 
            </summary>
            <param name="controls">Коллекция компонентов формы</param>
        </member>
        <member name="M:FBA.ObjectRef.DeleteObject(System.String)">
            <summary>
            Удаление объекта по QueryName.
            </summary>
            <param name="queryName"></param>
            <returns>Если объект удалён из базы данных, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.DeleteObject(FBA.DirectionQuery,System.String,System.String)">
            <summary>
            Удаление объекта без его чтения по сокращению сущности и ID объекта.
            </summary>
            <param name="direction">Запрос к локальной или удалённой базе данных</param>
            <param name="entityBrief">Сокращение сущности объекта</param>
            <param name="objectID">ИД Объекта</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.DeleteObject(FBA.DirectionQuery,System.String,System.String[])">
            <summary>
            Удаление нескольких объектов без их чтения по сокращению сущности и ID объекта.
            </summary>
            <param name="direction">Запрос к локальной или удалённой базе данных</param>
            <param name="entityBrief"></param>
            <param name="arrID">Массив ИД объектов, котрые нужно удалить</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetValue(System.String,System.String)">
            <summary>
            Установка вручную свойства одного компонента. Пример использования: SetValue("Main.Полис", "3137294");
            </summary>
            <param name="tagStr">Полный путь атрибута. Пример: Main1.Договор.Номер</param>
            <param name="value">Значние атрибута, которое нужно установить</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetValue(System.String,System.Boolean)">
            <summary>
            Получить значение атрибута (поля таблицы)на которое указывает QueryName и Attr. Пример: string MyValue = Obj.GetValue("Main1.ContractName");
            Если ValueOld = true, то получить старое значение атрибута, до изменения. 
            </summary>
            <param name="tagStr">Полный путь атрибута. Пример: Main1.Договор.Номер</param>
            <param name="valueOld">Старое значение атрибута. Если true, то получить его.</param>
            <returns>Значение атрибута</returns>
        </member>
        <member name="M:FBA.ObjectRef.RestoreValues">
            <summary>
            Восстановление всех изменнных атрибутов. Вызывается SetControlsText.
            Перебор всех контролов на форме, и запись в свойство Text значения из массива Ref.    
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetDirty(System.String,System.Boolean)">
            <summary>
            Принудительная установка признака Dirty для определенного QueryName.
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="dirty">Признак, что объект был изменён</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.IsDirty(System.String)">
            <summary>
            Метод IsDirty, определяет, что какие либо открибуты запроса QueryName были изменены.    
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Если объект ещё не был записан в базу данных после его изменения, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetObjectID(System.String)">
            <summary>
            Получение ObjectID для определенного QueryName.
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Имя объекта по имени запроса</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetObjectID(System.String,System.String)">
            <summary>
            Присвоение свойства ObjectID для определенного QueryName.
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="objectID">ИД объекта</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.ObjectIsNew(System.String)">
            <summary>
            Проверка на то, что объект новый.
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Если объект новый, и ещё не был записан в базу данных, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetObjectEntityBrief(System.String)">
            <summary>
            Получение сокращения сущности объъекта.
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Cокращение сущности объъекта</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetObjectName(System.String)">
            <summary>
            Получение имени объекта по имени запроса
            </summary>
            <param name="queryName"></param>
            <returns>Имя объекта</returns>
        </member>
        <member name="M:FBA.ObjectRef.SetStateDate(System.String,System.String)">
            <summary>
            Присвоение свойства StateDate для определенного QueryName.
            Для указанного QueryName установить новую дату состояния. Если QueryName не указано, то дата состояния будет установлена для всех QueryName. 
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="stateDate">Дата состояния, на которую нужно записать объект</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetStateDateObject(System.String)">
            <summary>
            Для указанного QueryName получить дату состояния объекта. 
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Дата состояния в тестовом виде объекта из массива Ref</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetStateDateAttr(System.String,System.String)">
            <summary>
            Для указанного QueryName получить дату состояния атрибута. 
            </summary>
            <param name="queryName">Имя запроса</param>
            <param name="attrBrief">Сокращение атрибута</param>
            <returns>Дата состояния в тестовом виде объекта из массива Ref</returns>
        </member>
        <member name="M:FBA.ObjectRef.PrepareQuery(FBA.SQLCommand,System.String)">
            <summary>
            Подготовка запросов для обновления БД.
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса. Если пустое, то подготовка всех запросов</param>
        </member>
        <member name="M:FBA.ObjectRef.Send_UPDATE_INSERT_DELETE(FBA.SQLCommand,System.String)">
            <summary>
            Посылка всех запросов. command = "Update" или "Insert" или "Delete". Посылаются все запросы за раз.  
            Добавить, обновить, удалить все сущности можно за один раз.
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.TableQuery_UPDATE_INSERT_DELETE(FBA.SQLCommand,System.String)">
            <summary>
            Этот метод только если данные были прочитаны из таблицы с помощью SetQueryTable).
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
        </member>
        <member name="M:FBA.ObjectRef.EntityQuery_UPDATE_INSERT_Prepare(FBA.SQLCommand,System.String)">
            <summary>
            Это подготовка данных. Обновляется только поле Ref[j, iValueSave].	
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.EntityQuery_UPDATE_INSERT_DELETE_DataBase(FBA.SQLCommand,System.String)">
            <summary>
            Способ, если процедура сохранения объекта БД. Это способ, если есть процедура сохранения
            объекта в БД в виде хранимой процедуры spen_save_Object.
            Процедура spen_save_Object в данный момент сделана только для базы MSSQL.
            Поэтому можно вызывать либо EntityQuery_UPDATE_INSERT_DELETE_DataBase, либо EntityQuery_UPDATE_INSERT_DELETE_Client.
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.EntityQuery_GetMaxLevel(System.String)">
            <summary>
            Получение максимального уровня вложенности сущностей, с которого начинать проход по массиву.
            </summary>
            <param name="queryName">Имя запроса</param>
            <returns>Уровень вложенности</returns>
        </member>
        <member name="M:FBA.ObjectRef.CheckAddHistTable(System.String,System.String)">
            <summary>
            Проверить нужна ли запись в историчую таблицу TableName. Если записывать нечего, то false.
            </summary>
            <param name="tableName">Имя таблицы</param>
            <param name="queryName">Имя запроса</param>
            <returns>Если таблица, должна участвовать в запросах, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.EntityQuery_UPDATE_INSERT_DELETE_Client2(FBA.SQLCommand,System.String,System.String,System.String,System.String,System.Int32,System.String@,System.String@,System.String@)">
            <summary>
            Способ, если процедура сохранения объекта БД. Это способ, если нужно составить запросы не с помощью 
            хранимой процедуры spen_save_Object, а на клиенте.
            Сюда command = Auto нельзя передавать, только конкретное действие. 
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
            <param name="entityBrief">Сокращение сущности</param>
            <param name="entityID">ИД сущности</param>
            <param name="objectID">ИД объекта</param>
            <param name="maxLevel">Максимальный уровень вложенности сущностей, начиная с которого нужно осуществлять запись объекта.</param>
            <param name="scriptUpdate">SQL для Update</param>
            <param name="scriptInsert">SQL для Insert</param>
            <param name="scriptDelete">SQL для Delete</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.ObjectRef.GetQuery_UPDATE_INSERT_SaveObject(FBA.SQLCommand,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Сбока запросов по имени запроса QueryName, сущности EntityBrief, и уровня вложенности numlevel.	 
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
            <param name="entityBrief">Сокращение сущности</param>
            <param name="entityID">ИД сущности</param>
            <param name="tableName">Имя таблицы</param>
            <param name="tableType"></param>
            <param name="objectID">ИД объекта</param>
            <param name="idFieldName">Поле ключа таблицы</param>
            <param name="firstInsertID">Если нужно формаировать код для первой вставки объъекта и получения ИД вставленной записи</param>
            <param name="sql">Текст SQL запроса записи объекта</param>
        </member>
        <member name="M:FBA.ObjectRef.EntityQuery_UPDATE_INSERT_DELETE_Client1(FBA.SQLCommand,System.String)">
            <summary>
            Способ, если процедура сохранения объекта БД. Это способ, если нужно составить запросы не с помощью 
             хранимой процедуры spen_save_Object, а на клиенте.
            </summary>
            <param name="command">Команда из списка. Update, Insert, Delete</param>
            <param name="queryName">Имя запроса</param>
            <returns>Подготовка для записи объекта. Сборк всех запроса Update или Insert или Delete</returns>
        </member>
        <member name="P:FBA.ObjectRef.Item(System.String)">
            <summary>
            Дополнительная возможность писать через индекс. Индексатор для возможности писать так: Obj["Main1.Kind"] = "";
            где Main1.Kind - это TagStr.
            </summary>
        </member>
        <member name="T:FBA.ObjectRef.ObjectRefType">
            <summary>
            Тип записи в Ent.
            </summary>	
        </member>
        <member name="T:FBA.SysReportXLSX">
            <summary>
            Класс для печати отчетов Excel. А вот класса по печати в Word пока нет ещё, не сделан.
            </summary>
            <remarks>   
            Из текста, который указан в ячейке DataTable получаем формат.
            Пример в ячейке в DataTable есть такой текст: Петров А.С.{fontbold;fontcolor: 9;fontsize: 18}
            В отчете в ячейке напечатается только Петров А.С., а все что в фигурных скобках не напечатается,
            это информация для форматирования. Она перед выводом отчета будет удалена. Но формат ячеки будет изменён, согласно этой информации.
            Пробелы и регистр символов в самих параметрах не важны, например {Merge:1,0} и {Merge: 1, 0} и {MeRgE: 1,0} равнозначны.  
            Пример1:  Текст В Ячейке Таблицы{Merge: 1,0;ColWidth: 50;RowHeight: 100;}
            Пример2: Текст В Ячейке Таблицы{FontBold: 1; FontItalic: 1; FontUnderline: 2; StrikeThrough: 1; FontSize: 18}
            Пример3: Текст В Ячейке Таблицы{Merge: 1, 0; ColWidth: 50; RowHeight: 100; FontColor: 11; CellBold: 1}
            
            Параметры форматирования отдельной ячейки в таблице:
            (Вставляется вместе с текстом в ячейку DataTable или параметр TableCaption при вызове PutTable):
            Значения параметров: 1 - означает включить, 0 - выключить.
            FontName:       Имя шрифта. Здесь один текстовый параметр - имя шрифта без кавычек. Например {fontname: Arial}
            FontSize:       Размер шрифта. Одно число.  Например {fontsize: 18}
            FontColor:      Цвет шрифта. Только 1 или 0.  Например {fontcolor: 9}
            FontBold:       Жирный шрифт. Только 1 или 0.  Например {fontbold: 1}
            FontItalic:     Наклонный шрифт. Только 1 или 0.  Например {fontitalic: 1}
            Strikethrough:  Зачеркнутый шрифт. Только 1 или 0.  Например {strikethrough: 1}
            FontUnderline:  Подчеркнутый шрифт. Только 1 или 0.  Например {fontunderline: 1}
            Для BorderLine одно из значений: Dashed, Dotted, Double, Hair, Medium, DashDot, MediumDashDot, MediumDashDotDot, MediumDashed, SlantedDashDot, Thick, Thin
            BorderLineBottom:   {BorderLineBottom: Thin;}
            BorderLineLeft:     {BHorizontalAligmentorderLineBottom: Thick}
            BorderLineRight:    {BorderLineBottom: Double}
            BorderLineTop:      {BorderLineBottom: Medium}
            VerticalAligment одно из значений: Bottom, Center, Distributed, Justify, Top
            VerticalAligment:   {VerticalAligment: Top}
            HorizontalAligment одно из значений: Center, CenterSelection, Left, Right, Distributed, Fill, General, Justify
            HorizontalAligment: {HorizontalAligment: Center}
            Для BorderColor число в формате short. Пример 24, 26, 298.
            BorderColorBottom: Например {BorderColorBottom: 24}
            BorderColorLeft:   Например {BorderColorLeft: 26}
            BorderColorRight:  Например {BorderColorRight: 298}
            BorderColorTop:    Например {BorderColorTop: 5}
            WrapText:          Перенос по словам 0 или 1, Например. {WrapText: 1}
            ShrinkToFit:       Уменьшение размера шрифта, чтобы весь текст уместился в ячейке {ShrinkToFit: 1}
            FillBackgroundColor:  Не работает. {FillBackgroundColor: 100}
            FillForegroundColor: Цвет фона ячейки. {FillForegroundColor: 26}
            Formula: Вставить формулу в ячейку. Пример {Formula: 1}
            Merge: Объединение ячеек.  {Merge: 1,4}
                  Здесь два параметра - координаты нижней правой ячейки до которой нужно объединить.
                  Можно указывать числа заведомо превышающие кол-во строк или столбцов в таблице,
                  в этом случае объединение будет выполнено до самомго последнего столбца или строки.
                  Например {Merge: 1000000, 1000000;} объединие всех ячеек от текущей до самой правой нижней.
                  В параметре Merge сначала указывается на сколько столбцов объединить вправо, затем
                  на сколько строк вниз от текущей. т.е. {Merge: Col, Row;}, где Col - столбец, Row - строка.
                  {Merge: 1, 0;} - объединение текущей ячейки с одной ячейкой, находящейся справа.
                  {Merge: 0, 1;} - объединение текущей ячейки с одной ячейкой, находящейся под ней.
            ColWidth:  Ширина колонки. Например {ColWidth: 1}
            RowHeight:  Высота строки. Например {RowHeight: 1}
            BorderCell:  Рамка вокруг ячейки. Это проще чем писать границе для всех сторон Right, Bottom, Left, Top. Например {BorderCell: Thin}
            Пример печати отчета:
            DataTable DT;
            sys.SelectDT(DirectionQuery.Remote, "SELECT TOP 50 FaceID, Name FROM FacePerson", out DT);
            SysReportXLSX rep = new SysReportXLSX("ОтчетПоДоговорам", "", "", DT.Rows.Count + 1);   
            rep.PutTextAtBookmark("Bookmark_TextPosition",   "Специалист", "", "Вывод должности");
            rep.PutTableAtBookmark("Bookmark_Table1", DT, "ID|Фамилия", true, "", true, "Застрахованные");                        
            rep.SaveBook("", true); 
            </remarks>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportBrief">
            <summary>
            Сокращение отчета. 
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.Format">
            <summary>
            Расширение шаблона. 
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportType">
            <summary>
            Тип отчета.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportID">
            <summary>
            ИД отчета.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportName">
            <summary>
            Наименование отчета.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportTemplateFileName">
            <summary>
            Имя файла шаблона отчета, без полного пути.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportTemplateFullFileName">
            <summary>
            Имя файла шаблона c полным путём.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportOutputFullFileNameXLS">
            <summary>
            Имя файла XLS на выходе с полным путём.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ReportOutputFullFileNamePDF">
            <summary>
            Имя файла PDF на выходе с полным путём.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.book">
            <summary>
            Книга.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.sheet">
            <summary>
            Текущий лист.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.CurrentSheetName">
            <summary>
            Имя листа отчета Excel, куда печатаем.    
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.Bookmarks">
             <summary>
            Массив для закладок в шаблоне Excel. 
             Сюда будет записываться все данные шаблона.  
             </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.BookmarkCount">
            <summary>
            Количество заполненных строк в массиве.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ShowError">
            <summary>
            Показывать или нет сообщения об ошибках.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ForegroundColorOdd">
            <summary>
             Цвет текста через строку.
             По умолчанию 220 - Светло-серый. 
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ForegroundColorCaption">
            <summary>
             Цвет текста шапки.
             По умолчанию 298 - Светло-зелёный.. 
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.ForegroundColor">
            <summary>
            Цвет текста. По умолчанию 1 = Белый
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.CaptionHeight">
            <summary>
            Высота строки заголовка таблицы. По умолчанию 500.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.FormatTableOdd">
            <summary>
            Выводить строки таблицы разными цветами через одну. По умолчанию true.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.errorCount">
            <summary>
            Количество ошибок.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.Test">
            <summary>
            Тестовый режим. Замедляет вывод.
            </summary>
        </member>
        <member name="F:FBA.SysReportXLSX.Progress">
            <summary>
            Форма прогресс бара.
            </summary>
        </member>
        <member name="M:FBA.SysReportXLSX.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Конструктор. Можно указывать либо Brief отчета, либо его ID.
            </summary>
            <param name="reportBrief">Сокращение отчета</param>
            <param name="progressFormCaption">Текста заголовка формы прогресс-бара при выводе отчета</param>
            <param name="progressLabelCaption">Текст в окне прогресс-бара</param>
            <param name="stepCount">Количество шагов прогресс-бара</param>
        </member>
        <member name="M:FBA.SysReportXLSX.SearchReport(System.String)">
            <summary>
            Поиск ID отчета, наименования отчета и имени файла шаблона по сокращению шаблона, или по его ID.  
            </summary>
            <param name="reportBrief">Сокращение отчета</param>
            <returns>Если отчет найден, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.ReportPrepare">
            <summary>
            Подготовка отчета XLS.
            </summary>
            <returns>Если успешно, то true.</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.SetFormatCell(NPOI.SS.UserModel.ICell,System.String)">
            <summary>
            Создаем формат ячейки, согласно указанному в переменной FormatCell.
            </summary>
            <param name="cell">Ячейка. Тип NPOI.SS.UserModel.ICell.</param>
            <param name="formatCell">Формат ячейки. Описание формата в заголовке класса.</param>
        </member>
        <member name="M:FBA.SysReportXLSX.SetDefaultStyle">
            <summary>
            Создаем формат ячейки, согласно указанному в переменной FormatCell.
            </summary>
        </member>
        <member name="M:FBA.SysReportXLSX.SetSampleStyle(NPOI.SS.UserModel.ICell,System.Int16)">
            <summary>
            Для разработки. Проверка цветов типа short для NPOI.
            </summary>
            <param name="cell">Ячейка. Тип NPOI.SS.UserModel.ICell. </param>
            <param name="indexcolor">Цвет ячейки.</param>
        </member>
        <member name="M:FBA.SysReportXLSX.GetBookmarkPoint(System.String,System.Int32@,System.Int32@)">
            <summary>
            Поиск местоположения закладки.
            </summary>
            <param name="bookmark">Закладка</param>
            <param name="rowIndex">Индекс строки</param>
            <param name="columnIndex">Индекст колонки</param>
            <returns>Если закладка найдена, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.ParseTemplate(System.Int32@)">
            <summary>
            Поиск местоположения закладок во всей книге.
            </summary>
            <param name="bookmarkCount">Количество найденных закладок.</param>
            <returns>Если закладки найдены, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.PutTextAtPoint(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Печать текста в место с кординатами int row, int col.
            </summary>
            <param name="rowIndex">Индекс строки</param>
            <param name="columnIndex">Индекс колонки</param>
            <param name="textCell">Текст в ячейке</param>
            <param name="formatCell">Формат ячейки. Описание формата в заголовке класса</param>
            <param name="progressText">Текст, выводимый в прогресс-баре</param>
            <returns>Если ошибок нет при выводе, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.PutTextAtBookmark(System.String,System.String,System.String,System.String)">
            <summary>
            Печать текста в место, на которое указывает текст в ячейке.
            </summary>
            <param name="bookmark">Закладка</param>
            <param name="textCell">Текст в ячейке.</param>
            <param name="formatCell">Формат ячейки. Описание формата в заголовке класса</param>
            <param name="progressText">Текст, выводимый в прогресс-баре</param>
            <returns>Если ошибок нет при выводе, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.PutTableAtPoint(System.Int32,System.Int32,System.Data.DataTable,System.String,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Печать таблицы DT в место с кординатами int row, int col.    
            ПроизвольныйТектВЯчейке{Merge: 1, 0; ColWidth: 50; RowHeight:100; FontColor:11; FontName:Arial; FontSize:11; FontBold:1; FontItalic:1; FontStrike:1; FontUnderline:1,1}
            Где ПроизвольныйТектВЯчейке - это то что должно отображаться в ячейке в excel.
            Выражение в фигурных скобках - это пример форматирования ячеки.        
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <param name="dt"></param>
            <param name="tableCaption"></param>
            <param name="defaultFormat">Первая строка жирная</param>
            <param name="formatTable">Строка с описанием формата</param>
            <param name="shiftRows">Сдвигать строки при выводе таблицы, или заменять</param>
            <param name="progressText">Текст, выводимый в прогресс-баре</param>
            <returns>Если ошибок нет при выводе, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.PutTableAtBookmark(System.String,System.Data.DataTable,System.String,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Печать таблицы DT в место, на которое указывает текст Bookmark в какой либо ячейке шаблона.             
            </summary>
            <param name="bookmark"></param>
            <param name="dt">DataTable - таблица для вывода в отчет</param>
            <param name="tableCaption"></param>
            <param name="defaultFormat">Первая строка жирная</param>
            <param name="formatTable">Строка с описанием формата</param>
            <param name="shiftRows">Сдвигать строки при выводе таблицы, или заменять. </param>
            <param name="progressText">Текст, выводимый в прогресс-баре</param>
            <returns>Если ошибок нет при выводе, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.GetParam(System.String[],System.String,System.String@,System.String@)">
            <summary>
            Возвращение параметров из массива параметров FormatArray. Для разбора строки формата.  
            Всего может быть две части параметра
            </summary>
            <param name="formatArray">Весь массив параметров</param>
            <param name="paramIN">Искомый параметр</param>
            <param name="param1">Часть параметра 1</param>
            <param name="param2">Часть параметра 2</param>
            <returns></returns>
        </member>
        <member name="M:FBA.SysReportXLSX.GetFormatCellString(System.String,System.String@,System.String@)">
            <summary>
            Разделение на две части: сама строка и строка с массивом параметров. 
            Пример Value = abc{ Merge: 1, 0; ColWidth: 50; RowHeight: 100; FontColor: 11; CellBold: 1; }, то:
            TextCell = abc
            FormatCell = Merge: 1, 0; ColWidth: 50; RowHeight: 100; FontColor: 11; CellBold: 1;		
            </summary>
            <param name="value">Значение в ячейке</param>
            <param name="textCell">Текст значения</param>
            <param name="formatCell">Формат текста значения</param>
        </member>
        <member name="M:FBA.SysReportXLSX.SetCurrentSheet(System.Int32)">
            <summary>
            Команда установки текущего листа по индексу листа.
            </summary>
            <param name="sheetIndex">Индекс листа в книге</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.SetCurrentSheet(System.String)">
            <summary>
            Команда установки текущего листа по имени листа.
            </summary>
            <param name="sheetName">Имя личта в книге</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.SysReportXLSX.SaveToExcel(System.String,System.Boolean)">
            <summary>
            Сохранение напечатанного отчета на диск в формате XLSX.
            </summary>
            <param name="fileName">Имя файла, куда сохраняем.</param>
            <param name="openAfterSave">Открыть после сохранения</param>
            <returns></returns>
        </member>
        <member name="M:FBA.SysReportXLSX.ExportToPDF(System.String,System.String,System.Boolean)">
            <summary>
            Конвертация Excel в PDF.
            </summary>
            <param name="fileNameXLS">Путь к файлу Excel</param>
            <param name="fileNamePDF">Путь к файлу PDF</param>
            <param name="openAfterSave">Открыть PDF в программе по умолчанию после формирования</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="T:FBA.ServerWork">
            Класс в отдельном потоке, позволяющий принимать сообщения от сервера приложений.
            Этот код на клиенте - запускается сервер HTTP. Это нужно для того, чтобы 
            принимать периодические сообщения от сервера приложений.
            Этот класс можно было бы разместить в Program.cs, но вынесен в отдельный файл для удобства.
        </member>
        <member name="M:FBA.ServerWork.ServerStart(System.Windows.Forms.Form)">
            Запуск сервера на клиенте.
        </member>
        <member name="M:FBA.ServerWork.ServerStop">
            Остановка сервера на клиенте.
        </member>
        <member name="M:FBA.ServerWork.ServerQueueHTTP">
            Очередь HTTP сервера. 
        </member>
        <member name="M:FBA.ServerWork.ServerProcessHTTP(System.Object)">
            Обработка запроса от клиента HTTP.В Данном случае у нас сервер приложений является клиентом.
            Так как на каждом клиенте запускается сервер HTTP.        
        </member>
        <member name="T:FBA.Connection">
            Класс соединения с БД.
        </member>
        <member name="F:FBA.Connection.ConnectionID">
            <summary>
            ИД соединения. Это GUID.
            </summary>
        </member>
        <member name="F:FBA.Connection.ConnectionActive">
            <summary>
            Признак активного соединения.
            </summary>
        </member>
        <member name="F:FBA.Connection.ConnectionDirect">
            <summary>
            Работа с запросами через сервер прилоежений (false) или прямое подключение (true).    
            </summary>
        </member>
        <member name="F:FBA.Connection.ConnectionGUID">
            <summary>
            Текущий GUID, выданый сервером проложений по которому определяется Connection к БД.
            Это основой GUID сессии приложения, возвращенный сервером приложений. В рамках сессии выполняются транзакции.
            Для того чтобы выполнить новую транзакцию, пока не закончилась предыдущая, нужно получить от сервера приложений 
            новый GUID соединения с БД (т.е. новый Connection).
            </summary>        
        </member>
        <member name="F:FBA.Connection.Name">
            <summary>
            Имя данного объекта Connection. Используется для того чтобы разделить команды к серверу приложений.
            </summary>                                       
        </member>
        <member name="F:FBA.Connection.ConnectionName">
            <summary>
            Имя соединения в локальной базе SQLite.        
            </summary>
        </member>
        <member name="F:FBA.Connection.ServerName">
            <summary>
            Имя сервера СУБД.
            </summary>
        </member>
        <member name="F:FBA.Connection.serverType">
            <summary>
            Допустимые значения: MSSQL, Postgre, SQLite, ServerApp.
            </summary>
        </member>
        <member name="F:FBA.Connection.serverTypeRemote">
            <summary>
            Это тип удаленного подключения, если соединение через сервер приложений.
            Если подключение к БД локальное, то ConnectionDirect = true и тогда в serverType что-то 
            одно из MSSQL, Postgre, SQLite. 
            </summary>
        </member>
        <member name="F:FBA.Connection.DatabaseName">
            <summary>
            База СУБД на сервере.
            </summary>
        </member>
        <member name="F:FBA.Connection.DatabaseLogin">
            <summary>
            База СУБД - логин. 
            </summary>
        </member>
        <member name="F:FBA.Connection.DatabasePass">
            <summary>
            База СУБД - пароль.   
            </summary>
        </member>
        <member name="F:FBA.Connection.UserForm">
            <summary>
            Имя формы для запуска.   
            </summary>        
        </member>
        <member name="F:FBA.Connection.UserLogin">
            <summary>
            Логин пользователя в таблице fbaUser.   
            </summary>
        </member>
        <member name="F:FBA.Connection.UserPass">
            <summary>
            Пароль пользователя в таблице fbaUser.  
            </summary>
        </member>
        <member name="F:FBA.Connection.ServerAppIP">
            <summary>
            IP сервера приложений.
            </summary>        
        </member>
        <member name="F:FBA.Connection.ServerAppName">
            <summary>
            Имя сервера прилоежний.
            </summary>
        </member>
        <member name="F:FBA.Connection.ServerAppPort">
            <summary>
            На каком порту обмениваемся сообщениями с сервером приложений. По умолчанию 7145.
            </summary>
        </member>
        <member name="F:FBA.Connection.WindowsLogin">
            <summary>
            Признак что авторизация через логин Windows.
            </summary>
        </member>
        <member name="F:FBA.Connection.LastQueryDateTime">
            <summary>
            Дата и время последнего  запроса.
            </summary>
        </member>
        <member name="M:FBA.Connection.#ctor">
            <summary>
            Конструктор без инициализацией подключения.
            </summary>
        </member>
        <member name="M:FBA.Connection.#ctor(FBA.ServerType,System.String,System.String,System.String,System.String)">
            Конструктор с инициализацией подключения.
        </member>
        <member name="M:FBA.Connection.ConnectionSetLocal">
            <summary>
            Установка соединения с SQLite;
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.ConnectionInit(FBA.ServerType,System.String,System.String,System.String,System.String)">
            <summary>
            Соединение с БД
            </summary>
            <param name="serverType">ServerType: MSQL, Postrgre, SQLite</param>
            <param name="serverName">Имя сервера и порт, пример http://MyServer:9590</param>
            <param name="databaseLogin">Логин к БД</param>
            <param name="databasePass">Пароль к БД</param>
            <param name="databaseName">Имя БД</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.ConnectionInitDataBase">
            <summary>
            Функция инициализации подключения к базе данных.
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.ConnectionInitApp">
            <summary>
            Функция инициализации подключения к серверу приложений.
            Метод объявлен private чтобы не было возможности вызвать его из прикладного кода.
            Есть аналогичная процедура получения параметров подключения из БД SQLite.          
            Метод возвращает все настройки соединения по имени соединения.  
            Пример того что отсылаем:                   
            LocalIP=10.77.70.39;LocalHost=COM1389;ComputerName=ANDREY;ComputerUserName=ANDREY;          
            </summary>	
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.ParseResponse(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получить параметры, переданные клиентом в запросе серверу.
            </summary>
            <param name="requestStr"></param>
            <param name="guid"></param>
            <param name="connectionDirect"></param>
            <param name="connectionName"></param>
            <param name="serverName"></param>
            <param name="serverTypeL"></param>
            <param name="databaseName"></param>
            <param name="databaseLogin"></param>
            <param name="databasePass"></param>
            <param name="userForm"></param>
            <param name="userLogin"></param>
            <param name="userPass"></param>
        </member>
        <member name="M:FBA.Connection.ConnectionGetParamName(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Метод возвращает все настройки соединения по имени соединения из табицы ConnectionList.	
            </summary>
            <param name="connectionName"></param>
            <param name="connectionID"></param>
            <param name="serverType"></param>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <param name="databaseLogin"></param>
            <param name="databasePass"></param>
            <param name="userForm"></param>
            <param name="userLogin"></param>
            <param name="userPass"></param>
            <param name="windowsLogin"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Connection.ConnectionClose">
            <summary>
            Функция закрытия соединения с БД.   
            </summary>	
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.GetValue(System.String)">
            <summary>
            Получение одного значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <returns>Одно значение полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue2(System.String,System.String@,System.String@)">
            <summary>
            Получение 2-х значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns>2 значения полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue3(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Получение 3-х значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <returns>3 значения полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue4(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 4-ми значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <returns>4 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue5(System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 5-ми значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <param name="s5"></param>
            <returns>5 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue6(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 6-ми значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <param name="s5"></param>
            <param name="s6"></param>
            <returns>6 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue7(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 7-ми значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <param name="s5"></param>
            <param name="s6"></param>
            <param name="s7"></param>
            <returns>7 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue8(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 8-ми значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <param name="s5"></param>
            <param name="s6"></param>
            <param name="s7"></param>
            <param name="s8"></param>   
            <returns>8 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue9(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 9-х значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <param name="s5"></param>
            <param name="s6"></param>
            <param name="s7"></param>
            <param name="s8"></param>
            <param name="s9"></param>      
            <returns>9 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValue10(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Получение 10-ти значений.
            </summary>
            <param name="sql">Запрос SQL</param>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="s3"></param>
            <param name="s4"></param>
            <param name="s5"></param>
            <param name="s6"></param>
            <param name="s7"></param>
            <param name="s8"></param>
            <param name="s9"></param>
            <param name="s10"></param>
            <returns>10 значений полученных запросом. Запрос должен возвращать одну строку</returns>
        </member>
        <member name="M:FBA.Connection.GetValueArr(System.String,System.String[]@)">
            <summary>
            Получение больше 10-ти значений. В массиве строк.
            </summary>
            <param name="sql"></param>
            <param name="arr">Возвращает список значений в виде массива</param>
            <returns></returns>
        </member>
        <member name="M:FBA.Connection.SelectGV(System.String,System.Windows.Forms.DataGridView)">
            <summary>
            Функции получения данных для MSSQL, Postgre, SQLite. Результат в DataGridView.  
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="grid">DataGridView</param>
            <returns></returns>
        </member>
        <member name="M:FBA.Connection.SelectDT(System.String,System.Data.DataTable@)">
            <summary>
            Функция получения данных для MSSQL, Postgre, SQLite. Результат в DataTable. Возвращает только одну таблицу. 	
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="dt"></param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.SelectDS(System.String,System.Data.DataSet@)">
            <summary>
            Функция получения данных для MSSQL, Postgre, SQLite. Результат в DataSet. Возвращает несколько таблиц. 
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="ds">DataSet - набор таблиц</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.SelectDS(System.String,System.Data.DataSet@,System.String@,System.Boolean)">
            <summary>
            Функция получения данных для MSSQL, Postgre, SQLite. Результат в DataSet. Возвращает несколько таблиц. 
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="ds">DataSet - набор таблиц</param>
            <param name="errorMes">Сообщение об ошибке</param>
            <param name="errorShow">Показывать или нет ошибки</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.GetInsertID">
            <summary>
            Получить код для получения ID вставленной/изменённой записи.
            Postgre: "; RETURNING id; ";                     
            MSSQL:   "; SELECT @@IDENTITY AS id; ";                                          
            SQLite:  "; SELECT last_insert_rowid() AS id; "; 
            </summary>
            <returns>Одно из трёх текстовых значений</returns>
        </member>
        <member name="M:FBA.Connection.Exec(System.String)">
            <summary>
            Выполнить запрос SQL.
            </summary>
            <param name="sql">Запрос SQL</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.Exec(System.String,System.Boolean,System.String@)">
            <summary>
            Выполнить запрос SQL
            </summary>
            <param name="sql"></param>
            <param name="addInsertID">Если true, то добавляется код для получения ИД последней изменённой записи
            Postgre: "; RETURNING id; ";                     
            MSSQL:   "; SELECT @@IDENTITY AS id; ";                                          
            SQLite:  "; SELECT last_insert_rowid() AS id; "; 
            </param>
            <param name="id">ИД последней изменённой записи</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.AppSelectDS(System.String,System.Data.DataSet@)">
            <summary>
            Послать SQL запрос SELECT на сервер приложений.
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="ds">DataSet</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Connection.AppSelectDT(System.String,System.Data.DataTable@)">
            <summary>
            Послать SQL запрос SELECT на сервер приложений. Получить таблицу DataTable.
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="dt">System.Data.DataTable</param>
            <returns>Если успешно, то true</returns>                             
        </member>
        <member name="M:FBA.Connection.AppQuery(FBA.TypeQuery,System.Int32,System.String,System.Data.DataSet@)">
            <summary>
            Послать запрос SQL на сервер приложений.
            </summary>
            <param name="typeQuery">TypeQuery: Select или Exec</param>
            <param name="numQuery">Счётчик запросов. Если подключения нет, то устанавливаем автоматически. 
            Этот счётчик, чтобы не зациклиться, если соединение не удалось. Так как процедура вызывается рекурсивно.</param>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="ds">System.Data.DataSet</param>
            <returns>Если успешно, то true</returns>         
        </member>
        <member name="M:FBA.Connection.SelectCount(System.String)">
            <summary>
            Возвращает количество записей, которые получаются после выполнения запроса SQL. 
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <returns>Если успешно, то true</returns>   
        </member>
        <member name="M:FBA.Connection.SelectCB(System.String,System.Windows.Forms.ComboBox)">
            <summary>
            Функции получения данных для MSSQL, Postgre, SQLite. Результат в ComboBox. 
            </summary>
            <param name="sql">Запрос любой, select, update, delete, ddl</param>
            <param name="cb">ComboBox</param>
            <returns>Если успешно, то true</returns>   
        </member>
        <member name="M:FBA.Connection.GetServerDate">
            <summary>
            Текущая дата на сервере.
            Postgre = SELECT current_timestamp AS CurrentDateTime   	
            MSSQL   = SELECT datetime('now', 'localtime') AS CurrentDateTime       
            SQLite  = SELECT GetDate() AS CurrentDateTime
            </summary>
            <returns>Дата на сервере</returns>
        </member>
        <member name="M:FBA.Connection.MSSQLCopyTableToServer(System.Data.DataTable,System.String)">
            <summary>
            Копирование таблицы DataTable на сервер MSSQL. Для SQLite и Postrgres нужно действовать через создание INSERT.
            </summary>
            <param name="dt">DataTable</param>
            <param name="tableName">В какую таблицу на сервере копируем</param>
            <returns>Если успешно, то true</returns>   
        </member>
        <member name="T:FBA.Protector">
            <summary>
            Класс для шифрования
            </summary>
        </member>
        <member name="M:FBA.Protector.GetProcessor_ID">
            <summary>
            Метод для получения ProcessorID
            </summary>
            <returns>ProcessorID</returns>
        </member>
        <member name="M:FBA.Protector.GetMotherBoard_ID">
            <summary>
            Метод для получения MotherBoardID
            </summary>
            <returns>ИД материнской платы</returns>
        </member>
        <member name="M:FBA.Protector.GetVideoAdapter_ID">
            <summary>
            Метод для получения ИД видеокарты
            </summary>
            <returns>ИД видеокарты</returns>
        </member>
        <member name="T:FBA.Crypto">
            <summary>
            Статический класс. Шифровка/расшифровка. 
            </summary>
        </member>
        <member name="M:FBA.Crypto.MD5(System.String)">
            Получение хеша MD5 строки. Эта функция не связана с EncryptStringAES и DecryptStringAES.
        </member>
        <member name="M:FBA.Crypto.EncryptAES(System.String,System.String)">
            <summary>
            Шифрование по алгоритму AES.
            </summary>
            <param name="inputStr">Входная строка, которую нужно зашифровать</param>
            <param name="secret">Ключ шифрования</param>
            <returns>Зашифрованная строка</returns>
        </member>
        <member name="M:FBA.Crypto.DecryptAES(System.String,System.String)">
            <summary>
            Расшифровка по алгоритму AES.
            </summary>
            <param name="inputStr">Входная строка, которую нужно расшифровать</param>
            <param name="secret">Ключ шифрования</param>
            <returns>Расшифрованная строка</returns>
        </member>
        <member name="M:FBA.Crypto.FileHashMD5Write(System.String,System.String)">
            <summary>
            Записать Hash MD5 в конец файла. MD5 всегда 32 байта. 
            Это нужно для того чтобы однозначно отличить один файл от другого. 
            Используется для сверки верии подгружаемых проектов
            </summary>
            <param name="fileName">Имя файла, в конец которго нужно добавить Hash</param>
            <param name="hashMD5">MD5</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.Crypto.FileHashMD5Read(System.String)">
            <summary>
            Считать Hash MD5, записанный в конец файла. MD5 Всегда 32 байта.
            Если в конце фафла нет MD5 - все равно функция вернёт последние 32 байта.
            </summary>
            <param name="fileName">Произвольный файл</param>
            <returns>Последние 32 байта файла</returns>
        </member>
        <member name="M:FBA.Crypto.FileHashMD5Calc(System.String)">
            <summary>
            Вычислить Hash MD5 файла. MD5 Всегда 32 байта.
            </summary>
            <param name="fileName">Имя произвольного файла</param>
            <returns>MD5 - 32 символа</returns>
        </member>
        <member name="T:FBA.enuSupportedCurrencies">
            <summary>
            Валюты, с которыми мы умеем работать
            </summary>
        </member>
        <member name="F:FBA.enuSupportedCurrencies.eiHryvna">
            Гривна			
        </member>
        <member name="F:FBA.enuSupportedCurrencies.eiRoubles">
            Рубль	
        </member>
        <member name="F:FBA.enuSupportedCurrencies.eiDollar">
            Доллар		
        </member>
        <member name="F:FBA.enuSupportedCurrencies.eiEURO">
            Евро 
        </member>
        <member name="T:FBA.Money">
            <summary>
            Сумма прописью.
            </summary>
        </member>
        <member name="M:FBA.Money.#ctor(System.Double)">
            <summary>
            Конструкторы.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FBA.Money.#ctor(System.Int64,System.Byte)">
            <summary>
            Money
            </summary>
            <param name="high"></param>
            <param name="low"></param>
        </member>
        <member name="M:FBA.Money.#ctor(System.Int64)">
            <summary>
            Вспомогательный конструктор.
            </summary>
            <param name="copecks"></param>
        </member>
        <member name="M:FBA.Money.Abs">
            <summary>
            Абсолютная величина.	
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Add(FBA.Money)">
            <summary>
            Сложение - функциональная форма.	 
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Subtract(FBA.Money)">
            <summary>
            Вычитание - функциональная форма 
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Multiply(System.Double)">
            <summary>
            Умножение - функциональная форма.	
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Divide(System.Double)">
            <summary>
            Деление - функциональная форма.	
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.GetRemainder(System.UInt32)">
            <summary>
            Остаток от деления нацело - функциональная форма.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.CompareTo(FBA.Money)">
            <summary>
            Сравнение - функциональная форма.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Share(System.UInt32)">
            <summary>
            Деление на одинаковые части.
             Количество частей должно быть не меньше 2.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Allocate(System.UInt32[])">
            <summary>
            Деление пропорционально коэффициентам.
            Количество коэффициентов должно быть не меньше 2.
            </summary>
            <param name="ratios"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.Equals(System.Object)">
            <summary>
            Перекрытые методы Object
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.GetHashCode">
            <summary>
            GetHashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.ToString(System.IFormatProvider)">
            <summary>
            Преобразования в строку аналогично double.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.ToString(System.String)">
            <summary>
            ToString
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.ToString(System.String,System.IFormatProvider)">
            <summary>
            ToString
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_UnaryPlus(FBA.Money)">
            <summary>
            Унарные операторы.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_UnaryNegation(FBA.Money)">
            <summary>
            operator-
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Increment(FBA.Money)">
            <summary>
            operator++
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Decrement(FBA.Money)">
            <summary>
            operator--
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Addition(FBA.Money,FBA.Money)">
            <summary>
            Бинарные операторы.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Subtraction(FBA.Money,FBA.Money)">
            <summary>
            operator-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Multiply(System.Double,FBA.Money)">
            <summary>
            operator*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Multiply(FBA.Money,System.Double)">
            <summary>
            operator*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Division(FBA.Money,System.Double)">
            <summary>
             operator/
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Modulus(FBA.Money,System.UInt32)">
            <summary>
             operator%
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Equality(FBA.Money,FBA.Money)">
            <summary>
            operator==
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Inequality(FBA.Money,FBA.Money)">
            <summary>
            operator!=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_GreaterThan(FBA.Money,FBA.Money)">
            <summary>
            operator>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_LessThan(FBA.Money,FBA.Money)">
            <summary>
            operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_GreaterThanOrEqual(FBA.Money,FBA.Money)">
            <summary>
            operator>=
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_LessThanOrEqual(FBA.Money,FBA.Money)">
            <summary>
            operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Implicit(FBA.Money)~System.Double">
            <summary>
            Операторы преобразования.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.Money.op_Explicit(System.Double)~FBA.Money">
            <summary>
            explicit operator
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="P:FBA.Money.High">
            <summary>
            Количество гривень.
            </summary>
        </member>
        <member name="P:FBA.Money.Low">
            <summary>
            Количество копеек.
            </summary>	
        </member>
        <member name="T:FBA.IMoneyToStringProvider">
            <summary>
            Интерфейс специализированного провайдера преобразования денег в строковое представление
            </summary>
        </member>
        <member name="M:FBA.IMoneyToStringProvider.MoneyToString(FBA.Money)">
            <summary>
            MoneyToString
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:FBA.NumberToRussianString">
            <summary>
            Преобразование числа в строку = число прописью
            </summary>
        </member>
        <member name="F:FBA.NumberToRussianString.number0">
            Строковые представления чисел.
        </member>
        <member name="M:FBA.NumberToRussianString.TernaryToString(System.Int64,FBA.NumberToRussianString.WordGender)">
            Функция преобразования 3-значного числа, заданного в виде строки,
            с учетом рода (мужской, женский или средний).
            Род учитывается для корректного формирования концовки:
            "один" (рубль) или "одна" (тысяча)		
        </member>
        <member name="M:FBA.NumberToRussianString.NumberToString(System.Int64,FBA.NumberToRussianString.WordGender)">
            Функция возвращает число прописью с учетом рода единицы измерения 		
        </member>
        <member name="M:FBA.NumberToRussianString.GetWordMode(System.Int64)">
            Определение варианта написания единицы измерения по 3-х значному числу 		 
        </member>
        <member name="T:FBA.NumberToRussianString.WordGender">
            Род единицы измерения.
        </member>
        <member name="F:FBA.NumberToRussianString.WordGender.Masculine">
            мужской		  
        </member>
        <member name="F:FBA.NumberToRussianString.WordGender.Feminine">
            женский	 
        </member>
        <member name="F:FBA.NumberToRussianString.WordGender.Neuter">
            средний		 
        </member>
        <member name="T:FBA.NumberToRussianString.WordMode">
            Варианты написания единицы измерения. 
        </member>
        <member name="F:FBA.NumberToRussianString.WordMode.Mode1">
            рубль	  
        </member>
        <member name="F:FBA.NumberToRussianString.WordMode.Mode2_4">
            рубля		 
        </member>
        <member name="F:FBA.NumberToRussianString.WordMode.Mode0_5">
            рублей
        </member>
        <member name="T:FBA.MoneyToStringProviderBase">
            <summary>
            Преобразование денег в сумму прописью.
            </summary>
        </member>
        <member name="M:FBA.MoneyToStringProviderBase.GetGender(System.Boolean)">
            <summary>
            GetGender
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.MoneyToStringProviderBase.GetName(FBA.NumberToRussianString.WordMode,System.Boolean)">
            <summary>
            Функция возвращает наименование денежной единицы в соответствующей форме
            (1) рубль / (2) рубля / (5) рублей
            </summary>
            <param name="wordMode"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.MoneyToStringProviderBase.GetShortName(System.Boolean)">
            <summary>
            Функция возвращает сокращенное наименование денежной единицы
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.MoneyToStringProviderBase.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="shortHigh"></param>
            <param name="shortLow"></param>
            <param name="digitLow"></param>
        </member>
        <member name="M:FBA.MoneyToStringProviderBase.GetFormat(System.Type)">
            <summary>
            Реализация интерфейса IMoneyToStringProvider
            Метод родительского интерфейса IFormatProvider
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.MoneyToStringProviderBase.MoneyToString(FBA.Money)">
            <summary>
            Функция возвращает число рублей и копеек прописью
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:FBA.EuroToStringProvider">
            <summary>
            Преобразование европейских денег (евро + центы) в сумму прописью.
            </summary>
        </member>
        <member name="M:FBA.EuroToStringProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            EUROToStringProvider
            </summary>
            <param name="shortEURO"></param>
            <param name="shortCent"></param>
            <param name="digitCent"></param>
        </member>
        <member name="M:FBA.EuroToStringProvider.GetGender(System.Boolean)">
            <summary>
            GetGender
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.EuroToStringProvider.GetName(FBA.NumberToRussianString.WordMode,System.Boolean)">
            <summary>
            GetName
            </summary>
            <param name="wordMode"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.EuroToStringProvider.GetShortName(System.Boolean)">
            <summary>
            GetShortName
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="T:FBA.HryvnaToStringProvider">
            <summary>
            Преобразование украинских денег (грн + копейки) в сумму прописью
            </summary>
        </member>
        <member name="M:FBA.HryvnaToStringProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            HryvnaToStringProvider
            </summary>
            <param name="shortHrn"></param>
            <param name="shortCopecks"></param>
            <param name="digitCopecks"></param>
        </member>
        <member name="M:FBA.HryvnaToStringProvider.GetGender(System.Boolean)">
            <summary>
            GetGender
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.HryvnaToStringProvider.GetName(FBA.NumberToRussianString.WordMode,System.Boolean)">
            <summary>
            GetName
            </summary>
            <param name="wordMode"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.HryvnaToStringProvider.GetShortName(System.Boolean)">
            <summary>
            GetShortName
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="T:FBA.RoubleToStringProvider">
            <summary>
            Преобразование русских денег (рубли + копейки) в сумму прописью. 
            </summary>
        </member>
        <member name="M:FBA.RoubleToStringProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            RoubleToStringProvider
            </summary>
            <param name="shortRoubles"></param>
            <param name="shortCopecks"></param>
            <param name="digitCopecks"></param>
        </member>
        <member name="M:FBA.RoubleToStringProvider.GetGender(System.Boolean)">
            <summary>
            GetGender
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.RoubleToStringProvider.GetName(FBA.NumberToRussianString.WordMode,System.Boolean)">
            <summary>
            GetName
            </summary>
            <param name="wordMode"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.RoubleToStringProvider.GetShortName(System.Boolean)">
            <summary>
            GetShortName
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="T:FBA.DollarToStringProvider">
            <summary>
            Преобразование американских денег (доллары + центы) в сумму прописью.
            </summary>
        </member>
        <member name="M:FBA.DollarToStringProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            DollarToStringProvider
            </summary>
            <param name="shortDollar"></param>
            <param name="shortCent"></param>
            <param name="digitCent"></param>
        </member>
        <member name="F:FBA.DollarToStringProvider.dollars">
            варианты написания долларов
        </member>
        <member name="F:FBA.DollarToStringProvider.cents">
            варианты написания центов	
        </member>
        <member name="M:FBA.DollarToStringProvider.GetGender(System.Boolean)">
            <summary>
            GetGender
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.DollarToStringProvider.GetName(FBA.NumberToRussianString.WordMode,System.Boolean)">
            <summary>
            GetName
            </summary>
            <param name="wordMode"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.DollarToStringProvider.GetShortName(System.Boolean)">
            <summary>
            GetShortName
            </summary>
            <param name="high"></param>
            <returns></returns>
        </member>
        <member name="T:FBA.SysUpdate">
            <summary>
            Статический класс. Класс для обновления программы.
            </summary>
        </member>
        <member name="M:FBA.SysUpdate.UpdateProgram(System.Boolean,System.String@)">
            <summary>
            Обновление программы. Главный метод запуска обновления.
            </summary>
            <param name="showMes">Показыват сообщения об ошибках</param>
            <param name="resultMessage">Собщение пользователю после завершения обновления</param>
            <returns></returns>
        </member>
        <member name="M:FBA.SysUpdate.UpdateRun">
            <summary>
            Запуск EXE файла, который копирует файлы обновления, после того как они были загружены с сервера.
            После скачивания обновления текущей программой (это может быть ClientApp, Utility)
            запускается эта процедура, которая запускает обновляльщик (Update.exe) и завершает текущую программу.
            Обновляльщик ждет некоторое время, если запущены какие либо exe файлы, 
            то пытается остановить их работу и если все успешно, то копирует файлы обновления
            </summary>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.SysUpdate.UpdateCheck(System.String@,System.String@,System.String@,System.Boolean)">
            <summary>
            Проверка на то что нужно обновить программу.
            </summary>
            <param name="version"></param>
            <param name="numberUpdate"></param>
            <param name="resultMessage"></param>  
            <param name="showMes">Показывать сообщения об ошибках</param>
            <returns></returns>
        </member>
        <member name="M:FBA.SysUpdate.UpdateDownload(System.String,System.String,System.String@,System.Boolean@,System.Boolean)">
            <summary>
            Проверить неоходимость обновления и скачать обновление программы.
            Обновление работает так:
            Для того чтобы скачать обновление и обновиться нужно обновление закачать на сервер.
            Обновление exe файлов и других файлов клиента возможно только из рабочей базы данных.
            Обновление из файловой шары или из ресурса в интернете не сделано.
            Закачивает обновление на сервер программа Utility.exe. 
            В её коде присаны все файлы, папки, которые нужно закачать на сервер.
            Там же указывается список папок или файлов, котороые подлежат удалению.
            Все файлы закачиваются на сервер в табличку fbaUpdate. В обновлении участвует только одна табличка.
            После этого при запуске Клиент обращается к этой табличку и смотрит, есть ли обновление (проверка по полю Version и CurrentVersion)
            Сравниваеся с текущей версии EXE файла. Если обновить нужно, то все файлы скачиваются клиентом в папку Update, предназначенную для этого.
            Перед скачиванием папка Update очищается полностью.
            Далее клиент запускает файл Updater.exe передавая в параметрах свое имя файла, а сам завершает работу.
            Updater.exe полностью независимый EXE, он независит от других файлов программы. Updater.exe заменяет файлы программы файлами из папки Update,
            Если при копировании происходит ошибка, то он пытается вернуть прежние версии файлов. После копирования он запускает EXE файл, 
            имя которого было передано в параметрах, а сам завершает работу.
            Download      - true - скачать файлы обновления, false - только получить данные об обновлении.                 
            ResultUpdate  - описание выполненых действий.
            </summary>
            <param name="version"></param>
            <param name="numberUpdate"></param>
            <param name="resultMessage"></param>
            <param name="needUpdate"></param>
            <param name="showMes">false - тихий режим, сообщений пользователю не выдаем.  </param>
            <returns>Результат - true - требуется обновить, false - обновление не требуется.</returns>
        </member>
        <member name="T:FBA.FileOverwrite">
            <summary>
            Настрйоки записи файла.
            </summary>
        </member>
        <member name="F:FBA.FileOverwrite.Ask">
            <summary>
            Спросить
            </summary>
        </member>
        <member name="F:FBA.FileOverwrite.Overwrite">
            <summary>
            Перезаписать
            </summary>    
        </member>
        <member name="F:FBA.FileOverwrite.Skip">
            <summary>
            Ничего не делать - пропустить.
            </summary>
        </member>
        <member name="T:FBA.FBAFile">
            <summary>
            Статический класс. Различные функции работы с файлами и папками.
            </summary>
        </member>
        <member name="M:FBA.FBAFile.IsFileLocked(System.Exception)">
            <summary>
            Проверка на то что файл отрыт в другой программе.
            Расширение для класса Extension.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:FBA.FBAFile.GetPathSQLite(System.String@)">
            <summary>
            Возвращает полный путь к локальной БД SQLIte.     
            </summary>
            <param name="fileName">Полный путь к файлу БД SQLIte</param>
            <returns>Если файл БД наден, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.GetPathClient(System.String@)">
            <summary>
            Возвращает полный путь к клиенту ClientApp.exe.
            </summary>
            <param name="fileName">Полный путь к клиенту ClientApp.exe</param>
            <returns>Если файл БД наден, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.GetPathProject(System.String,System.String@,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Возвращает полный путь к форме (файлу DLL или EXE).
            </summary>
            <param name="projectName">Имя проекта</param>
            <param name="fileNameEXE">Имя файла проекта EXE</param>
            <param name="fileNameDLL">Имя файла проекта EXE</param>
            <param name="findEXE">Найден или нет EXE файл проекта</param>
            <param name="findDLL">Найден или нет DLL файл проекта</param>
            <returns>Если что-то найдено EXE или DLL, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.GetPathTemp(System.String@)">
            <summary>
            Вернуть путь к темповой папке.
            </summary>
            <param name="dirName">Имя папки для временных файлов</param>
            <returns>Если папка найдена или только что успешно создана, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.GetFileNameFullWithoutEXT(System.String)">
            <summary>
            Возвращает полный путь имени файла без расширения.
            GetFileNameFullWithoutEXT(@"E:\Excel работа\ExcelLibrary\ExcelLib.dll")
            вернёт E:\Excel работа\ExcelLibrary\ExcelLib
            </summary>
            <param name="fileNameFull">Полный путь к файлу</param>
            <returns>Полный путь имени файла без расширения</returns>
        </member>
        <member name="M:FBA.FBAFile.GetNewFileName(System.String,System.Boolean,System.String@)">
            <summary>
            Получить новое уникальное имя файла.
            Проверка на то, что файл уже существует, в этом случае запрашивается у пользователя новое имя.
            Если AutoSetNewName, то новое имя выбирается автоматически. Если Отчет пример.xls сущесствует, то:
            Отчет пример_1.xls
            Отчет пример_2.xls
            ...и т.д.
            </summary>
            <param name="fileNameFull">Полное сходное имя файла</param>
            <param name="autoSetNewName">Если true, если файл существует, то появится диалог для ввода нового имени файла</param>
            <param name="fileNameFullNew">Новое имя файла. Введённое пользователем или подобранное автоматически</param>
            <returns>Если новое имя файла выбрано, то true. false-не удалось подобрать имя</returns>
        </member>
        <member name="M:FBA.FBAFile.OpenFileName(System.String,System.String,System.String,System.String@)">
            <summary>
            Открыть окно выбора файла. Пример Filter: "json Files|*.json|All Files|*.*"
            </summary>
            <param name="title">Название окна выбора файла</param>
            <param name="filter">Фильтр</param>
            <param name="initialDirectory">Начальная папка</param>
            <param name="fileName">Имя файла, которое вернётся</param>
            <returns>Если выбор файла произош, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.SaveFileName(System.String,System.String,System.String,System.Int32,System.String@)">
            <summary>
            Окно сохранения файла.
            InitialDirectory - начальная папка, куда сохранять файл.
            Filter - список расширений файлов.
            filterIndex - индекс расширения файла по умолчанию. 		
            FileName - имя файла по умолчанию.
            </summary>
            <param name="title">Шапка диалога сохранения файла</param>
            <param name="filter">Список расширений файлов</param>
            <param name="initialDirectory">Начальная папка, куда сохранять файл.</param>
            <param name="filterIndex">Индекс расширения файла по умолчанию</param>
            <param name="fileName">имя файла по умолчанию.</param>
            <returns>Если файл удалось сохранить, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.SaveDebug(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Для отладки и тестирования. Запись вызова процедуры в файл.
            Запись идет вот таким образом: sourceLineNumber + memberName + sourceFilePath
            </summary>
            <param name="fileNameDebug">Имя файла, куда записываем</param>
            <param name="str">Если нужно записать вместо отладочной информации произвольную строку</param>
            <param name="memberName"></param>
            <param name="sourceFilePath">Файл cs с ошибкой</param>
            <param name="sourceLineNumber">Номер строки кода</param>
        </member>
        <member name="M:FBA.FBAFile.FileRun(System.Diagnostics.Process@,System.String,System.String)">
            <summary>
            Запуск файла в приложении по умолчанию.
            </summary>
            <param name="run">Process запущенного файла</param>
            <param name="fileName">Имя файла, который запускаем</param>
            <param name="paramStr">Строка параметров при запуске файла</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileRunSimple(System.String,System.String)">
            <summary>
            Запуск файла в приложении по умолчанию.
            </summary>
            <param name="fileName">Имя файла, который запускаем</param>
            <param name="paramStr">Строка параметров при запуске файла</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileRunEXE(System.Diagnostics.Process@,System.String,System.String)">
            <summary>
            Запуск EXE файла.
            </summary>
            <param name="run">Process запущенного файла</param>
            <param name="fileName">Имя файла, который запускаем</param>
            <param name="paramStr">Строка параметров при запуске файла</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileRunEXESimple(System.String,System.String)">
            <summary>
            Простой запуск EXE файла.
            </summary>
            <param name="fileName">Имя файла, который запускаем</param>
            <param name="paramStr">Строка параметров при запуске файла</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileRunNotebook(System.String)">
            <summary>
            /Просмотр файла в блокноте.
            </summary>
            <param name="fileName">Имя файла, который запускаем в блокноте Windows notepad.exe</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileStop(System.Diagnostics.Process)">
            <summary>
            Остановка EXE файла.
            </summary>
            <param name="run">Process запущенного файла</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileCopy(System.String,System.String,FBA.FileOverwrite,System.Boolean,System.String@)">
            <summary>
            Копирование файла. FileExists = (Overwrite, Skip, Ask)
            </summary>
            <param name="fileSource">Исходный файл</param>
            <param name="fileDestination">Куда копируем - полное имя нового файла</param>
            <param name="fileExists">Настройки копирования</param>
            <param name="showMes">Если ошибка, то показываем сообщение</param>
            <param name="errorMes">Возвращает текст ошибки при копировании, если произошла.</param>
            <returns>Если файл успешно скопирован, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileRename(System.String,System.String,FBA.FileOverwrite,System.Boolean,System.String@)">
            <summary>
            Переименование файла. FileExists = (Overwrite, Skip, Ask)
            </summary>
            <param name="fileSource">Исходный файл</param>
            <param name="fileDestination">Новое имя файла</param>
            <param name="fileExists">Настройки преименования</param>
            <param name="showMes">Если ошибка, то показываем сообщение</param>
            <param name="errorMes">Возвращает текст ошибки при переименовании файла, если произошла.</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileFind(System.String,System.String,System.Boolean)">
            <summary>
            Поиск файла.
            </summary>
            <param name="dirName">Папка, в которой искать файл</param>
            <param name="fileName">Имя файла с расширением, либо без расширения, либо часть имени. По умолчанию *.*</param>
            <param name="subDirectories">Искать в подпапках или нет</param>
            <returns>Список найденных файлов. Если *.*, то вернёт все файлы в папке (и во всех вложенных папках, если subDirectories = true)</returns>
        </member>
        <member name="M:FBA.FBAFile.FileReadTextObject(System.Object,System.String)">
            <summary>
            Загрузка текста в TextBox. Если Newload == false, то загрузка только в том случае, если текст ещё не загружен.
            </summary>
            <param name="obj">Объект TextBox или FastColoredTextBox или ListBox</param>
            <param name="fileName">Имя файла, из которго загрузить список строк</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileWriteTextObject(System.Object,System.String,System.Boolean)">
            <summary>
            Сохранение текста из TextBox, FastColoredTextBox, ListBox в файл.
            </summary>
            <param name="obj">Объект TextBox или FastColoredTextBox или ListBox</param>
            <param name="fileName">Имя файла, из которго загрузить список строк</param>
            <param name="showMes">Показывать ошибки или нет</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileWriteText(System.String,System.String,System.Boolean)">
            <summary>
            Сохранение текста в файл.
            </summary>
            <param name="text">Текст для сохранения в файл</param>
            <param name="fileName">Полное имя файла с путём</param>
            <param name="showMes">Показывать сообщение об ошибке или нет</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.GetEncodingText(System.String,System.Boolean,System.Text.Encoding@)">
            <summary>
            Определение кодировки файла. 
            </summary>
            <param name="fileName">Полное имя файла с путём</param>
            <param name="showMes">Показывать сообщение об ошибке или нет</param>
            <param name="encoding">Кодировка Encoding</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileReadText(System.String,System.Boolean,System.String@,System.Int32@)">
            <summary>
            Загрузка текстового файла в ResultText. В LinesCount количество строк в файле. 
            </summary>
            <param name="fileName">Полное имя файла с путём</param>
            <param name="showMes">Показывать сообщение об ошибке или нет</param>
            <param name="resultText">Текст из файла</param>
            <param name="linesCount">Количество строк в файле</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FBAFile.FileReadTextSimple(System.String)">
            <summary>
            Загрузка текста в переменную string.
            </summary>
            <param name="fileName">Полное имя файла с путём</param>
            <returns>Текст из файла</returns>
        </member>
        <member name="M:FBA.FBAFile.FileGetBase64WithHashMD5(System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            Получить файл в виде Base64. Если SaveHashToEndFile, то в конец файла будет добавлен MD5 файла (32 байта). 
            </summary>
            <param name="fileName">Исходный произвольный файл</param>
            <param name="saveHashToEndFile">Записывать или нет в конец файла хеш MD5</param>
            <param name="fileData">Файл в виде строки Base64</param>
            <param name="hashMD5">Вычисленный Хеш MD5</param>
            <returns>Если успешно,то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileWriteFromBase64(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            Преобразование строки FileData в Base64, затем запись на диск в файл FileName.
            </summary>
            <param name="fileData">Исходный файл в виде строки Base64</param>
            <param name="fileName">Имя файла, куда сохраняем</param>
            <param name="errorMes">Текст ошибки, если возникла</param>
            <param name="showMes">Показывать или нет сообщение об ошибке</param>
            <returns>Если успешно,то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileReadToBase64(System.String,System.String@,System.String@,System.Boolean)">
            <summary>
            Чтение файла, затем преобразование её в формат Base64. На выходе строка Base64.
            </summary>
            <param name="fileName">Имя файла, куда сохраняем</param>
            <param name="fileData">Файл в виде строки Base64</param>
            <param name="errorMes">Текст ошибки, если возникла</param>
            <param name="showMes">Показывать или нет сообщение об ошибке</param>
            <returns>Если успешно,то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileDelete(System.String,System.String@,System.Boolean)">
            <summary>
            Удаление файла.
            </summary>
            <param name="fileName">Имя файла, который удаляем</param>       
            <param name="errorMes">Текст ошибки, если возникла</param>
            <param name="showMes">Показывать или нет сообщение об ошибке</param>
            <returns>Если успешно,то true</returns>
        </member>
        <member name="M:FBA.FBAFile.RenameFilesInDir(System.String,System.String,System.String)">
            <summary>
            Переименовать все файлы, заменив OldInputStr на NewInputStr,
            а также заменив внутри файлов содержимое.
            </summary>
            <param name="dirName">Папка, в которой производим изменения</param>
            <param name="oldInputStr">Строка, которую нужно заменить в именах файлов и в их содержимом</param>
            <param name="newInputStr">Строка, на которую нужно заменить</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.DirDelete(System.String,System.String@,System.Boolean)">
            <summary>
            Удаление папки.
            </summary>
            <param name="dirName">Исходная папка</param>
            <param name="errorMes">Сообщение об ошибке</param>
            <param name="showMes">Показывать сообщение об ошибке или нет</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.DirClean(System.String,System.String[]@,System.Boolean)">
            <summary>
            Удаление из папки всех вложенных папок и файлов. Сама папка DirName не удаляется.  
            </summary>
            <param name="dirName">Исходная папка</param>
            <param name="listNotDeleted">Список не удалённых файлов и папок</param>
            <param name="showMes">Показывать сообщение об ошибке или нет</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.DirCopy(System.String,System.String,System.Boolean)">
            <summary>
            Копирование папки вместе с вложенными файлами и папками. 
            </summary>
            <param name="dirSource">Исходная папка</param>
            <param name="dirDestination">Имя новой папки</param>
            <param name="showMess">Показывать ошибки или нет</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.DirChoose(System.String,System.String@)">
            <summary>
            Выбор папки.
            </summary>
            <param name="initialDirectory">Начальная папка выбора папки</param>
            <param name="dirName">Путь к выбранной папке</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.DirZIP(System.Boolean,System.String,System.String)">
            Operation = ZIP, UNZIP
        </member>
        <member name="M:FBA.FBAFile.GetFileSizeStr(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Размер файла для вывода пользователю.
            </summary>
            <param name="sizeByte">Размер файла в байтах</param>
            <param name="kbOnly">Выводить размер только в кб. Иначе будут испрользованы Гб, Мгб, Кб.</param>
            <param name="AddWords">Если true, то добавляются Кб, Мб, Гб</param>
            <returns></returns>
        </member>
        <member name="M:FBA.FBAFile.DirExists(System.String,System.Boolean)">
            <summary>
            Проверка существования папки и её создание если её нет.
            </summary>
            <param name="dirName">Папка, которую проверяем</param>
            <param name="createIfNotExists">Создавать папку, елси не найдена</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileZIP(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Распаковка или запаковка файла
            </summary>
            <param name="zip">Если true, то ZIP иначе UNZIP</param>
            <param name="fileSource">Исходный файл</param>
            <param name="fileDestination">Куда распакоываем или запаковываем</param>
            <param name="showMes">Показывать ошибки или нет</param>
            <returns>Если успешно, то true</returns>
        </member>
        <member name="M:FBA.FBAFile.FileReplaceText(System.String,System.String,System.String)">
            <summary>
            Замена текста в файле.
            </summary>
            <param name="fileName">Имя файла, в котром нужно поменять текст</param>
            <param name="oldText">Текст, который меняем</param>
            <param name="newText">Текст, на котрый меняем</param>
            <returns>Если успешно, то true </returns>
        </member>
        <member name="M:FBA.FBAFile.GetDirs(System.String)">
            <summary>
            Cписок имен папок в массив.
            </summary>
            <param name="dirSource">Папка, в которой искать папки</param>
            <returns>Список имен папок</returns>
        </member>
        <member name="M:FBA.FBAFile.ListBoxLoadFiles(System.Windows.Forms.ListBox,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Загрузка cписка имен файлов в ListBox.
            Пример вызова: ListBox1.LBLoadFiles(@"C:\", "*.txt", "aaa", "bbb", false, true, true); 
            В ListBox попадут все файлы с расширением txt, в имени которомуых есть подстрока aaa и нет подстроки bbb.
            В списке будут имена файлов без пути и расширения.      
            Если нужно несколько разных значений "aaa" или "bbb", то нужно указывать их через точку с запятой.
            Сама точка с запятой в логике не участвует, её экранирование пока не сделано.       
            </summary>
            <param name="lb">Объект ListBox</param>
            <param name="dirSource">Исходная папка</param>
            <param name="fileSearchPattern">Маска файлов. Несколько масок не поддерживаются. Несколько масок можно указать в StringExists. Пример: ".bmp;.jpg;.jpeg"
            Но если в менах файлов будет эти подстроки, то в результат они попадут.</param>
            <param name="stringExists">Включать в результат файлы, в именах которых содержится StringExists. Допустимо указывать несколько подстрок через точку с запятой. Пример: StringExists = "dis;not;gffgfg"</param>
            <param name="stringNotExists">НЕ включать в результат файлы, в именах которых содержится StringNotExists. Допустимо указывать несколько подстрок через точку с запятой.</param>
            <param name="subDirectories">искать в подпапках</param>
            <param name="showPath">Добавлять полный путь к файлу</param>
            <param name="showExtension">Добавлять расширения файлов</param>       
        </member>
        <member name="M:FBA.FBAFile.FilesInFolder(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Простая загрузка cписка имен файлов в массив.
            Пример вызова:
            string[] s = sys.FilesInFolder(@"E:\Мусор\", "*.*", "", "", true, true, true);
            sys.ArrayView("", "", s);
            </summary>
            <param name="dirSource">Папка, в которой искать файлы</param>
            <param name="searchPattern">Маска файлов. Несколько масок не поддерживаются. Несколько масок можно указать в StringExists. Пример: ".bmp;.jpg;.jpeg"
            Но если в менах файлов будет эти подстроки, то в результат они попадут.</param>
            <param name="stringExists">Включать в результат файлы, в именах которых содержится StringExists. Допустимо указывать несколько подстрок через точку с запятой. Пример: StringExists = "dis;not;gffgfg"</param>
            <param name="stringNotExists">НЕ включать в результат файлы, в именах которых содержится StringNotExists. Допустимо указывать несколько подстрок через точку с запятой.</param>
            <param name="subDirectories">искать в подпапках</param>
            <param name="showPath">Добавлять полный путь к файлу</param>
            <param name="showExtension">Добавлять расширения файлов</param>
            <returns>Список имен файлов</returns>
        </member>
        <member name="M:FBA.FBAFile.FoldersInFolder(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Список всех папок в папке dirSource.
            </summary>
            <param name="dirSource">Исходная папка, в которой нужно получить список всех папок</param>
            <param name="searchPattern">Маска поиска, по умолчанию *</param>
            <param name="stringExists">Включать в результат файлы, в именах которых содержится StringExists. Допустимо указывать несколько подстрок через точку с запятой. Пример: StringExists = "dis;not;gffgfg"</param>
            <param name="stringNotExists">НЕ включать в результат файлы, в именах которых содержится StringNotExists. Допустимо указывать несколько подстрок через точку с запятой.</param>       
            <param name="subDirectories">Искать в подпапках</param>
            <param name="showPath">Добавлять полный путь к файлу</param>
            <returns>Список всех папок в папке dirSource.</returns>
        </member>
        <member name="T:FBA.WinAPI">
            <summary>
            Класс импорта функций операционной системы. Используется в SysForm.
            </summary>
        </member>
        <member name="T:FBA.EditFBA">
            <summary>
            Компонент для выбора атрибута из БД и показа значения на форме.
            </summary>
        </member>
        <member name="M:FBA.EditFBA.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:FBA.EditFBA.HandleDropDown(System.Object,System.EventArgs)">
            <summary>
            Cобытие DropDown.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.EditFBA.OnDropDown(System.EventArgs)">
            <summary>
            Cобытие DropDown. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FBA.EditFBA.LoadDataDropDown">
            <summary>
            Загрузка данных в компонент.
            </summary>
        </member>
        <member name="M:FBA.EditFBA.HandleDeleteClick(System.Object,System.EventArgs)">
            <summary>
            Cобытие DeleteClick.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.EditFBA.HandleEditClick(System.Object,System.EventArgs)">
            <summary>
            Cобытие EditClick.  
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FBA.EditFBA.OnEditClick(System.EventArgs)">
            <summary>
            Cобытие EditClick. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FBA.EditFBA.comboBox1_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Событие происходит при закрытии выпадающего списка, после выбоар пользователя.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:FBA.EditFBA.btnDelete">
            <summary>
            Кнопка Delete, public чтобы был доступ с вызывающего класса.
            </summary>
        </member>
        <member name="F:FBA.EditFBA.btnEdit">
            <summary>
            Кнопка Edit, public чтобы был доступ с вызывающего класса.
            </summary>
        </member>
        <member name="F:FBA.EditFBA.comboBox">
            <summary>
            Компонент FBA.ComboBoxFBA, public чтобы был доступ с вызывающего класса.
            </summary>
        </member>
        <member name="M:FBA.EditFBA.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>	
        </member>
        <member name="P:FBA.EditFBA.EntityBrief">
            <summary>
            Сокращение сущности
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ObjectID">
            <summary>
            ИД объекта
            </summary>
        </member>
        <member name="P:FBA.EditFBA.AttrBrief">
            <summary>
            Сокращение атрибута
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SQL">
            <summary>
            Запрос SQL
            </summary>
        </member>
        <member name="P:FBA.EditFBA.MSQL">
            <summary>
            Запрос MSQL
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SaveType">
            <summary>
            Указываем что сохранять свойство Text или SelectedIndex. INDEX, TEXT, LOOKUP.   
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ButtonDeleteVisible">
            <summary>
            Свойство видимость кнопки Delete
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ButtonEditVisible">
            <summary>
            Свойство видимость кнопки Edit
            </summary>
        </member>
        <member name="P:FBA.EditFBA.BackColor">
            <summary>
            Свойство comboBox.BackColor
            </summary>
        </member>
        <member name="P:FBA.EditFBA.DockStyle">
            <summary>
            Свойство DockStyle
            </summary>
        </member>
        <member name="P:FBA.EditFBA.Text">
            <summary>
            Свойство comboBox.Text
            </summary>
        </member>
        <member name="P:FBA.EditFBA.OuterWHERE">
            <summary>
            Внешнее условие WHERE. Добавляется при получении выпадающего списка.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ObjectMaxCount">
            <summary>
            Количество объектов для выбора в выпадающий список.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ObjectOrderBy">
            <summary>
            Order By, если нужен.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.СustomQuery">
            <summary>
            Произвольный запрос. Если введен, то используется он. OuterWHERE в этом случае не используется.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ObjRef">
            <summary>
            Ссылка на ObjectRef.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.EditFormName">
            <summary>
            Форма редактирования объекта. Название.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ContextMenuEnabled">
            <summary>
            Если поставить False стандартное контекстное меню перестанет появляться. 
            </summary>        
        </member>
        <member name="P:FBA.EditFBA.TextAdditional">
            <summary>
            Дополнительное поле с текстом. Для разных целей.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ValueHistoryInItems">
            <summary>
            Показывать историю введённых значений.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SaveParam">
            <summary>
            Признак что значение компонента можно сохранять/загружать в настройках,
            при выполнении команды SysCommon.FormComponentValuesSave/SysCommon.FormComponentValuesLoad. 
            </summary>        
        </member>
        <member name="P:FBA.EditFBA.GroupEnabled">
            <summary>
            Имена компонентов со свойством на форме родителе, 
            которое влияет на свойство Enabled/Disabled данного компонента. Работает через Var.controlEnableDisable.   
            </summary>         
        </member>
        <member name="P:FBA.EditFBA.ReadOnly">
            <summary>
            Свойство comboBox1.ReadOnly
            </summary>  
        </member>
        <member name="P:FBA.EditFBA.ErrorIfNull">
            <summary>
            Требуем заполнение компонента значениями. Проверка в SysForm.ErrorIfNull 
            </summary>        
        </member>
        <member name="P:FBA.EditFBA.MaxDropDownItems">
            <summary>
            Свойство comboBox1.MaxDropDownItems.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.AutoCompleteMode">
            <summary>
            Свойство comboBox1.AutoCompleteMode.
            </summary> 
        </member>
        <member name="P:FBA.EditFBA.AutoCompleteSource">
            <summary>
            Свойство comboBox1.AutoCompleteSource.
            </summary> 
        </member>
        <member name="P:FBA.EditFBA.AutoCompleteCustomSource">
            <summary>
            Свойство comboBox1.AutoCompleteCustomSource.
            </summary> 
        </member>
        <member name="P:FBA.EditFBA.DataSource">
            <summary>
            Свойство comboBox1.DataSource.
            </summary>  
        </member>
        <member name="P:FBA.EditFBA.DrawMode">
            <summary>
            Свойство comboBox1.DrawMode.
            </summary>        
        </member>
        <member name="P:FBA.EditFBA.DropDownWidth">
            <summary>
            Свойство comboBox1.DropDownWidth.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.DropDownHeight">
            <summary>
            Свойство comboBox1.DropDownHeight.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.DroppedDown">
            <summary>
            Свойство comboBox1.DroppedDown.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.FlatStyle">
            <summary>
            Свойство comboBox1.FlatStyle.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.IntegralHeight">
            <summary>
            Свойство comboBox1.IntegralHeight.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ItemHeight">
            <summary>
            Свойство comboBox1.ItemHeight.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.Items">
            <summary>
            Свойство comboBox1.Items.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.MaxLength">
            <summary>
            Свойство comboBox1.MaxLength.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.PreferredHeight">
            <summary>
            Свойство comboBox1.PreferredHeight.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.Index">
            <summary>
            Свойство comboBox1.SelectedIndex.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SelectedItem">
            <summary>
            Свойство comboBox1.SelectedItem.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SelectedText">
            <summary>
            Свойство comboBox1.SelectedText.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SelectionLength">
            <summary>
            Свойство comboBox1.SelectionLength.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SelectionStart">
            <summary>
            Свойство comboBox1.SelectionStart.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.Sorted">
            <summary>
            Свойство comboBox1.Sorted.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.DropDownStyle">
            <summary>
            Свойство comboBox1.DropDownStyle.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.DisplayMember">
            <summary>
            Свойство comboBox1.DisplayMember.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.FormatInfo">
            <summary>
            Свойство comboBox1.FormatInfo.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.FormatString">
            <summary>
            Свойство comboBox1.FormatString.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.FormattingEnabled">
            <summary>
            Свойство comboBox1.FormattingEnabled.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.ValueMember">
            <summary>
            Свойство comboBox1.ValueMember.
            </summary>
        </member>
        <member name="P:FBA.EditFBA.SelectedValue">
            <summary>
            Свойство comboBox1.SelectedValue.
            </summary>
        </member>
        <member name="E:FBA.EditFBA.DropDown">
            <summary>
            Cобытие DropDown.
            </summary>
        </member>
        <member name="E:FBA.EditFBA.DeleteClick">
            <summary>
            Cобытие DeleteClick.
            </summary>
        </member>
        <member name="E:FBA.EditFBA.EditClick">
            <summary>
            Cобытие EditClick.
            </summary>
        </member>
    </members>
</doc>
