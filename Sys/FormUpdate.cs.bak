
﻿/*
 * Создано в SharpDevelop.
 * Пользователь: Травин
 * Дата: 28.09.2017
 * Время: 18:31
 */
 
using System;  
using System.Linq;        
using System.Windows.Forms.VisualStyles;
using FastColoredTextBoxNS;       
using System.Windows.Forms;
using System.IO;
using System.Data;     
using System.Collections.Generic;   
namespace FBA
{ 
    public partial class FormUpdate : FormSim
    {
        public FormUpdate()
        {             
            InitializeComponent();           
            this.MdiParent = sys.FormMainObj;
            this.Icon = this.MdiParent.Icon;
            DataGridViewColumn column = new DataGridViewCheckBoxColumn();
            column.DataPropertyName = "UserCheck";
            column.Name = "UserCheck";             
            dgvUpdate.Columns.Add(column);                             
        }
        
        #region Вкладка Update. 
        
        ///Событие. Проверить необходимость обновления.
        private void UpdateCheck()
        {            
            string Version;
            string NumberUpdate;
            string ResultMessage;
            bool NeedUpdate;             
            UpdateApp.UpdateCheck(out Version, out NumberUpdate, out ResultMessage, out NeedUpdate, false);
        }                                        
                      
        ///Скачать обновление в папку Update.
        private void UpdateDownload()
        {       
            string Version;
            string NumberUpdate;
            string ResultMessage;
            bool NeedUpdate;               
                                    
            if (!UpdateApp.UpdateCheck(out Version, out NumberUpdate, out ResultMessage, out NeedUpdate, true)) 
            {
                ResultMessage = "Ошибка при обновлении програмы: " + ResultMessage;
                sys.SM(ResultMessage);
                return;
            }
            
            if (UpdateApp.UpdateDownload(Version, NumberUpdate, out ResultMessage, out NeedUpdate, false))                 
            {
                if (ResultMessage != "") sys.SM(ResultMessage);
                return;
            } 
            sys.SM(ResultMessage, "Information");
        }         
        
        ///Сохранить все файлы программы на сервере. 
        private bool UpdateUpload(bool UploadToServer)
        {
            bool DoUserUpdate = false;
            if (UploadToServer)
            {
                if (!(sys.SM("Сохранить файлы программы на сервере для обновления?", "Question", "Загрузка обновления на сервер"))) return false;
                DoUserUpdate = sys.SM("Это обновление для пользователей?", "Question", "Загрузка обновления на сервер");
            }
                                 
            var ContentList = new List<string>();
            
            //Создание папки  
            ContentList.Add(@"ADDDIR: " + sys.PathAdditional);
            //ContentList.Add(@"ADDDIR: " + sys.PathTest);
            //ContentList.Add(@"ADDDIR: " + sys.PathWork);
            ContentList.Add(@"ADDDIR: " + sys.PathLog);
            ContentList.Add(@"ADDDIR: " + sys.PathTemp);
             
            //Создание Файлы                      
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"ASCII.html"); 
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"ColorTable.html");   
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"DataTimeFormat.html");
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"NewDatabase_Postgres.sql");       
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"NewDatabase_SQLite.sql");
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"NewDatabase_MSSQL.sql");            
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"RegularTest.exe"); 
            ContentList.Add(@"ADDFILE: " + sys.PathAdditional + @"RegularTest.rar");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"ClientApp.exe");            
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"ServerApp.exe");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"Updater.exe");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"Utility.exe");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"FastColoredTextBox.dll");
            if (sys.conSys.ServerType != "SQLite")
                ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"local.db3");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"Mono.Security.dll"); 
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"Npgsql.dll");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"sys.dll");
            ContentList.Add(@"ADDFILE: " + sys.PathMain       + @"System.Data.SQLite.dll");             
            
            //Удаление файлы.
            ContentList.Add(@"DELFILE: " + sys.PathUpdate     + @"Content.txt");
              
            System.Data.DataTable DT;
            bool Result = UpdateUploadFiles(out DT, ContentList, DoUserUpdate, UploadToServer);
            dgvUpdate.DataSource = DT;
            
            if (UploadToServer) 
                sys.SM("Файлы программы загружены на сервер. Версия " + sys.ApplicationVersion, "Information", "Загрузка на сервер");
            return Result;           
        }
        
        ///Показывает список доступных обновлений.
        private bool UpdateList()
        {
                     
            string SQL = "SELECT NumberUpdate, Version, CurrentVersion, Count(ID) as FileCount, (SUM(Size)/ 1024) AS 'FileSize, kb'" +
                         "FROM arhProgUpdate group by NumberUpdate, Version, CurrentVersion; ";
            return sys.RefreshGrid("Remote", SQL, dgvUpdate);            
        }
        
        ///Показывает список файлов обновлений.
        private bool UpdateFiles()
        {                    
            const string SQL = "SELECT NumberFile, NumberUpdate, DateRecord, UserUpdate, " +
                         "ContentType, Operation, Version, CurrentVersion, FullName, " +
                         "Path, Name, Extension, CreationTime, LastWriteTime, LastAccessTime, Size, " +
                         "MD5 FROM arhProgUpdate; ";  
                  
            System.Data.DataTable DT;
            sys.SelectDT("Remote", SQL, out DT);
            var dataset = new System.Data.DataSet();
            var bd = new DevAge.ComponentModel.BoundDataView(DT.DefaultView);           
            dgvUpdate.DataSource = bd;
            return sys.RefreshGrid("Remote", SQL, dgvUpdate);                          
        }    
        
        ///Сохранить все файлы программы на сервере.               
        private bool UpdateUploadFiles(out System.Data.DataTable DT, List<string> ContentList, bool DoUserUpdate, bool UploadToServer)
        {                                                                             
            //UserUpdate  - обновление доступно пользователям. 
            //Upload      - Загрузить файлы на сервер. 
            //ContentList - Cписок файлов и папок для обновления в определенном формате:
            //              ADDDIR:  CustomDorectoryName
            //              DELDIR:  CustomDorectoryName 
            //              ADDFILE: CustomFileName.txt          
            //              DELFILE: CustomFileName.txt 
            DT = new System.Data.DataTable();
            string SQL = "";    
            
            //Для вставки полей в DT.
            string NumberFile;
            int NumberUpdate;
            string DateRecord = sys.DateTimeToSQLStr(DateTime.Now);
            //string UserUpdate = (!DoUserUpdate).ToString();
            string UserUpdate = (!DoUserUpdate).ToInt().ToString();
            string ContentType;
            string Operation;             
            string Version    = sys.ApplicationVersion;
            string FullName;
            string Path = sys.PathMain;
            string FileName;
            string Extension;
            string CreationTime;
            string LastWriteTime;
            string LastAccessTime; 
            long SizeFile; 
            string HashMD5;                 
            string FileData   = ""; //Данные в Base64.    
            
            SQL = "DELETE FROM arhProgUpdate WHERE Version = '" + Version + "'; ";
            if (!sys.Exec("Remote", SQL)) return false;             
            Application.DoEvents();    
            
            //Последняя версия в таблице обновлений.
            SQL = "SELECT MAX(NumberUpdate) AS NumberVersion FROM arhProgUpdate; ";          
            string NumberUpdateStr = sys.GetValue("Remote", SQL);
            if (NumberUpdateStr == "") NumberUpdateStr = "0";             
            NumberUpdate = NumberUpdateStr.ToInt() + 1; //Новая варсия.
                                      
            DT.Columns.Add("NumberFile");     //Порядковый номер файла или папки в обновлении
            DT.Columns.Add("NumberUpdate");   //Порядковый номер обновления.
            DT.Columns.Add("DateRecord");     //Текущая дата.
            DT.Columns.Add("UserUpdate");     //true-Пользователям нужно обновляться из это обновления. false-не нужно. false-нужно для тестирования, для отложенного обновления и др.              
            DT.Columns.Add("ContentType");    //1-папка, 2-файл 
            DT.Columns.Add("Operation");      //1-создать, 2-удалить. 
            DT.Columns.Add("Version");        //Версия программы вида 1.0.6335.33362
            DT.Columns.Add("FullName");       //Полное имя файла с путем.
            DT.Columns.Add("Path");           //Начальный каталог программы, т.е. sys.PathMain
            DT.Columns.Add("Name");           //Имя файла/папки
            DT.Columns.Add("Extension");      //Расширение файла (для папки здесь пусто)
            DT.Columns.Add("CreationTime");   //Дата создания папки/файла
            DT.Columns.Add("LastWriteTime"); 
            DT.Columns.Add("LastAccessTime");      
            DT.Columns.Add("Size");           //размер файла в байтах. Для папки здесь 0.
            DT.Columns.Add("MD5");            //Хеш MD5                          
             //DT.Columns.Add("FileData");    //Содержимое файла в кодировке Base64.
             
            var fileprop = new string[16];                
            var Progress1 = new FormProgress("Обновление", "Получение свойств файлов", ContentList.Count);
            Progress1.Show();                      
            for (int i = 0; i < ContentList.Count; i++)
            {                 
                FullName = ContentList[i];                                 
                if (FullName.IndexOf("DIR:", StringComparison.OrdinalIgnoreCase) > -1) ContentType = "DIR"; else ContentType = "FILE";                 
                Operation = FullName.Left(":"); //в sys этот Left описан.
                FullName = FullName.Replace("ADDDIR:",  "");
                FullName = FullName.Replace("DELDIR:",  "");
                FullName = FullName.Replace("ADDFILE:", "");
                FullName = FullName.Replace("DELFILE:", "");
                FullName = FullName.Trim();
                NumberFile     = (i+1).ToString();
                
                FileName           = "";
                Extension      = "";
                CreationTime   = sys.DateTimeToSQLStr(DateTime.Now);
                LastWriteTime  = sys.DateTimeToSQLStr(DateTime.Now);
                LastAccessTime = sys.DateTimeToSQLStr(DateTime.Now);
                SizeFile       = 0;
                HashMD5         = ""; 
                    
                if (Operation == "ADDFILE")
                {
                    if (!File.Exists(FileName)) continue;
                    var file       = new FileInfo(FullName);
                    FileName       = file.Name;
                    Extension      = file.Extension;
                    CreationTime   = sys.DateTimeToSQLStr(file.CreationTime);
                    LastWriteTime  = sys.DateTimeToSQLStr(file.LastWriteTime);
                    LastAccessTime = sys.DateTimeToSQLStr(file.LastAccessTime);
                    SizeFile       = file.Length;
                    HashMD5        = Crypto.FileHashMD5Calc(FullName);     
                }
                                 
                 fileprop[0]  = NumberFile;                     
                 fileprop[1]  = NumberUpdate.ToString();        
                 fileprop[2]  = DateRecord;                     
                 fileprop[3]  = UserUpdate;                      
                 fileprop[4]  = ContentType.ToString();         
                 fileprop[5]  = Operation.ToString();                                           
                 fileprop[6]  = Version;                       
                 fileprop[7]  = FullName;                        
                 fileprop[8]  = Path;                             
                 fileprop[9]  = FileName;                              
                 fileprop[10] = Extension;                        
                 fileprop[11] = CreationTime;                   
                 fileprop[12] = LastWriteTime;                  
                 fileprop[13] = LastAccessTime;                 
                 fileprop[14] = SizeFile.ToString();
                 fileprop[15] = HashMD5;                            
                                       
                 DataRow row = DT.NewRow();                                        
                row.ItemArray = fileprop;
                DT.Rows.Add(row);  
                if (UploadToServer)
                {                                             
                    FileData = "";
                    if (Operation == "ADDFILE")
                    {        //FileReadToBase64(string FileName, out string FileData, out string ErrorMessage, bool ShowMes)
                        string ErrorMessage;
                        bool ShowMes = true;
                        if (!sys.FileReadToBase64(FullName, out FileData, out ErrorMessage, ShowMes)) return false;
                        //
                        
                        const bool SaveHashToEndFile = false;                           
                        if (!sys.FileGetBase64WithHashMD5(FileName, SaveHashToEndFile, out FileData, out HashMD5)) return false;
                    }
                       
                    SQL = @"INSERT INTO arhProgUpdate (NumberFile, NumberUpdate, DateRecord, UserUpdate, " +
                           "ContentType, Operation, Version, CurrentVersion, FullName, Path, Name, Extension, " +
                           "CreationTime, LastWriteTime, LastAccessTime, Size, MD5, " +
                           "FileData) " +
                           "VALUES (" +
                           "'" + NumberFile + "','" + NumberUpdate + "','" + DateRecord + "','" + UserUpdate + "'," +                       
                           "'" + ContentType + "','" + Operation + "','" + Version + "','" + Version + "','" + FullName + "','" + Path + "','" + FileName + "','" + Extension + "'," +
                        "'" + CreationTime + "','" + LastWriteTime + "','" + LastAccessTime + "'," + SizeFile.ToString() + ", '" + HashMD5 + "'," +
                           "'" + FileData + "'); " + sys.CR;                        
                    if (!sys.Exec("Remote", SQL)) return false; 
                }
                Progress1.Inc();
            }                                                                                          
            
            //В конце загрузки файлов на сервер.
            if (UploadToServer)
            { 
                SQL = @"UPDATE arhProgUpdate SET CurrentVersion = '" + Version + "'; " + sys.CR;
                if (!sys.Exec("Remote", SQL)) return false;               
            }
            Progress1.Dispose();
            return true;                 
        }                                                                                          
        
        ///Событие. Удаление всех записей в таблице обновлений.    
        private void UpdateDelete()
        {          
            for (int i = 0; i < dgvUpdate.Rows.Count; i++)                             
            {                             
                string Version   = "";
                string UserCheck = "";  
                if (dgvUpdate.Rows[i].Cells["UserCheck"].Value != null)
                {
                    UserCheck   = sys.DGRowInt(dgvUpdate, i, "UserCheck");                             
                    Version     = sys.DGRowInt(dgvUpdate, i, "Version"); 
                }                          
                if ((UserCheck == "True") && (Version != ""))
                {
                     string SQL = @"DELETE FROM arhProgUpdate WHERE Version = '" + Version + "';";  
                     sys.Exec("Remote", SQL);                      
                }                                                              
            }
            UpdateList();
            sys.SM("Выполнено!", "Information");  
            
        }
        
        ///Событие. Как только пользователь вносит изменение в запись (ставит галку UserCheck) изменения применяются.
        private void DgvUpdateCurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            ((DataGridView)sender).EndEdit();
        }
        
        //Кнопки комманд обновления.
        private void TbUpdate1Click(object sender, EventArgs e)
        {
            string SenderName = sys.GetSenderName(sender);
            
            //Проверить необходимость обновления.
            if (SenderName == "tbUpdate1") UpdateCheck();           
            
            //Показать лист обновлений.
            if (SenderName == "tbUpdate2") UpdateList();
            
            //Показать файлы обновления.
            if (SenderName == "tbUpdate3") UpdateUpload(false);
            
            //Удалить обновления.
            if (SenderName == "tbUpdate4") UpdateDelete();
            
            //Скачать обновление в папку Update.
            if (SenderName == "tbUpdate5") UpdateDownload();
            
            //Сохранить все файлы программы на сервере.  
            if (SenderName == "tbUpdate6") UpdateUpload(true);
            
            //Запуск копирования файлов обновления, уже после их загрузки.
            if (SenderName == "tbUpdate7") UpdateApp.UpdateRun();
            
            //Показать файлы обновления на сервере.
            if (SenderName == "tbUpdate8") UpdateFiles();
            
        }
        
        #endregion
    }
}
