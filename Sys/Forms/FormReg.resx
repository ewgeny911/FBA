<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8jKgMpJikXMikpJyIjKgcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfIyoIKycnPKVdLeWeTx7rmUsh4gAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8jKgyUSyPW57VO/7ZnAP+0ZAT/mUshTQAA
        AAAAAAAAAAAAAAAAAAAAAAAAHyMqAidRfmwqYZeOK2agmStmoJfc7/9NAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHyMqB3hBI6fgqkr/tmcA/7Fg
        C/+ZSyE3AAAAAAAAAAAAAAAAAAAAAAAAAAAucbG7dbrw8jOn9/82qvn/Oq78/zGAxc8AAAAAAAAAAAAA
        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
        DD//8AB///AA///wAP//8AP///GH//////8=
</value>
  </data>
</root>