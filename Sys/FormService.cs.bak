
﻿/*
 * Создано в SharpDevelop.
 * Пользователь: Travin
 * Дата: 15.09.2017
 * Время: 16:08
 */  
 
using System;  
using System.Linq;        
using System.Windows.Forms.VisualStyles;
using FastColoredTextBoxNS;       
using System.Windows.Forms;
using System.IO;
using System.Data;     
using System.Collections.Generic; 
  
namespace FBA
{     
    ///Форма для работы с формами решения. Собраны Различные функции по управлению формами.
    public partial class FormService : FormSim
    {               
        public FormService(string FormName)
        {              
            InitializeComponent();                 
            tbFormName.Text = FormName;
            RefreshFormList();
        }
        
        //Пометить форму на удаление.
        public bool FormSetDeleted(string FormID, bool Deleted)
        {
            if (FormID == "") return false;
            string DelStr = (Deleted.ToInt()).ToString();
            string SQL = "UPDATE arhForm SET DEL = " + DelStr + " WHERE ID = '" + FormID + "'";
            if (!sys.Exec("Remote", SQL)) return false;             
            RefreshFormList();
            return true;            
        }              
        
        ///Удаление формы из базы.
        public bool FormDelete(string FormID)
        {                              
            if (FormID == "") return false;
            string FormName;
            if (!GetFormName(FormID, out FormName)) return false;                        
            string SQL = "DELETE FROM arhRelRoleForm WHERE FormID = " + FormID + ";" + sys.CR +
                         "DELETE FROM arhFormHist WHERE FormID = "  + FormID + ";" + sys.CR + 
                         "DELETE FROM arhForm WHERE ID = "  + FormID + ";";
            string ErrorMessage;
            sys.DirDelete(sys.PathForms + FormName, out ErrorMessage, true);
            if (!sys.Exec("Remote", SQL)) return false;
            RefreshFormList(); 
            return true;             
        }              
        
        ///Удалить запись из истории формы.
        public bool FormHistDelete(string FormHistID)
        {
            if (FormHistID == "") return false;
            return sys.Exec("Remote", "DELETE FROM arhFormHist WHERE FormID = " + FormHistID);
        }       
               
        ///Создание новой формы
        public void FormNew()
        {                    
             var FormNew1 = new FormNew();
             FormNew1.ShowDialog();               
             int FormStatus = FormNew1.StatusClose;             
             //SM("форма: " + FormNew1.FormName + sys.CR + "Статус: " + FormStatus.ToString() + sys.CR + "Имя: " + FormNew1.FormName, "Information");
             if (FormStatus == 2) return;                             
             string FormName = FormNew1.FormName;
             string ProjectTemplate = FormNew1.ProjectTemplate;                                                     
             string FromDir = sys.PathTemplate + ProjectTemplate;
             string ToDir   = sys.PathForms + FormName;
             sys.DirCopy(FromDir, ToDir);
             string ErrorMessage;                          
             if (Directory.Exists(sys.PathForms + FormName + @"\obj"))
                 sys.DirClean(sys.PathForms + FormName + @"\obj", out ErrorMessage, true);
             sys.RenameFilesInDir(ToDir, ProjectTemplate, FormName);                                    
             sys.SM("Форма создана, теперь её необходимо добавить её в среду разработки: " + sys.CR + ToDir, "Information");                           
        }                            
        
        ///Копирование формы из arhForm или arhFormHist как нового модуля.
        public bool CopyAsNew(string FormID, string FormHistID)
        {   
            if ((FormID == "") && (FormHistID == ""))
            {
                sys.SM("Не найдена форма для копирования!");
                return false; 
            }
            string FormName = "";
            bool RestoreFromHist = false;  
            
            if (FormID != "") 
            {
                GetFormName(FormID, out FormName);
                RestoreFromHist = false;  
            }
            if (FormHistID != "") 
            {
                GetFormHistName(FormHistID, out FormName);
                RestoreFromHist = true;
            }
            if (FormName == "")
            {
                sys.SM("Не найдена форма с именем: " + FormName);
                return false;
            }
            string FormNameNew = "";
            if (!sys.InputValue("Новое имя формы", 
                                "Имя формы:", 
                                "TEXT1",
                                ref FormNameNew)) return false;
            
            //Скачиваем проект из БД.                    
            if (!sys.ProjectReadFromDataBase(FormName, FormNameNew, FormHistID, RestoreFromHist)) return false;
            string ErrorMessage = "";
            sys.DirClean(sys.PathForms + FormNameNew + @"\obj", out ErrorMessage, true);
            sys.RenameFilesInDir(sys.PathForms + FormNameNew, FormName, FormNameNew);
            sys.SM("Форма скопирована как новая с именем: " + FormNameNew + sys.CR + 
                   "Теперь её можно добавить в среду разработки!", "Information");
            return true;
        }
        
        ///Переименование формы.
        public bool FormRename(string PathForm)
        {                          
            if (PathForm == "") return false;
            string FormNameOld = Path.GetFileNameWithoutExtension(PathForm);
            //if (!GetFormName(FormID, out FormNameOld)) return false;            
            string FormNameNew = FormNameOld;         
            if (!sys.InputValue("Новое имя формы", "Введите новое имя формы", "TEXT1", ref FormNameNew)) return false;                                   
            System.IO.Directory.Move(sys.PathForms + FormNameOld, sys.PathForms + FormNameNew);
            string ErrorMessage;             
            sys.DirClean(sys.PathForms + FormNameNew + @"\obj", out ErrorMessage, true);
            sys.RenameFilesInDir(sys.PathForms + FormNameNew, FormNameOld, FormNameNew);
            sys.SM("Форма переименована: " + FormNameNew, "Information");                                  
            return true;
        }
        
        ///Установить тип формы.
        public bool FormSetType(string FormID, string TypeForm)
        {
            if (FormID == "") return false;
            string SQL = "";
            SQL = "UPDATE arhForm SET Type = '" + TypeForm + "' WHERE ID = " + FormID;                                                      
            if (!sys.Exec("Remote", SQL)) return false;
            RefreshFormList(); 
            return true;
        } 
        
        ///Получить Имя формы по её ID.
        public bool GetFormName(string FormID, out string FormName)
        {
            FormName = "";
            if (FormID == "") return false;
            string SQL = "SELECT Name FROM arhForm WHERE ID = " + FormID;
            FormName = sys.GetValue("Remote", SQL);
            return (FormName != "");           
        }
        
        ///Получить ID формы по её имени.
        public bool GetFormID(string FormName, out string FormID)
        {
            FormID = "";
            if (FormName == "") return false;
            string SQL = "SELECT ID FROM arhForm WHERE Name = '" + FormName + "'";
            FormID = sys.GetValue("Remote", SQL);
            return (FormID != "");           
        }
        
        ///Получить Имя формы по её HistID.
        public bool GetFormHistName(string FormHistID, out string FormName)
        {
            FormName = "";
            if (FormHistID == "") return false;
            string SQL = "SELECT Name FROM arhFormHist WHERE ID = " + FormHistID;
            FormName = sys.GetValue("Remote", SQL);
            return (FormName != "");           
        }
                                 
        ///Скопировать из истории формы на тестовую версию.
        public bool FormHistToTest(string FormHistID)
        {
            if (FormHistID == "") return false;
            //Получаем Имя формы по её HistID.
            string FormName;
            if (!GetFormHistName(FormHistID, out FormName)) return false; 
            
            //Получаем ID формы по её имени.
            string FormID;
            if (!GetFormID(FormName, out FormID))  return false; 
            
            if (sys.SM("Восстановление проекта из истории." + sys.CR + 
                       "Файлы проекта на диске будут переписаны. Переписать тестовую версию формы?", "Question") == false) return false;
            string SQL = "";
            
            if (sys.ServerTypeRemote == "Postgres")
                SQL = "UPDATE arhForm SET " +
                      "Name = FH.Name, Type = FH.Type, DateChangeTest = datatime('now'), " +
                      "UserChangeTestID = " + sys.UserID + ", " +
                      "FormXMLTest = FH.FormXML, FormCodeTest = FH.FormCode, TextCodeTest = FH.TextCode, " + 
                      "FormDLLTest = FH.FormDLL, CountRowsTest = FH.CountRows " + 
                      "FROM arhFormHist FH WHERE Form.ID = " + FormID + " AND FH.FormID = " + FormHistID;                    
             
            if (sys.ServerTypeRemote == "SQLite")
                SQL = "INSERT OR REPLACE INTO arhForm (ID, Name, Type, DateChangeTest, UserChangeTestID, " + 
                      "FormXMLTest, FormCodeTest, TextCodeTest, FormDLLTest, CountRowsTest)" + sys.CR + 
                      "SELECT F.ID, FH.Name, FH.Type, " + sys.DateTimeCurrent() + ", " + sys.UserID + ", " +
                      "FH.FormXML, FH.FormCode, FH.TextCode, FH.FormDLL, FH.CountRows FROM arhFormHist FH JOIN arhForm F ON FH.FormID = F.ID " +
                      "AND F.ID = " + FormID + " AND FH.ID = " + FormHistID;                                
            
            if (sys.ServerTypeRemote == "MSSQL")
                 SQL = "UPDATE arhForm SET " +
                      "Name = FH.Name, Type = FH.Type, DateChangeTest = datatime('now'), " +
                      "UserChangeTestID = " + sys.UserID + ", " +
                      "FormXMLTest = FH.FormXML, FormCodeTest = FH.FormCode, TextCodeTest = FH.TextCode, " + 
                      "FormDLLTest = FH.FormDLL, CountRowsTest = FH.CountRows " + 
                      "FROM arhFormHist FH WHERE arhForm.Form.ID = " + FormID + " AND FH.FormID = " + FormHistID;  
            
            if (!sys.Exec("Remote", SQL)) return false;
            
            //Скачиваем проект из БД.
            const bool RestoreFromHist = true;           
            if (!sys.ProjectReadFromDataBase(FormName, FormName, FormHistID, RestoreFromHist)) return false;
            sys.SM("Проект формы восстановлен из истории!", "Information");
            return true;           
        } 
        
        ///Копирование формы из тестовой версии в рабочую.
        public bool FormCopyTestToWork(string FormID)
        {                  
            if (FormID == "") return false;
            string SQL = "UPDATE arhForm SET " +
                  "DateCreate   = (CASE WHEN DateCreate IS NULL THEN " + sys.DateTimeCurrent() + " ELSE DateCreate END), " +
                  "UserCreateID = (CASE WHEN UserCreateID IS NULL THEN " + sys.UserID + " ELSE UserCreateID END), " +
                  "DateChange   = current_timestamp, UserChangeID = " + sys.UserID + ", " +
                  "FormXML      = FormXMLTest,   " +
                  "FormCode     = FormCodeTest,  " +
                  "CountRows    = CountRowsTest, " +
                  "Hash         = HashTest,      " +                    
                  "FormDLL      = FormDLLTest,   " +                             
                  "TextCode     = TextCodeTest  WHERE ID = " + FormID + ";" + sys.CR + 
                  
                  "INSERT INTO arhFormHist (" +
                  "EntityID, Name, Type, DEL, Block, DateCopy, UserCopyID, " +
                  "FormXML, FormCode, TextCode, FormDLL, CountRows, FormID, Hash, ProjectZip) " +
                  "SELECT 101, Name, Type, DEL, Block, " + sys.DateTimeCurrent() + ", " + sys.UserID + "," +
                  "FormXML, FormCode, TextCode, FormDLL, CountRows, " + FormID + ", Hash, ProjectZip " + sys.CR + 
                  "FROM arhForm WHERE ID = " + FormID;
            if (!sys.Exec("Remote", SQL)) return false;
            sys.SM("Форма скопирована на Work!", "Information");
            return true;
        }              
                            
        ///Экспорт формы в файл.
        public bool FormExport(string FormID)
        {
            if (FormID == "") return false;
            return sys.RecordSaveToFile("Remote", FormID, "Form", "");
        }
        
        ///Импорт формы из файла.
        public bool FormImport(string FormID)
        {                           
            if (FormID == "") return false;
            string FileName = "Form." + FormID + ".json";
            const string InitialDirectory = "";
            if (!sys.OpenFileName("Import object", "json Files|*.json|All Files|*.*", InitialDirectory, ref FileName)) return false;
            string ID;
            return sys.RecordLoadFromFile("Remote", FileName, "ASK", out ID);                             
        }  
                           
        ///Событие. Контекстное меню для таблицы форм.                  
        private void CmFormN14Click(object sender, EventArgs e)
        {                                                
            if (dgvForm.RowCount == 0) return;                            
            string SenderName  = sys.GetSenderName(sender);            
            string FormID      = sys.DGSelected(dgvForm, "ID");
            string ProjectPath = sys.DGSelected(dgvForm, "ProjectPath");           
            string FormName    = Path.GetFileNameWithoutExtension(ProjectPath);            
            
            //Show code Work.
            if (SenderName == "cmFormN14") ShowCodeForm(FormID, "", "Work");
            
            //Show code Test.
            if (SenderName == "cmFormN15") ShowCodeForm(FormID, "", "Test");
                                     
            //New.
            if (SenderName == "cmFormN24") FormNew();
            
            //Rename.
            if (SenderName == "cmFormN23") FormRename(ProjectPath);                         
            
            //Copy To Work.
            if (SenderName == "cmFormN22") FormCopyTestToWork(FormID);            
              
            //Set Type Form                      
            if (SenderName == "cmFormN21_1") FormSetType(FormID, "Main");
            if (SenderName == "cmFormN21_2") FormSetType(FormID, "App");  
            if (SenderName == "cmFormN21_3") FormSetType(FormID, "DLL");
            
            //Delete
            if (SenderName == "cmFormN20") FormDelete(FormID);
            
            //Find.
            //if (SenderName == "cmFormN30") FormFind();           
            
            //Export
            if (SenderName == "cmFormN19") FormExport(FormID);
            
            //Import
            if (SenderName == "cmFormN18") FormImport(FormID);   
            
            //Set Active                   
            if (SenderName == "cmFormN17") FormSetDeleted(FormID, false);
            
            //Set Deleted
            if (SenderName == "cmFormN16") FormSetDeleted(FormID, true);
            //Copy as New
            if (SenderName == "cmFormN13") CopyAsNew(FormID, "");
            
            //Save current
            if (SenderName == "cmFormN25")  SaveProjectAndDLL(tbFormName.Text);
            
            //Load current
            if (SenderName == "cmFormN26")  LoadProjectAndDLL(tbFormName.Text);
             //Save
            if (SenderName == "cmFormN27")  SaveProjectAndDLL(FormName);
            
            //Load
            if (SenderName == "cmFormN28")  LoadProjectAndDLL(FormName);
            //Referesh
            if (SenderName == "cmFormN29") RefreshFormList();                 
        }         
        
        ///Событие. Контекстное меню для таблицы истории.
        private void CmFormHistN1Click(object sender, EventArgs e)
        {
            if (dgvHist.RowCount == 0) return;                              
            string SenderName = sys.GetSenderName(sender);             
            string FormHistID     = dgvHist.SelectedRows[0].Cells["ID"].Value.ToString();                                                      
            
            //Show code
            if (SenderName == "cmFormHistN1") ShowCodeForm("", FormHistID, "");
            
            //Restore            
            if (SenderName == "cmFormHistN2") FormHistToTest(FormHistID);
            
            //Delete                
            if (SenderName == "cmFormHistN3") FormHistDelete(FormHistID);
            
            //Copy as New
            if (SenderName == "cmFormHistN4") CopyAsNew("", FormHistID);
        }
        
        //Сохранить все
        private void SaveProjectAndDLL(string FormName)
        {                             
            //Установка соединения.
            //sys.ConnectLocal();
            //sys.ConnectRemote();
            
            if (!sys.FormWriteToDataBase(FormName)) return;
            if (!sys.ProjectWriteToDataBase(FormName)) return;                  
            sys.SM("Форма и проект сохранены в базу данных!", "Information", "Сохранение в БД");                  
        }
        
        //Загрузка проекта и DLL.          
        private void LoadProjectAndDLL(string FormName)
        {                                   
            //Установка соединения.
            //sys.ConnectLocal();
            //sys.ConnectRemote();
            
            string FileName;
            sys.ProjectReadFromDataBase(FormName, FormName, "", false);
            const bool ForceLoad = true;
            const string EnterMode = "";            
            if (!sys.FormReadFromDataBase(FormName, EnterMode, ForceLoad, out FileName)) return;          
        }
                                           
        ///Получить имя текущей выделенной формы.
        private string GetCurrentFormID()
        {
            string FormID = "0";           
            if (dgvForm.Rows.Count == 0) 
            {             
                GetFormID(tbFormName.Text, out FormID);
            } else
            {
                FormID = sys.DGSelected(dgvForm, "ID");                                  
            } 
            return FormID;
        }
        
        ///Получить имя текущей выделенной формы из истории.
        private string GetCurrentFormHistID()
        {                    
            if (dgvHist.Rows.Count == 0) return "0";
            return sys.DGSelected(dgvHist, "ID");                                             
        }
        
        ///Показать код формы.
        private void ShowCodeForm(string FormID, string FormHistID, string Mode)
        {           
            string CodeText = "";
            string FormName = "";
            if (!sys.GetFormCode(FormID, FormHistID, Mode, out FormName, out CodeText)) CodeText = "Текст модуля не найден!";
            if (CodeText == "") CodeText = "Текст кода формы не найден!";
            TextBoxCode.Text = CodeText;
            string Prop = "";
            if (FormID != "") Prop += "FormID = " + FormID + ", Mode = " + Mode;
            if (FormHistID != "") Prop += "FormHistID = " + FormHistID;
            textBoxCodeProp.Text = Prop;
            tabControl1.SelectedIndex = 2;
        }
        
        ///Показать код выделенной формы.
        private void TabControl1SelectedIndexChanged(object sender, EventArgs e)
        {                                           
            if (tabControl1.SelectedIndex == 1)
            {
                RefreshFormHist();
            }                                  
        }  
        
        //Обновить список форм.
        private void RefreshFormList()
        {        
            string SQL = string.Join(sys.CR, GetQueryText());
            System.Data.DataTable DT;
            sys.SelectDT("Remote", SQL, out DT);
            //DT.Columns.Add("Path", typeof(string));
            string[] Forms1 = Directory.GetDirectories(sys.PathForms);
            for (int i = 0; i < Forms1.Count(); i++)
            {               
                string FormNameDir = Path.GetFileNameWithoutExtension(Forms1[i]);                   
                bool FindFormIn = false;
                for (int j = 0; j <  DT.Rows.Count; j++)
                {
                    string FormNameDB = sys.DTValue(DT, j, "Name");                
                    if (FormNameDir == FormNameDB)
                    {
                        FindFormIn = true;
                        DT.Rows[j]["ProjectPath"] =  Forms1[i];
                    }
                }
                if (!FindFormIn) 
                {
                    var r1 = new string[DT.Columns.Count]; 
                    r1[1] = FormNameDir;
                    r1[2] = Forms1[i];
                    
                    DT.Rows.Add(r1);
                }
                
            }    
            dgvForm.DataSource = DT;
            return;           
        }
            
        ///Обновить таблицу истории формы.
        private void RefreshFormHist()
        {                     
            string FormID = GetCurrentFormID();  
            if (FormID == "") return;
            string SQL = "SELECT " +
                     "t1.ID, " +
                     "t1.Name, " +
                     "t1.Type, " +
                     "t1.DEL, " +
                     "t1.Block, " +
                     "t1.Hash, " + sys.CR +
                     "SUBSTR(t1.FormCode,   1, 50) AS FormCode, " +
                     "SUBSTR(t1.TextCode,   1, 50) AS TextCode, " +
                     "SUBSTR(t1.FormDLL,    1, 50) AS FormDLL, " +
                     "SUBSTR(t1.ProjectZip, 1, 50) AS ProjectZip, " +
                     "t1.CountRows, " + sys.CR +
                     "t1.FormID," +
                     "t2.Name AS UserCopy, " +
                     "t1.DateCopy " +                      
                "FROM arhFormHist t1 " + sys.CR + 
                "LEFT JOIN arhUser t2 ON  t1.UserCopyID = t2.ID " + sys.CR + 
                "WHERE t1.FormID = " + FormID;
            System.Data.DataTable DT;
            sys.SelectDT("Remote", SQL, out DT);
            dgvHist.DataSource = DT;
        }  
        ///Запрос в отдельном методе.
        private string GetQueryText()
        {
            return 
               "SELECT " + sys.CR +
               "  t1.ID   " + sys.CR +                          
               " ,t1.Name " + sys.CR +
               " , '' as ProjectPath " + sys.CR +                
               " ,t1.Type            " + sys.CR +
               " ,(CASE WHEN t1.DEL THEN 'Yes' ELSE 'No' END) AS Deleted " + sys.CR +            
               " ,(CASE WHEN t1.Block THEN 'Yes' ELSE 'No' END) AS Block " + sys.CR +
               " ,SUBSTR(ProjectZip,   1, 50) AS ProjectZip " + sys.CR +
               " ,SUBSTR(FormDLL,      1, 50) AS FormDLL     " + sys.CR +
               " ,SUBSTR(FormDLLTest,  1, 50) AS FormDLLTest    " + sys.CR +
               " ,SUBSTR(TextCode,     1, 50) AS TextCode    " + sys.CR +
               " ,SUBSTR(TextCodeTest, 1, 50) AS TextCodeTest   " + sys.CR +
               " ,t1.Hash                      " + sys.CR +
               " ,t1.HashTest                  " + sys.CR +
               " ,t1.DateCreate                " + sys.CR +
               " ,t1.DateCreateTest            " + sys.CR +
               " ,t1.DateChange                " + sys.CR +
               " ,t1.DateChangeTest            " + sys.CR +
               " ,t2.Name AS UserCreateID      " + sys.CR + 
               " ,t4.Name AS UserCreateTestID  " + sys.CR +
               " ,t3.Name AS UserChangeID      " + sys.CR +
               " ,t5.Name AS UserChangeTestID  " + sys.CR +                  
               " ,t1.CountRows                 " + sys.CR +
               " ,t1.CountRowsTest             " + sys.CR +
               " ,t1.Description               " + sys.CR +
               " FROM arhForm t1               " + sys.CR +
               "   LEFT JOIN arhUser t2 ON t1.UserCreateID     = t2.ID " + sys.CR +
               "   LEFT JOIN arhUser t3 ON t1.UserChangeID     = t3.ID " + sys.CR + 
               "   LEFT JOIN arhUser t4 ON t1.UserCreateTestID = t4.ID " + sys.CR +
                "   LEFT JOIN arhUser t5 ON t1.UserChangeTestID = t5.ID " ;
        }
        
    }
}
