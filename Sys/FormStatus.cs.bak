
﻿/*
 * Создано в SharpDevelop.
 * Пользователь: Travin
 * Дата: 01.01.2018
 * Время: 13:41
 */
 
using System;
using System.Drawing;
using System.Windows.Forms;
using System.Data;
    
namespace FBA
{     
    ///Форма на которой можно для каждой сущности (список Entity) 
    ///назначить список статусов, которые может иметь объект этой сущности (список Status),
    ///а также для каждого статуса сущности можно задать список статусов, 
    ///на которые пользователь может изменить выбранный статус (список Change).
    ///Привязок к ролям нет.     
    public partial class FormStatus : Form
    {
        private DataTable DTEntity;  
        private DataTable DTParent;    
        private DataTable DTChange;
        
        ///Конструктор.
        public FormStatus()
        {            
            InitializeComponent();         
            this.MdiParent = sys.FormMainObj;
            this.Icon = this.MdiParent.Icon;  
            LoadStatus();
        }
                     
        ///Загрузка статусов.
        private void LoadStatus()
        {
            LoadStatusEntity();
            LoadStatusParent();
            LoadStatusChange();
        }
       
        ///Загрузка статусов.
        private void LoadStatusEntity()
        {            
            const string SQL = "SELECT t1.ID, t2.Brief FROM arhStatusEntity t1 " +
                         "LEFT JOIN arhEntity t2 ON t1.EntityRefID = t2.ID ORDER BY t2.Brief; ";
            sys.SelectDT("Remote", SQL, out DTEntity);
            dgvEntity.DataSource = DTEntity;           
        }
        
        ///Загрузка статусов.
        private void LoadStatusParent()
        {            
            string StatusEntityID = sys.DGSelected(dgvEntity, "ID");
            if (StatusEntityID == "") StatusEntityID = "0";
            string SQL = string.Format(
                "SELECT t1.ID, t2.Name FROM arhStatusParent t1 " +
                "LEFT JOIN arhStatus t2 ON t1.StatusID = t2.ID " +                  
                "WHERE t1.StatusEntityID = '{0}' ORDER BY t2.Name;", StatusEntityID);
            sys.SelectDT("Remote", SQL, out DTParent);
            dgvParent.DataSource = DTParent;           
        }
        
        ///Загрузка статусов.
        private void LoadStatusChange()
        {                        
            string StatusParentID = sys.DGSelected(dgvParent, "ID");
            if (StatusParentID == "") StatusParentID = "0";
            string SQL = string.Format(
                "SELECT t1.ID, t2.Name FROM arhStatusChange t1 " +
                "LEFT JOIN arhStatus t2 ON t1.StatusID = t2.ID " +                 
                "WHERE StatusParentID = {0} ORDER BY t2.Name; ", StatusParentID);                            
            sys.SelectDT("Remote", SQL, out DTChange);
            dgvChange.DataSource = DTChange;           
        }
        
        ///Все действия - события всех кнопок.
        private void ts1_N1_Click(object sender, EventArgs e)
        {
            string SenderName = sys.GetSenderName(sender);
            if (SenderName == "ts1_N1")  EntityAdd();
            if (SenderName == "ts2_N1")  ParentAdd();
            if (SenderName == "ts3_N1")  ChangeAdd();
            if (SenderName == "ts1_N2")  EntityDel();
            if (SenderName == "ts2_N2")  ParentDel();
            if (SenderName == "ts3_N2")  ChangeDel();
        }
        
        ///Добавление сущности.
        private bool EntityAdd()
        {           
            string EntityID    = "";
            string EntityBrief = "";
            string EntityName  = "";
            if (!sys.InputEntity(false, false, ref EntityID, ref EntityBrief, ref EntityName)) return false;           
            /*DataRow[] dt;
            dt = DTEntity.Select("Brief='" + EntityBrief + "'");
            if (dt.Length > 0)
            {
                sys.SM("Entity is already added!");
                return;
            }
            DataRow Row1 = DTEntity.NewRow();            
            Row1["Brief"] = EntityBrief; 
            DTEntity.Rows.Add(Row1);*/
            
            string SQL = string.Format("INSERT INTO arhStatusEntity (EntityID, EntityRefID) " +
                    "SELECT 233,{0} WHERE NOT EXISTS (SELECT EntityRefID FROM arhStatusEntity WHERE EntityRefID = '{0}' LIMIT 1)", 
                    EntityID);
            if (!sys.Exec("Local", SQL)) return false;
            LoadStatus();
            return true;
        }
        
        ///Добавление статуса к сущности.
        private bool ParentAdd()
        {           
            string SQL = "SELECT Name FROM arhStatus ORDER BY Name";
            string[,] Values;
            if (!sys.InputValues(SQL, true, out Values)) return false;            
            string StatusEntityID = sys.DGSelected(dgvEntity, "ID");            
            int MaxY = Values.GetLength(0);
            int MaxX = Values.GetLength(1); 
            const string EntityID = "234";
            for (int i = 0; i < MaxY; i++)
            {
                string StatusName  = Values[i, 0];
                string StatusID    = sys.GetStatusID(StatusName); 
                SQL = string.Format("INSERT INTO arhStatusParent (EntityID, StatusEntityID, StatusID) " +
                    "VALUES ({0},{1},{2});", EntityID, StatusEntityID, StatusID);
                sys.Exec("Remote", SQL);
            }
            LoadStatusParent();
            LoadStatusChange();
            return true;                      
        }
        
        ///Добавление статуса, на который может меняться выбранный статус сущности.
        private bool ChangeAdd()
        {           
            string SQL = "SELECT Name FROM arhStatus ORDER BY Name";
            string[,] Values;
            if (!sys.InputValues(SQL, true, out Values)) return false;             
            string StatusEntityID = sys.DGSelected(dgvEntity, "ID");   
            string StatusParentID = sys.DGSelected(dgvParent, "ID");             
            const string EntityID = "235";
            int MaxY = Values.GetLength(0);
            int MaxX = Values.GetLength(1);            
            for (int i = 0; i < MaxY; i++)
            {                               
                string StatusID = sys.GetStatusID(Values[i, 0]);
                if (StatusID == "") continue;
                SQL =  string.Format("INSERT INTO arhStatusChange (EntityID, StatusEntityID,  StatusParentID, StatusID) " +
                    "VALUES ({0},{1},{2},{3});", EntityID, StatusEntityID, StatusParentID, StatusID);
                sys.Exec("Remote", SQL);
                                          
            }
            LoadStatusChange();
            return true;                      
        }
               
        ///Удаление всех статусов сущности.
        private bool EntityDel()
        {           
            string StatusEntityID =  sys.DGSelected(dgvEntity, "ID");
            string SQL = string.Format(
                "DELETE FROM arhStatusChange WHERE StatusEntityID = {0};" + sys.CR +
                "DELETE FROM arhStatusParent WHERE StatusEntityID = {0};" + sys.CR +
                "DELETE FROM arhStatusEntity WHERE ID = {0};", StatusEntityID);               
            if (!sys.Exec("Local", SQL)) return false;
            LoadStatus();
            return true;
        }
        
        ///Удаление одного статуса сущности.
        private bool ParentDel()
        {           
            string StatusParentID =  sys.DGSelected(dgvParent, "ID");
            string SQL = string.Format(
                "DELETE FROM arhStatusChange WHERE StatusParentID = {0};" + sys.CR +
                "DELETE FROM arhStatusParent WHERE ID = {0};", StatusParentID);               
            if (!sys.Exec("Local", SQL)) return false;
            LoadStatusParent();
            LoadStatusChange();
            return true;
        }
        
        ///Удаление статуса на который может ссылаться выбранный статсус сущности.
        private bool ChangeDel()
        {           
            string StatusChangeID =  sys.DGSelected(dgvChange, "ID");
            string SQL = string.Format(
                "DELETE FROM arhStatusChange WHERE StatusParentID = {0};", StatusChangeID);                      
            if (!sys.Exec("Local", SQL)) return false;
            LoadStatusChange();
            return true;
        }
        
        ///Контекстное меню с пунктом Refresh.
        private void cmMenu1_N1_Click(object sender, EventArgs e)
        {
            string DGVName = sys.GetControlNameByMenuStripItem(sender);
            if (DGVName == "dgvEntity") LoadStatus();
            if (DGVName == "dgvParent") 
            {
                LoadStatusParent();
                LoadStatusChange();
            }
            if (DGVName == "dgvParent") LoadStatusChange();             
        }
        ///Событие изменения выделенной строки dgvEntity.
        private void dgvEntity_SelectionChanged(object sender, EventArgs e)
        {
             LoadStatusParent();
             LoadStatusChange();
        }
        
        ///Событие изменения выделенной строки dgvParent.
        private void dgvParent_SelectionChanged(object sender, EventArgs e)
        {
            LoadStatusChange();
        }
        
        
    }
}
